
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    PurchaseOrder: PurchaseOrderPayload<ExtArgs>[]
    SalesOrder: SalesOrderPayload<ExtArgs>[]
    UserTokens: UserTokensPayload<ExtArgs>[]
    userRolePermission: userRolePermissionPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    email: string
    firstName: string | null
    lastName: string | null
    address: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type ProductPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Product"
  objects: {
    purchaseItems: PurchaseItemsPayload<ExtArgs>[]
    salesItems: SalesItemsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    productName: string
    description: string | null
    purchasePrice: number
    sellingPrice: number
    quantity: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["product"]>
  composites: {}
}

/**
 * Model Product
 * 
 */
export type Product = runtime.Types.DefaultSelection<ProductPayload>
export type PurchaseOrderPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "PurchaseOrder"
  objects: {
    orders: PurchaseItemsPayload<ExtArgs>[]
    vendorName: VendorPayload<ExtArgs>
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    purchaseOrderNo: string | null
    vendorId: number
    remarks: string | null
    total: number
    userId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["purchaseOrder"]>
  composites: {}
}

/**
 * Model PurchaseOrder
 * 
 */
export type PurchaseOrder = runtime.Types.DefaultSelection<PurchaseOrderPayload>
export type PurchaseItemsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "PurchaseItems"
  objects: {
    purchaseOrder: PurchaseOrderPayload<ExtArgs>
    product: ProductPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    purchaseOrderId: number
    productId: number
    quantity: number
    purchasePrice: number
    total: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["purchaseItems"]>
  composites: {}
}

/**
 * Model PurchaseItems
 * 
 */
export type PurchaseItems = runtime.Types.DefaultSelection<PurchaseItemsPayload>
export type SalesOrderPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "SalesOrder"
  objects: {
    orders: SalesItemsPayload<ExtArgs>[]
    customerName: CustomerPayload<ExtArgs>
    User: UserPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    salesOrderNo: string | null
    customerId: number
    userId: number | null
    remarks: string | null
    total: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["salesOrder"]>
  composites: {}
}

/**
 * Model SalesOrder
 * 
 */
export type SalesOrder = runtime.Types.DefaultSelection<SalesOrderPayload>
export type SalesItemsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "SalesItems"
  objects: {
    salesOrder: SalesOrderPayload<ExtArgs>
    product: ProductPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    salesOrderId: number
    productId: number
    quantity: number
    sellingPrice: number
    total: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["salesItems"]>
  composites: {}
}

/**
 * Model SalesItems
 * 
 */
export type SalesItems = runtime.Types.DefaultSelection<SalesItemsPayload>
export type VendorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Vendor"
  objects: {
    PurchaseOrder: PurchaseOrderPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    address: string | null
    phone: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["vendor"]>
  composites: {}
}

/**
 * Model Vendor
 * 
 */
export type Vendor = runtime.Types.DefaultSelection<VendorPayload>
export type CustomerPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Customer"
  objects: {
    SalesOrder: SalesOrderPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    address: string | null
    phone: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["customer"]>
  composites: {}
}

/**
 * Model Customer
 * 
 */
export type Customer = runtime.Types.DefaultSelection<CustomerPayload>
export type UserTokensPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "UserTokens"
  objects: {
    user: UserPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    userId: number
    expiry: Date
    token: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["userTokens"]>
  composites: {}
}

/**
 * Model UserTokens
 * 
 */
export type UserTokens = runtime.Types.DefaultSelection<UserTokensPayload>
export type RolesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Roles"
  objects: {
    rolePermission: rolesPermissionPayload<ExtArgs>[]
    user: userRolePermissionPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["roles"]>
  composites: {}
}

/**
 * Model Roles
 * 
 */
export type Roles = runtime.Types.DefaultSelection<RolesPayload>
export type PermissionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Permission"
  objects: {
    rolePermission: rolesPermissionPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    slug: string
  }, ExtArgs["result"]["permission"]>
  composites: {}
}

/**
 * Model Permission
 * 
 */
export type Permission = runtime.Types.DefaultSelection<PermissionPayload>
export type rolesPermissionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "rolesPermission"
  objects: {
    role: RolesPayload<ExtArgs>
    permission: PermissionPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    roleid: number
    permissionid: number
  }, ExtArgs["result"]["rolesPermission"]>
  composites: {}
}

/**
 * Model rolesPermission
 * 
 */
export type rolesPermission = runtime.Types.DefaultSelection<rolesPermissionPayload>
export type userRolePermissionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "userRolePermission"
  objects: {
    user: UserPayload<ExtArgs>
    role: RolesPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    userid: number
    roleid: number
  }, ExtArgs["result"]["userRolePermission"]>
  composites: {}
}

/**
 * Model userRolePermission
 * 
 */
export type userRolePermission = runtime.Types.DefaultSelection<userRolePermissionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.purchaseOrder`: Exposes CRUD operations for the **PurchaseOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PurchaseOrders
    * const purchaseOrders = await prisma.purchaseOrder.findMany()
    * ```
    */
  get purchaseOrder(): Prisma.PurchaseOrderDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.purchaseItems`: Exposes CRUD operations for the **PurchaseItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PurchaseItems
    * const purchaseItems = await prisma.purchaseItems.findMany()
    * ```
    */
  get purchaseItems(): Prisma.PurchaseItemsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.salesOrder`: Exposes CRUD operations for the **SalesOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SalesOrders
    * const salesOrders = await prisma.salesOrder.findMany()
    * ```
    */
  get salesOrder(): Prisma.SalesOrderDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.salesItems`: Exposes CRUD operations for the **SalesItems** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SalesItems
    * const salesItems = await prisma.salesItems.findMany()
    * ```
    */
  get salesItems(): Prisma.SalesItemsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.vendor`: Exposes CRUD operations for the **Vendor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vendors
    * const vendors = await prisma.vendor.findMany()
    * ```
    */
  get vendor(): Prisma.VendorDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.userTokens`: Exposes CRUD operations for the **UserTokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserTokens
    * const userTokens = await prisma.userTokens.findMany()
    * ```
    */
  get userTokens(): Prisma.UserTokensDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.roles`: Exposes CRUD operations for the **Roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.roles.findMany()
    * ```
    */
  get roles(): Prisma.RolesDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.rolesPermission`: Exposes CRUD operations for the **rolesPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolesPermissions
    * const rolesPermissions = await prisma.rolesPermission.findMany()
    * ```
    */
  get rolesPermission(): Prisma.rolesPermissionDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.userRolePermission`: Exposes CRUD operations for the **userRolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRolePermissions
    * const userRolePermissions = await prisma.userRolePermission.findMany()
    * ```
    */
  get userRolePermission(): Prisma.userRolePermissionDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Product: 'Product',
    PurchaseOrder: 'PurchaseOrder',
    PurchaseItems: 'PurchaseItems',
    SalesOrder: 'SalesOrder',
    SalesItems: 'SalesItems',
    Vendor: 'Vendor',
    Customer: 'Customer',
    UserTokens: 'UserTokens',
    Roles: 'Roles',
    Permission: 'Permission',
    rolesPermission: 'rolesPermission',
    userRolePermission: 'userRolePermission'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'product' | 'purchaseOrder' | 'purchaseItems' | 'salesOrder' | 'salesItems' | 'vendor' | 'customer' | 'userTokens' | 'roles' | 'permission' | 'rolesPermission' | 'userRolePermission'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: ProductPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      PurchaseOrder: {
        payload: PurchaseOrderPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PurchaseOrderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchaseOrderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseOrderPayload>
          }
          findFirst: {
            args: Prisma.PurchaseOrderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchaseOrderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseOrderPayload>
          }
          findMany: {
            args: Prisma.PurchaseOrderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseOrderPayload>[]
          }
          create: {
            args: Prisma.PurchaseOrderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseOrderPayload>
          }
          createMany: {
            args: Prisma.PurchaseOrderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PurchaseOrderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseOrderPayload>
          }
          update: {
            args: Prisma.PurchaseOrderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseOrderPayload>
          }
          deleteMany: {
            args: Prisma.PurchaseOrderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PurchaseOrderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PurchaseOrderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseOrderPayload>
          }
          aggregate: {
            args: Prisma.PurchaseOrderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePurchaseOrder>
          }
          groupBy: {
            args: Prisma.PurchaseOrderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PurchaseOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchaseOrderCountArgs<ExtArgs>,
            result: $Utils.Optional<PurchaseOrderCountAggregateOutputType> | number
          }
        }
      }
      PurchaseItems: {
        payload: PurchaseItemsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PurchaseItemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PurchaseItemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseItemsPayload>
          }
          findFirst: {
            args: Prisma.PurchaseItemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PurchaseItemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseItemsPayload>
          }
          findMany: {
            args: Prisma.PurchaseItemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseItemsPayload>[]
          }
          create: {
            args: Prisma.PurchaseItemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseItemsPayload>
          }
          createMany: {
            args: Prisma.PurchaseItemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PurchaseItemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseItemsPayload>
          }
          update: {
            args: Prisma.PurchaseItemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseItemsPayload>
          }
          deleteMany: {
            args: Prisma.PurchaseItemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PurchaseItemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PurchaseItemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PurchaseItemsPayload>
          }
          aggregate: {
            args: Prisma.PurchaseItemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePurchaseItems>
          }
          groupBy: {
            args: Prisma.PurchaseItemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PurchaseItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PurchaseItemsCountArgs<ExtArgs>,
            result: $Utils.Optional<PurchaseItemsCountAggregateOutputType> | number
          }
        }
      }
      SalesOrder: {
        payload: SalesOrderPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SalesOrderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SalesOrderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesOrderPayload>
          }
          findFirst: {
            args: Prisma.SalesOrderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SalesOrderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesOrderPayload>
          }
          findMany: {
            args: Prisma.SalesOrderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesOrderPayload>[]
          }
          create: {
            args: Prisma.SalesOrderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesOrderPayload>
          }
          createMany: {
            args: Prisma.SalesOrderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SalesOrderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesOrderPayload>
          }
          update: {
            args: Prisma.SalesOrderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesOrderPayload>
          }
          deleteMany: {
            args: Prisma.SalesOrderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SalesOrderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SalesOrderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesOrderPayload>
          }
          aggregate: {
            args: Prisma.SalesOrderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSalesOrder>
          }
          groupBy: {
            args: Prisma.SalesOrderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SalesOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.SalesOrderCountArgs<ExtArgs>,
            result: $Utils.Optional<SalesOrderCountAggregateOutputType> | number
          }
        }
      }
      SalesItems: {
        payload: SalesItemsPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.SalesItemsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesItemsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SalesItemsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesItemsPayload>
          }
          findFirst: {
            args: Prisma.SalesItemsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesItemsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SalesItemsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesItemsPayload>
          }
          findMany: {
            args: Prisma.SalesItemsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesItemsPayload>[]
          }
          create: {
            args: Prisma.SalesItemsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesItemsPayload>
          }
          createMany: {
            args: Prisma.SalesItemsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SalesItemsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesItemsPayload>
          }
          update: {
            args: Prisma.SalesItemsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesItemsPayload>
          }
          deleteMany: {
            args: Prisma.SalesItemsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SalesItemsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SalesItemsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SalesItemsPayload>
          }
          aggregate: {
            args: Prisma.SalesItemsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSalesItems>
          }
          groupBy: {
            args: Prisma.SalesItemsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SalesItemsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SalesItemsCountArgs<ExtArgs>,
            result: $Utils.Optional<SalesItemsCountAggregateOutputType> | number
          }
        }
      }
      Vendor: {
        payload: VendorPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.VendorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VendorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VendorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VendorPayload>
          }
          findFirst: {
            args: Prisma.VendorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VendorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VendorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VendorPayload>
          }
          findMany: {
            args: Prisma.VendorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VendorPayload>[]
          }
          create: {
            args: Prisma.VendorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VendorPayload>
          }
          createMany: {
            args: Prisma.VendorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VendorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VendorPayload>
          }
          update: {
            args: Prisma.VendorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VendorPayload>
          }
          deleteMany: {
            args: Prisma.VendorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VendorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VendorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VendorPayload>
          }
          aggregate: {
            args: Prisma.VendorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVendor>
          }
          groupBy: {
            args: Prisma.VendorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VendorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VendorCountArgs<ExtArgs>,
            result: $Utils.Optional<VendorCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: CustomerPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>,
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      UserTokens: {
        payload: UserTokensPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserTokensFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserTokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserTokensFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserTokensPayload>
          }
          findFirst: {
            args: Prisma.UserTokensFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserTokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserTokensFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserTokensPayload>
          }
          findMany: {
            args: Prisma.UserTokensFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserTokensPayload>[]
          }
          create: {
            args: Prisma.UserTokensCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserTokensPayload>
          }
          createMany: {
            args: Prisma.UserTokensCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserTokensDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserTokensPayload>
          }
          update: {
            args: Prisma.UserTokensUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserTokensPayload>
          }
          deleteMany: {
            args: Prisma.UserTokensDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserTokensUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserTokensUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserTokensPayload>
          }
          aggregate: {
            args: Prisma.UserTokensAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserTokens>
          }
          groupBy: {
            args: Prisma.UserTokensGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserTokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserTokensCountArgs<ExtArgs>,
            result: $Utils.Optional<UserTokensCountAggregateOutputType> | number
          }
        }
      }
      Roles: {
        payload: RolesPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.RolesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolesPayload>
          }
          findFirst: {
            args: Prisma.RolesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolesPayload>
          }
          findMany: {
            args: Prisma.RolesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolesPayload>[]
          }
          create: {
            args: Prisma.RolesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolesPayload>
          }
          createMany: {
            args: Prisma.RolesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RolesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolesPayload>
          }
          update: {
            args: Prisma.RolesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolesPayload>
          }
          deleteMany: {
            args: Prisma.RolesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RolesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RolesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolesPayload>
          }
          aggregate: {
            args: Prisma.RolesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRoles>
          }
          groupBy: {
            args: Prisma.RolesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RolesGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolesCountArgs<ExtArgs>,
            result: $Utils.Optional<RolesCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: PermissionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>,
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      rolesPermission: {
        payload: rolesPermissionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.rolesPermissionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<rolesPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.rolesPermissionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<rolesPermissionPayload>
          }
          findFirst: {
            args: Prisma.rolesPermissionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<rolesPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.rolesPermissionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<rolesPermissionPayload>
          }
          findMany: {
            args: Prisma.rolesPermissionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<rolesPermissionPayload>[]
          }
          create: {
            args: Prisma.rolesPermissionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<rolesPermissionPayload>
          }
          createMany: {
            args: Prisma.rolesPermissionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.rolesPermissionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<rolesPermissionPayload>
          }
          update: {
            args: Prisma.rolesPermissionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<rolesPermissionPayload>
          }
          deleteMany: {
            args: Prisma.rolesPermissionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.rolesPermissionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.rolesPermissionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<rolesPermissionPayload>
          }
          aggregate: {
            args: Prisma.RolesPermissionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRolesPermission>
          }
          groupBy: {
            args: Prisma.RolesPermissionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RolesPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.rolesPermissionCountArgs<ExtArgs>,
            result: $Utils.Optional<RolesPermissionCountAggregateOutputType> | number
          }
        }
      }
      userRolePermission: {
        payload: userRolePermissionPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.userRolePermissionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userRolePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userRolePermissionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userRolePermissionPayload>
          }
          findFirst: {
            args: Prisma.userRolePermissionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userRolePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userRolePermissionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userRolePermissionPayload>
          }
          findMany: {
            args: Prisma.userRolePermissionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userRolePermissionPayload>[]
          }
          create: {
            args: Prisma.userRolePermissionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userRolePermissionPayload>
          }
          createMany: {
            args: Prisma.userRolePermissionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userRolePermissionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userRolePermissionPayload>
          }
          update: {
            args: Prisma.userRolePermissionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userRolePermissionPayload>
          }
          deleteMany: {
            args: Prisma.userRolePermissionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userRolePermissionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userRolePermissionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userRolePermissionPayload>
          }
          aggregate: {
            args: Prisma.UserRolePermissionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserRolePermission>
          }
          groupBy: {
            args: Prisma.UserRolePermissionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserRolePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.userRolePermissionCountArgs<ExtArgs>,
            result: $Utils.Optional<UserRolePermissionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    PurchaseOrder: number
    SalesOrder: number
    UserTokens: number
    userRolePermission: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    PurchaseOrder?: boolean
    SalesOrder?: boolean
    UserTokens?: boolean
    userRolePermission?: boolean
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type ProductCountOutputType
   */


  export type ProductCountOutputType = {
    purchaseItems: number
    salesItems: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    purchaseItems?: boolean
    salesItems?: boolean
  }

  // Custom InputTypes

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type PurchaseOrderCountOutputType
   */


  export type PurchaseOrderCountOutputType = {
    orders: number
  }

  export type PurchaseOrderCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    orders?: boolean
  }

  // Custom InputTypes

  /**
   * PurchaseOrderCountOutputType without action
   */
  export type PurchaseOrderCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrderCountOutputType
     */
    select?: PurchaseOrderCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type SalesOrderCountOutputType
   */


  export type SalesOrderCountOutputType = {
    orders: number
  }

  export type SalesOrderCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    orders?: boolean
  }

  // Custom InputTypes

  /**
   * SalesOrderCountOutputType without action
   */
  export type SalesOrderCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrderCountOutputType
     */
    select?: SalesOrderCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type VendorCountOutputType
   */


  export type VendorCountOutputType = {
    PurchaseOrder: number
  }

  export type VendorCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    PurchaseOrder?: boolean
  }

  // Custom InputTypes

  /**
   * VendorCountOutputType without action
   */
  export type VendorCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VendorCountOutputType
     */
    select?: VendorCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type CustomerCountOutputType
   */


  export type CustomerCountOutputType = {
    SalesOrder: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    SalesOrder?: boolean
  }

  // Custom InputTypes

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type RolesCountOutputType
   */


  export type RolesCountOutputType = {
    rolePermission: number
    user: number
  }

  export type RolesCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    rolePermission?: boolean
    user?: boolean
  }

  // Custom InputTypes

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolesCountOutputType
     */
    select?: RolesCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Count Type PermissionCountOutputType
   */


  export type PermissionCountOutputType = {
    rolePermission: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    rolePermission?: boolean
  }

  // Custom InputTypes

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    firstName: string | null
    lastName: string | null
    address: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    firstName: string | null
    lastName: string | null
    address: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    address: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    address?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    address?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    address?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    firstName: string | null
    lastName: string | null
    address: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    address?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    PurchaseOrder?: boolean | User$PurchaseOrderArgs<ExtArgs>
    SalesOrder?: boolean | User$SalesOrderArgs<ExtArgs>
    UserTokens?: boolean | User$UserTokensArgs<ExtArgs>
    userRolePermission?: boolean | User$userRolePermissionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    address?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    PurchaseOrder?: boolean | User$PurchaseOrderArgs<ExtArgs>
    SalesOrder?: boolean | User$SalesOrderArgs<ExtArgs>
    UserTokens?: boolean | User$UserTokensArgs<ExtArgs>
    userRolePermission?: boolean | User$userRolePermissionArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    PurchaseOrder<T extends User$PurchaseOrderArgs<ExtArgs> = {}>(args?: Subset<T, User$PurchaseOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'findMany', never>| Null>;

    SalesOrder<T extends User$SalesOrderArgs<ExtArgs> = {}>(args?: Subset<T, User$SalesOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'findMany', never>| Null>;

    UserTokens<T extends User$UserTokensArgs<ExtArgs> = {}>(args?: Subset<T, User$UserTokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<UserTokensPayload<ExtArgs>, T, 'findMany', never>| Null>;

    userRolePermission<T extends User$userRolePermissionArgs<ExtArgs> = {}>(args?: Subset<T, User$userRolePermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.PurchaseOrder
   */
  export type User$PurchaseOrderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    where?: PurchaseOrderWhereInput
    orderBy?: Enumerable<PurchaseOrderOrderByWithRelationInput>
    cursor?: PurchaseOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PurchaseOrderScalarFieldEnum>
  }


  /**
   * User.SalesOrder
   */
  export type User$SalesOrderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrder
     */
    select?: SalesOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesOrderInclude<ExtArgs> | null
    where?: SalesOrderWhereInput
    orderBy?: Enumerable<SalesOrderOrderByWithRelationInput>
    cursor?: SalesOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SalesOrderScalarFieldEnum>
  }


  /**
   * User.UserTokens
   */
  export type User$UserTokensArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTokens
     */
    select?: UserTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTokensInclude<ExtArgs> | null
    where?: UserTokensWhereInput
    orderBy?: Enumerable<UserTokensOrderByWithRelationInput>
    cursor?: UserTokensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserTokensScalarFieldEnum>
  }


  /**
   * User.userRolePermission
   */
  export type User$userRolePermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userRolePermission
     */
    select?: userRolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userRolePermissionInclude<ExtArgs> | null
    where?: userRolePermissionWhereInput
    orderBy?: Enumerable<userRolePermissionOrderByWithRelationInput>
    cursor?: userRolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserRolePermissionScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    purchasePrice: number | null
    sellingPrice: number | null
    quantity: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    purchasePrice: number | null
    sellingPrice: number | null
    quantity: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    productName: string | null
    description: string | null
    purchasePrice: number | null
    sellingPrice: number | null
    quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    productName: string | null
    description: string | null
    purchasePrice: number | null
    sellingPrice: number | null
    quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    productName: number
    description: number
    purchasePrice: number
    sellingPrice: number
    quantity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    purchasePrice?: true
    sellingPrice?: true
    quantity?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    purchasePrice?: true
    sellingPrice?: true
    quantity?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    productName?: true
    description?: true
    purchasePrice?: true
    sellingPrice?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    productName?: true
    description?: true
    purchasePrice?: true
    sellingPrice?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    productName?: true
    description?: true
    purchasePrice?: true
    sellingPrice?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: Enumerable<ProductOrderByWithAggregationInput>
    by: ProductScalarFieldEnum[]
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: number
    productName: string
    description: string | null
    purchasePrice: number
    sellingPrice: number
    quantity: number
    createdAt: Date
    updatedAt: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productName?: boolean
    description?: boolean
    purchasePrice?: boolean
    sellingPrice?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    purchaseItems?: boolean | Product$purchaseItemsArgs<ExtArgs>
    salesItems?: boolean | Product$salesItemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    productName?: boolean
    description?: boolean
    purchasePrice?: boolean
    sellingPrice?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    purchaseItems?: boolean | Product$purchaseItemsArgs<ExtArgs>
    salesItems?: boolean | Product$salesItemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeArgs<ExtArgs>
  }


  type ProductGetPayload<S extends boolean | null | undefined | ProductArgs> = $Types.GetResult<ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product'> extends True ? Prisma__ProductClient<$Types.GetResult<ProductPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ProductClient<$Types.GetResult<ProductPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Types.GetResult<ProductPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product'> extends True ? Prisma__ProductClient<$Types.GetResult<ProductPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ProductClient<$Types.GetResult<ProductPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Types.GetResult<ProductPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ProductPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCreateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Types.GetResult<ProductPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>
    ): Prisma__ProductClient<$Types.GetResult<ProductPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Types.GetResult<ProductPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>
    ): Prisma__ProductClient<$Types.GetResult<ProductPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    purchaseItems<T extends Product$purchaseItemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$purchaseItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    salesItems<T extends Product$salesItemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$salesItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Product base type for findUnique actions
   */
  export type ProductFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUnique
   */
  export interface ProductFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProductFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product base type for findFirst actions
   */
  export type ProductFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: Enumerable<ProductScalarFieldEnum>
  }

  /**
   * Product findFirst
   */
  export interface ProductFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProductFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: Enumerable<ProductCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }


  /**
   * Product.purchaseItems
   */
  export type Product$purchaseItemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItems
     */
    select?: PurchaseItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseItemsInclude<ExtArgs> | null
    where?: PurchaseItemsWhereInput
    orderBy?: Enumerable<PurchaseItemsOrderByWithRelationInput>
    cursor?: PurchaseItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PurchaseItemsScalarFieldEnum>
  }


  /**
   * Product.salesItems
   */
  export type Product$salesItemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesItems
     */
    select?: SalesItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesItemsInclude<ExtArgs> | null
    where?: SalesItemsWhereInput
    orderBy?: Enumerable<SalesItemsOrderByWithRelationInput>
    cursor?: SalesItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SalesItemsScalarFieldEnum>
  }


  /**
   * Product without action
   */
  export type ProductArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProductInclude<ExtArgs> | null
  }



  /**
   * Model PurchaseOrder
   */


  export type AggregatePurchaseOrder = {
    _count: PurchaseOrderCountAggregateOutputType | null
    _avg: PurchaseOrderAvgAggregateOutputType | null
    _sum: PurchaseOrderSumAggregateOutputType | null
    _min: PurchaseOrderMinAggregateOutputType | null
    _max: PurchaseOrderMaxAggregateOutputType | null
  }

  export type PurchaseOrderAvgAggregateOutputType = {
    id: number | null
    vendorId: number | null
    total: number | null
    userId: number | null
  }

  export type PurchaseOrderSumAggregateOutputType = {
    id: number | null
    vendorId: number | null
    total: number | null
    userId: number | null
  }

  export type PurchaseOrderMinAggregateOutputType = {
    id: number | null
    purchaseOrderNo: string | null
    vendorId: number | null
    remarks: string | null
    total: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PurchaseOrderMaxAggregateOutputType = {
    id: number | null
    purchaseOrderNo: string | null
    vendorId: number | null
    remarks: string | null
    total: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PurchaseOrderCountAggregateOutputType = {
    id: number
    purchaseOrderNo: number
    vendorId: number
    remarks: number
    total: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PurchaseOrderAvgAggregateInputType = {
    id?: true
    vendorId?: true
    total?: true
    userId?: true
  }

  export type PurchaseOrderSumAggregateInputType = {
    id?: true
    vendorId?: true
    total?: true
    userId?: true
  }

  export type PurchaseOrderMinAggregateInputType = {
    id?: true
    purchaseOrderNo?: true
    vendorId?: true
    remarks?: true
    total?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PurchaseOrderMaxAggregateInputType = {
    id?: true
    purchaseOrderNo?: true
    vendorId?: true
    remarks?: true
    total?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PurchaseOrderCountAggregateInputType = {
    id?: true
    purchaseOrderNo?: true
    vendorId?: true
    remarks?: true
    total?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PurchaseOrderAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseOrder to aggregate.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: Enumerable<PurchaseOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PurchaseOrders
    **/
    _count?: true | PurchaseOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseOrderMaxAggregateInputType
  }

  export type GetPurchaseOrderAggregateType<T extends PurchaseOrderAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchaseOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchaseOrder[P]>
      : GetScalarType<T[P], AggregatePurchaseOrder[P]>
  }




  export type PurchaseOrderGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PurchaseOrderWhereInput
    orderBy?: Enumerable<PurchaseOrderOrderByWithAggregationInput>
    by: PurchaseOrderScalarFieldEnum[]
    having?: PurchaseOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseOrderCountAggregateInputType | true
    _avg?: PurchaseOrderAvgAggregateInputType
    _sum?: PurchaseOrderSumAggregateInputType
    _min?: PurchaseOrderMinAggregateInputType
    _max?: PurchaseOrderMaxAggregateInputType
  }


  export type PurchaseOrderGroupByOutputType = {
    id: number
    purchaseOrderNo: string | null
    vendorId: number
    remarks: string | null
    total: number
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: PurchaseOrderCountAggregateOutputType | null
    _avg: PurchaseOrderAvgAggregateOutputType | null
    _sum: PurchaseOrderSumAggregateOutputType | null
    _min: PurchaseOrderMinAggregateOutputType | null
    _max: PurchaseOrderMaxAggregateOutputType | null
  }

  type GetPurchaseOrderGroupByPayload<T extends PurchaseOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PurchaseOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseOrderGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseOrderGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseOrderSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    purchaseOrderNo?: boolean
    vendorId?: boolean
    remarks?: boolean
    total?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orders?: boolean | PurchaseOrder$ordersArgs<ExtArgs>
    vendorName?: boolean | VendorArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
    _count?: boolean | PurchaseOrderCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseOrder"]>

  export type PurchaseOrderSelectScalar = {
    id?: boolean
    purchaseOrderNo?: boolean
    vendorId?: boolean
    remarks?: boolean
    total?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PurchaseOrderInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    orders?: boolean | PurchaseOrder$ordersArgs<ExtArgs>
    vendorName?: boolean | VendorArgs<ExtArgs>
    user?: boolean | UserArgs<ExtArgs>
    _count?: boolean | PurchaseOrderCountOutputTypeArgs<ExtArgs>
  }


  type PurchaseOrderGetPayload<S extends boolean | null | undefined | PurchaseOrderArgs> = $Types.GetResult<PurchaseOrderPayload, S>

  type PurchaseOrderCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PurchaseOrderFindManyArgs, 'select' | 'include'> & {
      select?: PurchaseOrderCountAggregateInputType | true
    }

  export interface PurchaseOrderDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PurchaseOrder'], meta: { name: 'PurchaseOrder' } }
    /**
     * Find zero or one PurchaseOrder that matches the filter.
     * @param {PurchaseOrderFindUniqueArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PurchaseOrderFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PurchaseOrderFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PurchaseOrder'> extends True ? Prisma__PurchaseOrderClient<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PurchaseOrderClient<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one PurchaseOrder that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PurchaseOrderFindUniqueOrThrowArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PurchaseOrderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseOrderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PurchaseOrderClient<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first PurchaseOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderFindFirstArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PurchaseOrderFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PurchaseOrderFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PurchaseOrder'> extends True ? Prisma__PurchaseOrderClient<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PurchaseOrderClient<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first PurchaseOrder that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderFindFirstOrThrowArgs} args - Arguments to find a PurchaseOrder
     * @example
     * // Get one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PurchaseOrderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseOrderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PurchaseOrderClient<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more PurchaseOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PurchaseOrders
     * const purchaseOrders = await prisma.purchaseOrder.findMany()
     * 
     * // Get first 10 PurchaseOrders
     * const purchaseOrders = await prisma.purchaseOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseOrderWithIdOnly = await prisma.purchaseOrder.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PurchaseOrderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseOrderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a PurchaseOrder.
     * @param {PurchaseOrderCreateArgs} args - Arguments to create a PurchaseOrder.
     * @example
     * // Create one PurchaseOrder
     * const PurchaseOrder = await prisma.purchaseOrder.create({
     *   data: {
     *     // ... data to create a PurchaseOrder
     *   }
     * })
     * 
    **/
    create<T extends PurchaseOrderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseOrderCreateArgs<ExtArgs>>
    ): Prisma__PurchaseOrderClient<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many PurchaseOrders.
     *     @param {PurchaseOrderCreateManyArgs} args - Arguments to create many PurchaseOrders.
     *     @example
     *     // Create many PurchaseOrders
     *     const purchaseOrder = await prisma.purchaseOrder.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PurchaseOrderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseOrderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PurchaseOrder.
     * @param {PurchaseOrderDeleteArgs} args - Arguments to delete one PurchaseOrder.
     * @example
     * // Delete one PurchaseOrder
     * const PurchaseOrder = await prisma.purchaseOrder.delete({
     *   where: {
     *     // ... filter to delete one PurchaseOrder
     *   }
     * })
     * 
    **/
    delete<T extends PurchaseOrderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseOrderDeleteArgs<ExtArgs>>
    ): Prisma__PurchaseOrderClient<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one PurchaseOrder.
     * @param {PurchaseOrderUpdateArgs} args - Arguments to update one PurchaseOrder.
     * @example
     * // Update one PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PurchaseOrderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseOrderUpdateArgs<ExtArgs>>
    ): Prisma__PurchaseOrderClient<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more PurchaseOrders.
     * @param {PurchaseOrderDeleteManyArgs} args - Arguments to filter PurchaseOrders to delete.
     * @example
     * // Delete a few PurchaseOrders
     * const { count } = await prisma.purchaseOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PurchaseOrderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseOrderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PurchaseOrders
     * const purchaseOrder = await prisma.purchaseOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PurchaseOrderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseOrderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PurchaseOrder.
     * @param {PurchaseOrderUpsertArgs} args - Arguments to update or create a PurchaseOrder.
     * @example
     * // Update or create a PurchaseOrder
     * const purchaseOrder = await prisma.purchaseOrder.upsert({
     *   create: {
     *     // ... data to create a PurchaseOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PurchaseOrder we want to update
     *   }
     * })
    **/
    upsert<T extends PurchaseOrderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseOrderUpsertArgs<ExtArgs>>
    ): Prisma__PurchaseOrderClient<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of PurchaseOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderCountArgs} args - Arguments to filter PurchaseOrders to count.
     * @example
     * // Count the number of PurchaseOrders
     * const count = await prisma.purchaseOrder.count({
     *   where: {
     *     // ... the filter for the PurchaseOrders we want to count
     *   }
     * })
    **/
    count<T extends PurchaseOrderCountArgs>(
      args?: Subset<T, PurchaseOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PurchaseOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseOrderAggregateArgs>(args: Subset<T, PurchaseOrderAggregateArgs>): Prisma.PrismaPromise<GetPurchaseOrderAggregateType<T>>

    /**
     * Group by PurchaseOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseOrderGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PurchaseOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PurchaseOrderClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    orders<T extends PurchaseOrder$ordersArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseOrder$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    vendorName<T extends VendorArgs<ExtArgs> = {}>(args?: Subset<T, VendorArgs<ExtArgs>>): Prisma__VendorClient<$Types.GetResult<VendorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PurchaseOrder base type for findUnique actions
   */
  export type PurchaseOrderFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where: PurchaseOrderWhereUniqueInput
  }

  /**
   * PurchaseOrder findUnique
   */
  export interface PurchaseOrderFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PurchaseOrderFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PurchaseOrder findUniqueOrThrow
   */
  export type PurchaseOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where: PurchaseOrderWhereUniqueInput
  }


  /**
   * PurchaseOrder base type for findFirst actions
   */
  export type PurchaseOrderFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: Enumerable<PurchaseOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseOrders.
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseOrders.
     */
    distinct?: Enumerable<PurchaseOrderScalarFieldEnum>
  }

  /**
   * PurchaseOrder findFirst
   */
  export interface PurchaseOrderFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PurchaseOrderFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PurchaseOrder findFirstOrThrow
   */
  export type PurchaseOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrder to fetch.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: Enumerable<PurchaseOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseOrders.
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseOrders.
     */
    distinct?: Enumerable<PurchaseOrderScalarFieldEnum>
  }


  /**
   * PurchaseOrder findMany
   */
  export type PurchaseOrderFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseOrders to fetch.
     */
    where?: PurchaseOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseOrders to fetch.
     */
    orderBy?: Enumerable<PurchaseOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PurchaseOrders.
     */
    cursor?: PurchaseOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseOrders.
     */
    skip?: number
    distinct?: Enumerable<PurchaseOrderScalarFieldEnum>
  }


  /**
   * PurchaseOrder create
   */
  export type PurchaseOrderCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a PurchaseOrder.
     */
    data: XOR<PurchaseOrderCreateInput, PurchaseOrderUncheckedCreateInput>
  }


  /**
   * PurchaseOrder createMany
   */
  export type PurchaseOrderCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PurchaseOrders.
     */
    data: Enumerable<PurchaseOrderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PurchaseOrder update
   */
  export type PurchaseOrderUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a PurchaseOrder.
     */
    data: XOR<PurchaseOrderUpdateInput, PurchaseOrderUncheckedUpdateInput>
    /**
     * Choose, which PurchaseOrder to update.
     */
    where: PurchaseOrderWhereUniqueInput
  }


  /**
   * PurchaseOrder updateMany
   */
  export type PurchaseOrderUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PurchaseOrders.
     */
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseOrders to update
     */
    where?: PurchaseOrderWhereInput
  }


  /**
   * PurchaseOrder upsert
   */
  export type PurchaseOrderUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the PurchaseOrder to update in case it exists.
     */
    where: PurchaseOrderWhereUniqueInput
    /**
     * In case the PurchaseOrder found by the `where` argument doesn't exist, create a new PurchaseOrder with this data.
     */
    create: XOR<PurchaseOrderCreateInput, PurchaseOrderUncheckedCreateInput>
    /**
     * In case the PurchaseOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchaseOrderUpdateInput, PurchaseOrderUncheckedUpdateInput>
  }


  /**
   * PurchaseOrder delete
   */
  export type PurchaseOrderDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    /**
     * Filter which PurchaseOrder to delete.
     */
    where: PurchaseOrderWhereUniqueInput
  }


  /**
   * PurchaseOrder deleteMany
   */
  export type PurchaseOrderDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseOrders to delete
     */
    where?: PurchaseOrderWhereInput
  }


  /**
   * PurchaseOrder.orders
   */
  export type PurchaseOrder$ordersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItems
     */
    select?: PurchaseItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseItemsInclude<ExtArgs> | null
    where?: PurchaseItemsWhereInput
    orderBy?: Enumerable<PurchaseItemsOrderByWithRelationInput>
    cursor?: PurchaseItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PurchaseItemsScalarFieldEnum>
  }


  /**
   * PurchaseOrder without action
   */
  export type PurchaseOrderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
  }



  /**
   * Model PurchaseItems
   */


  export type AggregatePurchaseItems = {
    _count: PurchaseItemsCountAggregateOutputType | null
    _avg: PurchaseItemsAvgAggregateOutputType | null
    _sum: PurchaseItemsSumAggregateOutputType | null
    _min: PurchaseItemsMinAggregateOutputType | null
    _max: PurchaseItemsMaxAggregateOutputType | null
  }

  export type PurchaseItemsAvgAggregateOutputType = {
    id: number | null
    purchaseOrderId: number | null
    productId: number | null
    quantity: number | null
    purchasePrice: number | null
    total: number | null
  }

  export type PurchaseItemsSumAggregateOutputType = {
    id: number | null
    purchaseOrderId: number | null
    productId: number | null
    quantity: number | null
    purchasePrice: number | null
    total: number | null
  }

  export type PurchaseItemsMinAggregateOutputType = {
    id: number | null
    purchaseOrderId: number | null
    productId: number | null
    quantity: number | null
    purchasePrice: number | null
    total: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PurchaseItemsMaxAggregateOutputType = {
    id: number | null
    purchaseOrderId: number | null
    productId: number | null
    quantity: number | null
    purchasePrice: number | null
    total: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PurchaseItemsCountAggregateOutputType = {
    id: number
    purchaseOrderId: number
    productId: number
    quantity: number
    purchasePrice: number
    total: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PurchaseItemsAvgAggregateInputType = {
    id?: true
    purchaseOrderId?: true
    productId?: true
    quantity?: true
    purchasePrice?: true
    total?: true
  }

  export type PurchaseItemsSumAggregateInputType = {
    id?: true
    purchaseOrderId?: true
    productId?: true
    quantity?: true
    purchasePrice?: true
    total?: true
  }

  export type PurchaseItemsMinAggregateInputType = {
    id?: true
    purchaseOrderId?: true
    productId?: true
    quantity?: true
    purchasePrice?: true
    total?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PurchaseItemsMaxAggregateInputType = {
    id?: true
    purchaseOrderId?: true
    productId?: true
    quantity?: true
    purchasePrice?: true
    total?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PurchaseItemsCountAggregateInputType = {
    id?: true
    purchaseOrderId?: true
    productId?: true
    quantity?: true
    purchasePrice?: true
    total?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PurchaseItemsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseItems to aggregate.
     */
    where?: PurchaseItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseItems to fetch.
     */
    orderBy?: Enumerable<PurchaseItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PurchaseItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PurchaseItems
    **/
    _count?: true | PurchaseItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PurchaseItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PurchaseItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PurchaseItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PurchaseItemsMaxAggregateInputType
  }

  export type GetPurchaseItemsAggregateType<T extends PurchaseItemsAggregateArgs> = {
        [P in keyof T & keyof AggregatePurchaseItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePurchaseItems[P]>
      : GetScalarType<T[P], AggregatePurchaseItems[P]>
  }




  export type PurchaseItemsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PurchaseItemsWhereInput
    orderBy?: Enumerable<PurchaseItemsOrderByWithAggregationInput>
    by: PurchaseItemsScalarFieldEnum[]
    having?: PurchaseItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PurchaseItemsCountAggregateInputType | true
    _avg?: PurchaseItemsAvgAggregateInputType
    _sum?: PurchaseItemsSumAggregateInputType
    _min?: PurchaseItemsMinAggregateInputType
    _max?: PurchaseItemsMaxAggregateInputType
  }


  export type PurchaseItemsGroupByOutputType = {
    id: number
    purchaseOrderId: number
    productId: number
    quantity: number
    purchasePrice: number
    total: number
    createdAt: Date
    updatedAt: Date
    _count: PurchaseItemsCountAggregateOutputType | null
    _avg: PurchaseItemsAvgAggregateOutputType | null
    _sum: PurchaseItemsSumAggregateOutputType | null
    _min: PurchaseItemsMinAggregateOutputType | null
    _max: PurchaseItemsMaxAggregateOutputType | null
  }

  type GetPurchaseItemsGroupByPayload<T extends PurchaseItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PurchaseItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PurchaseItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PurchaseItemsGroupByOutputType[P]>
            : GetScalarType<T[P], PurchaseItemsGroupByOutputType[P]>
        }
      >
    >


  export type PurchaseItemsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    purchaseOrderId?: boolean
    productId?: boolean
    quantity?: boolean
    purchasePrice?: boolean
    total?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    purchaseOrder?: boolean | PurchaseOrderArgs<ExtArgs>
    product?: boolean | ProductArgs<ExtArgs>
  }, ExtArgs["result"]["purchaseItems"]>

  export type PurchaseItemsSelectScalar = {
    id?: boolean
    purchaseOrderId?: boolean
    productId?: boolean
    quantity?: boolean
    purchasePrice?: boolean
    total?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PurchaseItemsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    purchaseOrder?: boolean | PurchaseOrderArgs<ExtArgs>
    product?: boolean | ProductArgs<ExtArgs>
  }


  type PurchaseItemsGetPayload<S extends boolean | null | undefined | PurchaseItemsArgs> = $Types.GetResult<PurchaseItemsPayload, S>

  type PurchaseItemsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PurchaseItemsFindManyArgs, 'select' | 'include'> & {
      select?: PurchaseItemsCountAggregateInputType | true
    }

  export interface PurchaseItemsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PurchaseItems'], meta: { name: 'PurchaseItems' } }
    /**
     * Find zero or one PurchaseItems that matches the filter.
     * @param {PurchaseItemsFindUniqueArgs} args - Arguments to find a PurchaseItems
     * @example
     * // Get one PurchaseItems
     * const purchaseItems = await prisma.purchaseItems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PurchaseItemsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PurchaseItemsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PurchaseItems'> extends True ? Prisma__PurchaseItemsClient<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PurchaseItemsClient<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one PurchaseItems that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PurchaseItemsFindUniqueOrThrowArgs} args - Arguments to find a PurchaseItems
     * @example
     * // Get one PurchaseItems
     * const purchaseItems = await prisma.purchaseItems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PurchaseItemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseItemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PurchaseItemsClient<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first PurchaseItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemsFindFirstArgs} args - Arguments to find a PurchaseItems
     * @example
     * // Get one PurchaseItems
     * const purchaseItems = await prisma.purchaseItems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PurchaseItemsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PurchaseItemsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PurchaseItems'> extends True ? Prisma__PurchaseItemsClient<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PurchaseItemsClient<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first PurchaseItems that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemsFindFirstOrThrowArgs} args - Arguments to find a PurchaseItems
     * @example
     * // Get one PurchaseItems
     * const purchaseItems = await prisma.purchaseItems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PurchaseItemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseItemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PurchaseItemsClient<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more PurchaseItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PurchaseItems
     * const purchaseItems = await prisma.purchaseItems.findMany()
     * 
     * // Get first 10 PurchaseItems
     * const purchaseItems = await prisma.purchaseItems.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const purchaseItemsWithIdOnly = await prisma.purchaseItems.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PurchaseItemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseItemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a PurchaseItems.
     * @param {PurchaseItemsCreateArgs} args - Arguments to create a PurchaseItems.
     * @example
     * // Create one PurchaseItems
     * const PurchaseItems = await prisma.purchaseItems.create({
     *   data: {
     *     // ... data to create a PurchaseItems
     *   }
     * })
     * 
    **/
    create<T extends PurchaseItemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseItemsCreateArgs<ExtArgs>>
    ): Prisma__PurchaseItemsClient<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many PurchaseItems.
     *     @param {PurchaseItemsCreateManyArgs} args - Arguments to create many PurchaseItems.
     *     @example
     *     // Create many PurchaseItems
     *     const purchaseItems = await prisma.purchaseItems.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PurchaseItemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseItemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PurchaseItems.
     * @param {PurchaseItemsDeleteArgs} args - Arguments to delete one PurchaseItems.
     * @example
     * // Delete one PurchaseItems
     * const PurchaseItems = await prisma.purchaseItems.delete({
     *   where: {
     *     // ... filter to delete one PurchaseItems
     *   }
     * })
     * 
    **/
    delete<T extends PurchaseItemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseItemsDeleteArgs<ExtArgs>>
    ): Prisma__PurchaseItemsClient<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one PurchaseItems.
     * @param {PurchaseItemsUpdateArgs} args - Arguments to update one PurchaseItems.
     * @example
     * // Update one PurchaseItems
     * const purchaseItems = await prisma.purchaseItems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PurchaseItemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseItemsUpdateArgs<ExtArgs>>
    ): Prisma__PurchaseItemsClient<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more PurchaseItems.
     * @param {PurchaseItemsDeleteManyArgs} args - Arguments to filter PurchaseItems to delete.
     * @example
     * // Delete a few PurchaseItems
     * const { count } = await prisma.purchaseItems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PurchaseItemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PurchaseItemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PurchaseItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PurchaseItems
     * const purchaseItems = await prisma.purchaseItems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PurchaseItemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseItemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PurchaseItems.
     * @param {PurchaseItemsUpsertArgs} args - Arguments to update or create a PurchaseItems.
     * @example
     * // Update or create a PurchaseItems
     * const purchaseItems = await prisma.purchaseItems.upsert({
     *   create: {
     *     // ... data to create a PurchaseItems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PurchaseItems we want to update
     *   }
     * })
    **/
    upsert<T extends PurchaseItemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PurchaseItemsUpsertArgs<ExtArgs>>
    ): Prisma__PurchaseItemsClient<$Types.GetResult<PurchaseItemsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of PurchaseItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemsCountArgs} args - Arguments to filter PurchaseItems to count.
     * @example
     * // Count the number of PurchaseItems
     * const count = await prisma.purchaseItems.count({
     *   where: {
     *     // ... the filter for the PurchaseItems we want to count
     *   }
     * })
    **/
    count<T extends PurchaseItemsCountArgs>(
      args?: Subset<T, PurchaseItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PurchaseItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PurchaseItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PurchaseItemsAggregateArgs>(args: Subset<T, PurchaseItemsAggregateArgs>): Prisma.PrismaPromise<GetPurchaseItemsAggregateType<T>>

    /**
     * Group by PurchaseItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PurchaseItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PurchaseItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PurchaseItemsGroupByArgs['orderBy'] }
        : { orderBy?: PurchaseItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PurchaseItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PurchaseItems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PurchaseItemsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    purchaseOrder<T extends PurchaseOrderArgs<ExtArgs> = {}>(args?: Subset<T, PurchaseOrderArgs<ExtArgs>>): Prisma__PurchaseOrderClient<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    product<T extends ProductArgs<ExtArgs> = {}>(args?: Subset<T, ProductArgs<ExtArgs>>): Prisma__ProductClient<$Types.GetResult<ProductPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PurchaseItems base type for findUnique actions
   */
  export type PurchaseItemsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItems
     */
    select?: PurchaseItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseItemsInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseItems to fetch.
     */
    where: PurchaseItemsWhereUniqueInput
  }

  /**
   * PurchaseItems findUnique
   */
  export interface PurchaseItemsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PurchaseItemsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PurchaseItems findUniqueOrThrow
   */
  export type PurchaseItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItems
     */
    select?: PurchaseItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseItemsInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseItems to fetch.
     */
    where: PurchaseItemsWhereUniqueInput
  }


  /**
   * PurchaseItems base type for findFirst actions
   */
  export type PurchaseItemsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItems
     */
    select?: PurchaseItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseItemsInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseItems to fetch.
     */
    where?: PurchaseItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseItems to fetch.
     */
    orderBy?: Enumerable<PurchaseItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseItems.
     */
    cursor?: PurchaseItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseItems.
     */
    distinct?: Enumerable<PurchaseItemsScalarFieldEnum>
  }

  /**
   * PurchaseItems findFirst
   */
  export interface PurchaseItemsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PurchaseItemsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PurchaseItems findFirstOrThrow
   */
  export type PurchaseItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItems
     */
    select?: PurchaseItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseItemsInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseItems to fetch.
     */
    where?: PurchaseItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseItems to fetch.
     */
    orderBy?: Enumerable<PurchaseItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PurchaseItems.
     */
    cursor?: PurchaseItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PurchaseItems.
     */
    distinct?: Enumerable<PurchaseItemsScalarFieldEnum>
  }


  /**
   * PurchaseItems findMany
   */
  export type PurchaseItemsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItems
     */
    select?: PurchaseItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseItemsInclude<ExtArgs> | null
    /**
     * Filter, which PurchaseItems to fetch.
     */
    where?: PurchaseItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PurchaseItems to fetch.
     */
    orderBy?: Enumerable<PurchaseItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PurchaseItems.
     */
    cursor?: PurchaseItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PurchaseItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PurchaseItems.
     */
    skip?: number
    distinct?: Enumerable<PurchaseItemsScalarFieldEnum>
  }


  /**
   * PurchaseItems create
   */
  export type PurchaseItemsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItems
     */
    select?: PurchaseItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a PurchaseItems.
     */
    data: XOR<PurchaseItemsCreateInput, PurchaseItemsUncheckedCreateInput>
  }


  /**
   * PurchaseItems createMany
   */
  export type PurchaseItemsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PurchaseItems.
     */
    data: Enumerable<PurchaseItemsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PurchaseItems update
   */
  export type PurchaseItemsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItems
     */
    select?: PurchaseItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a PurchaseItems.
     */
    data: XOR<PurchaseItemsUpdateInput, PurchaseItemsUncheckedUpdateInput>
    /**
     * Choose, which PurchaseItems to update.
     */
    where: PurchaseItemsWhereUniqueInput
  }


  /**
   * PurchaseItems updateMany
   */
  export type PurchaseItemsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PurchaseItems.
     */
    data: XOR<PurchaseItemsUpdateManyMutationInput, PurchaseItemsUncheckedUpdateManyInput>
    /**
     * Filter which PurchaseItems to update
     */
    where?: PurchaseItemsWhereInput
  }


  /**
   * PurchaseItems upsert
   */
  export type PurchaseItemsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItems
     */
    select?: PurchaseItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the PurchaseItems to update in case it exists.
     */
    where: PurchaseItemsWhereUniqueInput
    /**
     * In case the PurchaseItems found by the `where` argument doesn't exist, create a new PurchaseItems with this data.
     */
    create: XOR<PurchaseItemsCreateInput, PurchaseItemsUncheckedCreateInput>
    /**
     * In case the PurchaseItems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PurchaseItemsUpdateInput, PurchaseItemsUncheckedUpdateInput>
  }


  /**
   * PurchaseItems delete
   */
  export type PurchaseItemsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItems
     */
    select?: PurchaseItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseItemsInclude<ExtArgs> | null
    /**
     * Filter which PurchaseItems to delete.
     */
    where: PurchaseItemsWhereUniqueInput
  }


  /**
   * PurchaseItems deleteMany
   */
  export type PurchaseItemsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PurchaseItems to delete
     */
    where?: PurchaseItemsWhereInput
  }


  /**
   * PurchaseItems without action
   */
  export type PurchaseItemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseItems
     */
    select?: PurchaseItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseItemsInclude<ExtArgs> | null
  }



  /**
   * Model SalesOrder
   */


  export type AggregateSalesOrder = {
    _count: SalesOrderCountAggregateOutputType | null
    _avg: SalesOrderAvgAggregateOutputType | null
    _sum: SalesOrderSumAggregateOutputType | null
    _min: SalesOrderMinAggregateOutputType | null
    _max: SalesOrderMaxAggregateOutputType | null
  }

  export type SalesOrderAvgAggregateOutputType = {
    id: number | null
    customerId: number | null
    userId: number | null
    total: number | null
  }

  export type SalesOrderSumAggregateOutputType = {
    id: number | null
    customerId: number | null
    userId: number | null
    total: number | null
  }

  export type SalesOrderMinAggregateOutputType = {
    id: number | null
    salesOrderNo: string | null
    customerId: number | null
    userId: number | null
    remarks: string | null
    total: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SalesOrderMaxAggregateOutputType = {
    id: number | null
    salesOrderNo: string | null
    customerId: number | null
    userId: number | null
    remarks: string | null
    total: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SalesOrderCountAggregateOutputType = {
    id: number
    salesOrderNo: number
    customerId: number
    userId: number
    remarks: number
    total: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SalesOrderAvgAggregateInputType = {
    id?: true
    customerId?: true
    userId?: true
    total?: true
  }

  export type SalesOrderSumAggregateInputType = {
    id?: true
    customerId?: true
    userId?: true
    total?: true
  }

  export type SalesOrderMinAggregateInputType = {
    id?: true
    salesOrderNo?: true
    customerId?: true
    userId?: true
    remarks?: true
    total?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SalesOrderMaxAggregateInputType = {
    id?: true
    salesOrderNo?: true
    customerId?: true
    userId?: true
    remarks?: true
    total?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SalesOrderCountAggregateInputType = {
    id?: true
    salesOrderNo?: true
    customerId?: true
    userId?: true
    remarks?: true
    total?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SalesOrderAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalesOrder to aggregate.
     */
    where?: SalesOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalesOrders to fetch.
     */
    orderBy?: Enumerable<SalesOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalesOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalesOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalesOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SalesOrders
    **/
    _count?: true | SalesOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalesOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalesOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalesOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalesOrderMaxAggregateInputType
  }

  export type GetSalesOrderAggregateType<T extends SalesOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateSalesOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSalesOrder[P]>
      : GetScalarType<T[P], AggregateSalesOrder[P]>
  }




  export type SalesOrderGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SalesOrderWhereInput
    orderBy?: Enumerable<SalesOrderOrderByWithAggregationInput>
    by: SalesOrderScalarFieldEnum[]
    having?: SalesOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalesOrderCountAggregateInputType | true
    _avg?: SalesOrderAvgAggregateInputType
    _sum?: SalesOrderSumAggregateInputType
    _min?: SalesOrderMinAggregateInputType
    _max?: SalesOrderMaxAggregateInputType
  }


  export type SalesOrderGroupByOutputType = {
    id: number
    salesOrderNo: string | null
    customerId: number
    userId: number | null
    remarks: string | null
    total: number
    createdAt: Date
    updatedAt: Date
    _count: SalesOrderCountAggregateOutputType | null
    _avg: SalesOrderAvgAggregateOutputType | null
    _sum: SalesOrderSumAggregateOutputType | null
    _min: SalesOrderMinAggregateOutputType | null
    _max: SalesOrderMaxAggregateOutputType | null
  }

  type GetSalesOrderGroupByPayload<T extends SalesOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SalesOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalesOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalesOrderGroupByOutputType[P]>
            : GetScalarType<T[P], SalesOrderGroupByOutputType[P]>
        }
      >
    >


  export type SalesOrderSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    salesOrderNo?: boolean
    customerId?: boolean
    userId?: boolean
    remarks?: boolean
    total?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orders?: boolean | SalesOrder$ordersArgs<ExtArgs>
    customerName?: boolean | CustomerArgs<ExtArgs>
    User?: boolean | UserArgs<ExtArgs>
    _count?: boolean | SalesOrderCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["salesOrder"]>

  export type SalesOrderSelectScalar = {
    id?: boolean
    salesOrderNo?: boolean
    customerId?: boolean
    userId?: boolean
    remarks?: boolean
    total?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SalesOrderInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    orders?: boolean | SalesOrder$ordersArgs<ExtArgs>
    customerName?: boolean | CustomerArgs<ExtArgs>
    User?: boolean | UserArgs<ExtArgs>
    _count?: boolean | SalesOrderCountOutputTypeArgs<ExtArgs>
  }


  type SalesOrderGetPayload<S extends boolean | null | undefined | SalesOrderArgs> = $Types.GetResult<SalesOrderPayload, S>

  type SalesOrderCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SalesOrderFindManyArgs, 'select' | 'include'> & {
      select?: SalesOrderCountAggregateInputType | true
    }

  export interface SalesOrderDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SalesOrder'], meta: { name: 'SalesOrder' } }
    /**
     * Find zero or one SalesOrder that matches the filter.
     * @param {SalesOrderFindUniqueArgs} args - Arguments to find a SalesOrder
     * @example
     * // Get one SalesOrder
     * const salesOrder = await prisma.salesOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SalesOrderFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SalesOrderFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SalesOrder'> extends True ? Prisma__SalesOrderClient<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SalesOrderClient<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one SalesOrder that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SalesOrderFindUniqueOrThrowArgs} args - Arguments to find a SalesOrder
     * @example
     * // Get one SalesOrder
     * const salesOrder = await prisma.salesOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SalesOrderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SalesOrderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SalesOrderClient<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first SalesOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesOrderFindFirstArgs} args - Arguments to find a SalesOrder
     * @example
     * // Get one SalesOrder
     * const salesOrder = await prisma.salesOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SalesOrderFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SalesOrderFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SalesOrder'> extends True ? Prisma__SalesOrderClient<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SalesOrderClient<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first SalesOrder that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesOrderFindFirstOrThrowArgs} args - Arguments to find a SalesOrder
     * @example
     * // Get one SalesOrder
     * const salesOrder = await prisma.salesOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SalesOrderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SalesOrderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SalesOrderClient<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more SalesOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesOrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SalesOrders
     * const salesOrders = await prisma.salesOrder.findMany()
     * 
     * // Get first 10 SalesOrders
     * const salesOrders = await prisma.salesOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salesOrderWithIdOnly = await prisma.salesOrder.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SalesOrderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SalesOrderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a SalesOrder.
     * @param {SalesOrderCreateArgs} args - Arguments to create a SalesOrder.
     * @example
     * // Create one SalesOrder
     * const SalesOrder = await prisma.salesOrder.create({
     *   data: {
     *     // ... data to create a SalesOrder
     *   }
     * })
     * 
    **/
    create<T extends SalesOrderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SalesOrderCreateArgs<ExtArgs>>
    ): Prisma__SalesOrderClient<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many SalesOrders.
     *     @param {SalesOrderCreateManyArgs} args - Arguments to create many SalesOrders.
     *     @example
     *     // Create many SalesOrders
     *     const salesOrder = await prisma.salesOrder.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SalesOrderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SalesOrderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SalesOrder.
     * @param {SalesOrderDeleteArgs} args - Arguments to delete one SalesOrder.
     * @example
     * // Delete one SalesOrder
     * const SalesOrder = await prisma.salesOrder.delete({
     *   where: {
     *     // ... filter to delete one SalesOrder
     *   }
     * })
     * 
    **/
    delete<T extends SalesOrderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SalesOrderDeleteArgs<ExtArgs>>
    ): Prisma__SalesOrderClient<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one SalesOrder.
     * @param {SalesOrderUpdateArgs} args - Arguments to update one SalesOrder.
     * @example
     * // Update one SalesOrder
     * const salesOrder = await prisma.salesOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SalesOrderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SalesOrderUpdateArgs<ExtArgs>>
    ): Prisma__SalesOrderClient<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more SalesOrders.
     * @param {SalesOrderDeleteManyArgs} args - Arguments to filter SalesOrders to delete.
     * @example
     * // Delete a few SalesOrders
     * const { count } = await prisma.salesOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SalesOrderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SalesOrderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SalesOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SalesOrders
     * const salesOrder = await prisma.salesOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SalesOrderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SalesOrderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SalesOrder.
     * @param {SalesOrderUpsertArgs} args - Arguments to update or create a SalesOrder.
     * @example
     * // Update or create a SalesOrder
     * const salesOrder = await prisma.salesOrder.upsert({
     *   create: {
     *     // ... data to create a SalesOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SalesOrder we want to update
     *   }
     * })
    **/
    upsert<T extends SalesOrderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SalesOrderUpsertArgs<ExtArgs>>
    ): Prisma__SalesOrderClient<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of SalesOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesOrderCountArgs} args - Arguments to filter SalesOrders to count.
     * @example
     * // Count the number of SalesOrders
     * const count = await prisma.salesOrder.count({
     *   where: {
     *     // ... the filter for the SalesOrders we want to count
     *   }
     * })
    **/
    count<T extends SalesOrderCountArgs>(
      args?: Subset<T, SalesOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalesOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SalesOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalesOrderAggregateArgs>(args: Subset<T, SalesOrderAggregateArgs>): Prisma.PrismaPromise<GetSalesOrderAggregateType<T>>

    /**
     * Group by SalesOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalesOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalesOrderGroupByArgs['orderBy'] }
        : { orderBy?: SalesOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalesOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalesOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SalesOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SalesOrderClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    orders<T extends SalesOrder$ordersArgs<ExtArgs> = {}>(args?: Subset<T, SalesOrder$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    customerName<T extends CustomerArgs<ExtArgs> = {}>(args?: Subset<T, CustomerArgs<ExtArgs>>): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    User<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SalesOrder base type for findUnique actions
   */
  export type SalesOrderFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrder
     */
    select?: SalesOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesOrderInclude<ExtArgs> | null
    /**
     * Filter, which SalesOrder to fetch.
     */
    where: SalesOrderWhereUniqueInput
  }

  /**
   * SalesOrder findUnique
   */
  export interface SalesOrderFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SalesOrderFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SalesOrder findUniqueOrThrow
   */
  export type SalesOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrder
     */
    select?: SalesOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesOrderInclude<ExtArgs> | null
    /**
     * Filter, which SalesOrder to fetch.
     */
    where: SalesOrderWhereUniqueInput
  }


  /**
   * SalesOrder base type for findFirst actions
   */
  export type SalesOrderFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrder
     */
    select?: SalesOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesOrderInclude<ExtArgs> | null
    /**
     * Filter, which SalesOrder to fetch.
     */
    where?: SalesOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalesOrders to fetch.
     */
    orderBy?: Enumerable<SalesOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalesOrders.
     */
    cursor?: SalesOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalesOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalesOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalesOrders.
     */
    distinct?: Enumerable<SalesOrderScalarFieldEnum>
  }

  /**
   * SalesOrder findFirst
   */
  export interface SalesOrderFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SalesOrderFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SalesOrder findFirstOrThrow
   */
  export type SalesOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrder
     */
    select?: SalesOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesOrderInclude<ExtArgs> | null
    /**
     * Filter, which SalesOrder to fetch.
     */
    where?: SalesOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalesOrders to fetch.
     */
    orderBy?: Enumerable<SalesOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalesOrders.
     */
    cursor?: SalesOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalesOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalesOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalesOrders.
     */
    distinct?: Enumerable<SalesOrderScalarFieldEnum>
  }


  /**
   * SalesOrder findMany
   */
  export type SalesOrderFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrder
     */
    select?: SalesOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesOrderInclude<ExtArgs> | null
    /**
     * Filter, which SalesOrders to fetch.
     */
    where?: SalesOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalesOrders to fetch.
     */
    orderBy?: Enumerable<SalesOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SalesOrders.
     */
    cursor?: SalesOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalesOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalesOrders.
     */
    skip?: number
    distinct?: Enumerable<SalesOrderScalarFieldEnum>
  }


  /**
   * SalesOrder create
   */
  export type SalesOrderCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrder
     */
    select?: SalesOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a SalesOrder.
     */
    data: XOR<SalesOrderCreateInput, SalesOrderUncheckedCreateInput>
  }


  /**
   * SalesOrder createMany
   */
  export type SalesOrderCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SalesOrders.
     */
    data: Enumerable<SalesOrderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SalesOrder update
   */
  export type SalesOrderUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrder
     */
    select?: SalesOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a SalesOrder.
     */
    data: XOR<SalesOrderUpdateInput, SalesOrderUncheckedUpdateInput>
    /**
     * Choose, which SalesOrder to update.
     */
    where: SalesOrderWhereUniqueInput
  }


  /**
   * SalesOrder updateMany
   */
  export type SalesOrderUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SalesOrders.
     */
    data: XOR<SalesOrderUpdateManyMutationInput, SalesOrderUncheckedUpdateManyInput>
    /**
     * Filter which SalesOrders to update
     */
    where?: SalesOrderWhereInput
  }


  /**
   * SalesOrder upsert
   */
  export type SalesOrderUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrder
     */
    select?: SalesOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the SalesOrder to update in case it exists.
     */
    where: SalesOrderWhereUniqueInput
    /**
     * In case the SalesOrder found by the `where` argument doesn't exist, create a new SalesOrder with this data.
     */
    create: XOR<SalesOrderCreateInput, SalesOrderUncheckedCreateInput>
    /**
     * In case the SalesOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalesOrderUpdateInput, SalesOrderUncheckedUpdateInput>
  }


  /**
   * SalesOrder delete
   */
  export type SalesOrderDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrder
     */
    select?: SalesOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesOrderInclude<ExtArgs> | null
    /**
     * Filter which SalesOrder to delete.
     */
    where: SalesOrderWhereUniqueInput
  }


  /**
   * SalesOrder deleteMany
   */
  export type SalesOrderDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalesOrders to delete
     */
    where?: SalesOrderWhereInput
  }


  /**
   * SalesOrder.orders
   */
  export type SalesOrder$ordersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesItems
     */
    select?: SalesItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesItemsInclude<ExtArgs> | null
    where?: SalesItemsWhereInput
    orderBy?: Enumerable<SalesItemsOrderByWithRelationInput>
    cursor?: SalesItemsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SalesItemsScalarFieldEnum>
  }


  /**
   * SalesOrder without action
   */
  export type SalesOrderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrder
     */
    select?: SalesOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesOrderInclude<ExtArgs> | null
  }



  /**
   * Model SalesItems
   */


  export type AggregateSalesItems = {
    _count: SalesItemsCountAggregateOutputType | null
    _avg: SalesItemsAvgAggregateOutputType | null
    _sum: SalesItemsSumAggregateOutputType | null
    _min: SalesItemsMinAggregateOutputType | null
    _max: SalesItemsMaxAggregateOutputType | null
  }

  export type SalesItemsAvgAggregateOutputType = {
    id: number | null
    salesOrderId: number | null
    productId: number | null
    quantity: number | null
    sellingPrice: number | null
    total: number | null
  }

  export type SalesItemsSumAggregateOutputType = {
    id: number | null
    salesOrderId: number | null
    productId: number | null
    quantity: number | null
    sellingPrice: number | null
    total: number | null
  }

  export type SalesItemsMinAggregateOutputType = {
    id: number | null
    salesOrderId: number | null
    productId: number | null
    quantity: number | null
    sellingPrice: number | null
    total: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SalesItemsMaxAggregateOutputType = {
    id: number | null
    salesOrderId: number | null
    productId: number | null
    quantity: number | null
    sellingPrice: number | null
    total: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SalesItemsCountAggregateOutputType = {
    id: number
    salesOrderId: number
    productId: number
    quantity: number
    sellingPrice: number
    total: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SalesItemsAvgAggregateInputType = {
    id?: true
    salesOrderId?: true
    productId?: true
    quantity?: true
    sellingPrice?: true
    total?: true
  }

  export type SalesItemsSumAggregateInputType = {
    id?: true
    salesOrderId?: true
    productId?: true
    quantity?: true
    sellingPrice?: true
    total?: true
  }

  export type SalesItemsMinAggregateInputType = {
    id?: true
    salesOrderId?: true
    productId?: true
    quantity?: true
    sellingPrice?: true
    total?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SalesItemsMaxAggregateInputType = {
    id?: true
    salesOrderId?: true
    productId?: true
    quantity?: true
    sellingPrice?: true
    total?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SalesItemsCountAggregateInputType = {
    id?: true
    salesOrderId?: true
    productId?: true
    quantity?: true
    sellingPrice?: true
    total?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SalesItemsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalesItems to aggregate.
     */
    where?: SalesItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalesItems to fetch.
     */
    orderBy?: Enumerable<SalesItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SalesItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalesItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalesItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SalesItems
    **/
    _count?: true | SalesItemsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalesItemsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalesItemsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalesItemsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalesItemsMaxAggregateInputType
  }

  export type GetSalesItemsAggregateType<T extends SalesItemsAggregateArgs> = {
        [P in keyof T & keyof AggregateSalesItems]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSalesItems[P]>
      : GetScalarType<T[P], AggregateSalesItems[P]>
  }




  export type SalesItemsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SalesItemsWhereInput
    orderBy?: Enumerable<SalesItemsOrderByWithAggregationInput>
    by: SalesItemsScalarFieldEnum[]
    having?: SalesItemsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalesItemsCountAggregateInputType | true
    _avg?: SalesItemsAvgAggregateInputType
    _sum?: SalesItemsSumAggregateInputType
    _min?: SalesItemsMinAggregateInputType
    _max?: SalesItemsMaxAggregateInputType
  }


  export type SalesItemsGroupByOutputType = {
    id: number
    salesOrderId: number
    productId: number
    quantity: number
    sellingPrice: number
    total: number
    createdAt: Date
    updatedAt: Date
    _count: SalesItemsCountAggregateOutputType | null
    _avg: SalesItemsAvgAggregateOutputType | null
    _sum: SalesItemsSumAggregateOutputType | null
    _min: SalesItemsMinAggregateOutputType | null
    _max: SalesItemsMaxAggregateOutputType | null
  }

  type GetSalesItemsGroupByPayload<T extends SalesItemsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SalesItemsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalesItemsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalesItemsGroupByOutputType[P]>
            : GetScalarType<T[P], SalesItemsGroupByOutputType[P]>
        }
      >
    >


  export type SalesItemsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    salesOrderId?: boolean
    productId?: boolean
    quantity?: boolean
    sellingPrice?: boolean
    total?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    salesOrder?: boolean | SalesOrderArgs<ExtArgs>
    product?: boolean | ProductArgs<ExtArgs>
  }, ExtArgs["result"]["salesItems"]>

  export type SalesItemsSelectScalar = {
    id?: boolean
    salesOrderId?: boolean
    productId?: boolean
    quantity?: boolean
    sellingPrice?: boolean
    total?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SalesItemsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    salesOrder?: boolean | SalesOrderArgs<ExtArgs>
    product?: boolean | ProductArgs<ExtArgs>
  }


  type SalesItemsGetPayload<S extends boolean | null | undefined | SalesItemsArgs> = $Types.GetResult<SalesItemsPayload, S>

  type SalesItemsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SalesItemsFindManyArgs, 'select' | 'include'> & {
      select?: SalesItemsCountAggregateInputType | true
    }

  export interface SalesItemsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SalesItems'], meta: { name: 'SalesItems' } }
    /**
     * Find zero or one SalesItems that matches the filter.
     * @param {SalesItemsFindUniqueArgs} args - Arguments to find a SalesItems
     * @example
     * // Get one SalesItems
     * const salesItems = await prisma.salesItems.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SalesItemsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SalesItemsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SalesItems'> extends True ? Prisma__SalesItemsClient<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SalesItemsClient<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one SalesItems that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SalesItemsFindUniqueOrThrowArgs} args - Arguments to find a SalesItems
     * @example
     * // Get one SalesItems
     * const salesItems = await prisma.salesItems.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SalesItemsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SalesItemsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SalesItemsClient<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first SalesItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesItemsFindFirstArgs} args - Arguments to find a SalesItems
     * @example
     * // Get one SalesItems
     * const salesItems = await prisma.salesItems.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SalesItemsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SalesItemsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SalesItems'> extends True ? Prisma__SalesItemsClient<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SalesItemsClient<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first SalesItems that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesItemsFindFirstOrThrowArgs} args - Arguments to find a SalesItems
     * @example
     * // Get one SalesItems
     * const salesItems = await prisma.salesItems.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SalesItemsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SalesItemsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SalesItemsClient<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more SalesItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesItemsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SalesItems
     * const salesItems = await prisma.salesItems.findMany()
     * 
     * // Get first 10 SalesItems
     * const salesItems = await prisma.salesItems.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const salesItemsWithIdOnly = await prisma.salesItems.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SalesItemsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SalesItemsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a SalesItems.
     * @param {SalesItemsCreateArgs} args - Arguments to create a SalesItems.
     * @example
     * // Create one SalesItems
     * const SalesItems = await prisma.salesItems.create({
     *   data: {
     *     // ... data to create a SalesItems
     *   }
     * })
     * 
    **/
    create<T extends SalesItemsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SalesItemsCreateArgs<ExtArgs>>
    ): Prisma__SalesItemsClient<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many SalesItems.
     *     @param {SalesItemsCreateManyArgs} args - Arguments to create many SalesItems.
     *     @example
     *     // Create many SalesItems
     *     const salesItems = await prisma.salesItems.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SalesItemsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SalesItemsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SalesItems.
     * @param {SalesItemsDeleteArgs} args - Arguments to delete one SalesItems.
     * @example
     * // Delete one SalesItems
     * const SalesItems = await prisma.salesItems.delete({
     *   where: {
     *     // ... filter to delete one SalesItems
     *   }
     * })
     * 
    **/
    delete<T extends SalesItemsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SalesItemsDeleteArgs<ExtArgs>>
    ): Prisma__SalesItemsClient<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one SalesItems.
     * @param {SalesItemsUpdateArgs} args - Arguments to update one SalesItems.
     * @example
     * // Update one SalesItems
     * const salesItems = await prisma.salesItems.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SalesItemsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SalesItemsUpdateArgs<ExtArgs>>
    ): Prisma__SalesItemsClient<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more SalesItems.
     * @param {SalesItemsDeleteManyArgs} args - Arguments to filter SalesItems to delete.
     * @example
     * // Delete a few SalesItems
     * const { count } = await prisma.salesItems.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SalesItemsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SalesItemsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SalesItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesItemsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SalesItems
     * const salesItems = await prisma.salesItems.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SalesItemsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SalesItemsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SalesItems.
     * @param {SalesItemsUpsertArgs} args - Arguments to update or create a SalesItems.
     * @example
     * // Update or create a SalesItems
     * const salesItems = await prisma.salesItems.upsert({
     *   create: {
     *     // ... data to create a SalesItems
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SalesItems we want to update
     *   }
     * })
    **/
    upsert<T extends SalesItemsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SalesItemsUpsertArgs<ExtArgs>>
    ): Prisma__SalesItemsClient<$Types.GetResult<SalesItemsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of SalesItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesItemsCountArgs} args - Arguments to filter SalesItems to count.
     * @example
     * // Count the number of SalesItems
     * const count = await prisma.salesItems.count({
     *   where: {
     *     // ... the filter for the SalesItems we want to count
     *   }
     * })
    **/
    count<T extends SalesItemsCountArgs>(
      args?: Subset<T, SalesItemsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalesItemsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SalesItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesItemsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalesItemsAggregateArgs>(args: Subset<T, SalesItemsAggregateArgs>): Prisma.PrismaPromise<GetSalesItemsAggregateType<T>>

    /**
     * Group by SalesItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalesItemsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalesItemsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalesItemsGroupByArgs['orderBy'] }
        : { orderBy?: SalesItemsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalesItemsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalesItemsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SalesItems.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SalesItemsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    salesOrder<T extends SalesOrderArgs<ExtArgs> = {}>(args?: Subset<T, SalesOrderArgs<ExtArgs>>): Prisma__SalesOrderClient<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    product<T extends ProductArgs<ExtArgs> = {}>(args?: Subset<T, ProductArgs<ExtArgs>>): Prisma__ProductClient<$Types.GetResult<ProductPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SalesItems base type for findUnique actions
   */
  export type SalesItemsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesItems
     */
    select?: SalesItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesItemsInclude<ExtArgs> | null
    /**
     * Filter, which SalesItems to fetch.
     */
    where: SalesItemsWhereUniqueInput
  }

  /**
   * SalesItems findUnique
   */
  export interface SalesItemsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SalesItemsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SalesItems findUniqueOrThrow
   */
  export type SalesItemsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesItems
     */
    select?: SalesItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesItemsInclude<ExtArgs> | null
    /**
     * Filter, which SalesItems to fetch.
     */
    where: SalesItemsWhereUniqueInput
  }


  /**
   * SalesItems base type for findFirst actions
   */
  export type SalesItemsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesItems
     */
    select?: SalesItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesItemsInclude<ExtArgs> | null
    /**
     * Filter, which SalesItems to fetch.
     */
    where?: SalesItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalesItems to fetch.
     */
    orderBy?: Enumerable<SalesItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalesItems.
     */
    cursor?: SalesItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalesItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalesItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalesItems.
     */
    distinct?: Enumerable<SalesItemsScalarFieldEnum>
  }

  /**
   * SalesItems findFirst
   */
  export interface SalesItemsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SalesItemsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SalesItems findFirstOrThrow
   */
  export type SalesItemsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesItems
     */
    select?: SalesItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesItemsInclude<ExtArgs> | null
    /**
     * Filter, which SalesItems to fetch.
     */
    where?: SalesItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalesItems to fetch.
     */
    orderBy?: Enumerable<SalesItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SalesItems.
     */
    cursor?: SalesItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalesItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalesItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SalesItems.
     */
    distinct?: Enumerable<SalesItemsScalarFieldEnum>
  }


  /**
   * SalesItems findMany
   */
  export type SalesItemsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesItems
     */
    select?: SalesItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesItemsInclude<ExtArgs> | null
    /**
     * Filter, which SalesItems to fetch.
     */
    where?: SalesItemsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SalesItems to fetch.
     */
    orderBy?: Enumerable<SalesItemsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SalesItems.
     */
    cursor?: SalesItemsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SalesItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SalesItems.
     */
    skip?: number
    distinct?: Enumerable<SalesItemsScalarFieldEnum>
  }


  /**
   * SalesItems create
   */
  export type SalesItemsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesItems
     */
    select?: SalesItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesItemsInclude<ExtArgs> | null
    /**
     * The data needed to create a SalesItems.
     */
    data: XOR<SalesItemsCreateInput, SalesItemsUncheckedCreateInput>
  }


  /**
   * SalesItems createMany
   */
  export type SalesItemsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SalesItems.
     */
    data: Enumerable<SalesItemsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SalesItems update
   */
  export type SalesItemsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesItems
     */
    select?: SalesItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesItemsInclude<ExtArgs> | null
    /**
     * The data needed to update a SalesItems.
     */
    data: XOR<SalesItemsUpdateInput, SalesItemsUncheckedUpdateInput>
    /**
     * Choose, which SalesItems to update.
     */
    where: SalesItemsWhereUniqueInput
  }


  /**
   * SalesItems updateMany
   */
  export type SalesItemsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SalesItems.
     */
    data: XOR<SalesItemsUpdateManyMutationInput, SalesItemsUncheckedUpdateManyInput>
    /**
     * Filter which SalesItems to update
     */
    where?: SalesItemsWhereInput
  }


  /**
   * SalesItems upsert
   */
  export type SalesItemsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesItems
     */
    select?: SalesItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesItemsInclude<ExtArgs> | null
    /**
     * The filter to search for the SalesItems to update in case it exists.
     */
    where: SalesItemsWhereUniqueInput
    /**
     * In case the SalesItems found by the `where` argument doesn't exist, create a new SalesItems with this data.
     */
    create: XOR<SalesItemsCreateInput, SalesItemsUncheckedCreateInput>
    /**
     * In case the SalesItems was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SalesItemsUpdateInput, SalesItemsUncheckedUpdateInput>
  }


  /**
   * SalesItems delete
   */
  export type SalesItemsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesItems
     */
    select?: SalesItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesItemsInclude<ExtArgs> | null
    /**
     * Filter which SalesItems to delete.
     */
    where: SalesItemsWhereUniqueInput
  }


  /**
   * SalesItems deleteMany
   */
  export type SalesItemsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SalesItems to delete
     */
    where?: SalesItemsWhereInput
  }


  /**
   * SalesItems without action
   */
  export type SalesItemsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesItems
     */
    select?: SalesItemsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesItemsInclude<ExtArgs> | null
  }



  /**
   * Model Vendor
   */


  export type AggregateVendor = {
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  export type VendorAvgAggregateOutputType = {
    id: number | null
  }

  export type VendorSumAggregateOutputType = {
    id: number | null
  }

  export type VendorMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VendorMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VendorCountAggregateOutputType = {
    id: number
    name: number
    address: number
    phone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VendorAvgAggregateInputType = {
    id?: true
  }

  export type VendorSumAggregateInputType = {
    id?: true
  }

  export type VendorMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VendorMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VendorCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VendorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendor to aggregate.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: Enumerable<VendorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vendors
    **/
    _count?: true | VendorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VendorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VendorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VendorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VendorMaxAggregateInputType
  }

  export type GetVendorAggregateType<T extends VendorAggregateArgs> = {
        [P in keyof T & keyof AggregateVendor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVendor[P]>
      : GetScalarType<T[P], AggregateVendor[P]>
  }




  export type VendorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VendorWhereInput
    orderBy?: Enumerable<VendorOrderByWithAggregationInput>
    by: VendorScalarFieldEnum[]
    having?: VendorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VendorCountAggregateInputType | true
    _avg?: VendorAvgAggregateInputType
    _sum?: VendorSumAggregateInputType
    _min?: VendorMinAggregateInputType
    _max?: VendorMaxAggregateInputType
  }


  export type VendorGroupByOutputType = {
    id: number
    name: string
    address: string | null
    phone: string | null
    createdAt: Date
    updatedAt: Date
    _count: VendorCountAggregateOutputType | null
    _avg: VendorAvgAggregateOutputType | null
    _sum: VendorSumAggregateOutputType | null
    _min: VendorMinAggregateOutputType | null
    _max: VendorMaxAggregateOutputType | null
  }

  type GetVendorGroupByPayload<T extends VendorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VendorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VendorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VendorGroupByOutputType[P]>
            : GetScalarType<T[P], VendorGroupByOutputType[P]>
        }
      >
    >


  export type VendorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    PurchaseOrder?: boolean | Vendor$PurchaseOrderArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["vendor"]>

  export type VendorSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VendorInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    PurchaseOrder?: boolean | Vendor$PurchaseOrderArgs<ExtArgs>
    _count?: boolean | VendorCountOutputTypeArgs<ExtArgs>
  }


  type VendorGetPayload<S extends boolean | null | undefined | VendorArgs> = $Types.GetResult<VendorPayload, S>

  type VendorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VendorFindManyArgs, 'select' | 'include'> & {
      select?: VendorCountAggregateInputType | true
    }

  export interface VendorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vendor'], meta: { name: 'Vendor' } }
    /**
     * Find zero or one Vendor that matches the filter.
     * @param {VendorFindUniqueArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VendorFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VendorFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Vendor'> extends True ? Prisma__VendorClient<$Types.GetResult<VendorPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__VendorClient<$Types.GetResult<VendorPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Vendor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VendorFindUniqueOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VendorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VendorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VendorClient<$Types.GetResult<VendorPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Vendor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VendorFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VendorFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Vendor'> extends True ? Prisma__VendorClient<$Types.GetResult<VendorPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__VendorClient<$Types.GetResult<VendorPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Vendor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindFirstOrThrowArgs} args - Arguments to find a Vendor
     * @example
     * // Get one Vendor
     * const vendor = await prisma.vendor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VendorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VendorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VendorClient<$Types.GetResult<VendorPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Vendors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vendors
     * const vendors = await prisma.vendor.findMany()
     * 
     * // Get first 10 Vendors
     * const vendors = await prisma.vendor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vendorWithIdOnly = await prisma.vendor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VendorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VendorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VendorPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Vendor.
     * @param {VendorCreateArgs} args - Arguments to create a Vendor.
     * @example
     * // Create one Vendor
     * const Vendor = await prisma.vendor.create({
     *   data: {
     *     // ... data to create a Vendor
     *   }
     * })
     * 
    **/
    create<T extends VendorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VendorCreateArgs<ExtArgs>>
    ): Prisma__VendorClient<$Types.GetResult<VendorPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Vendors.
     *     @param {VendorCreateManyArgs} args - Arguments to create many Vendors.
     *     @example
     *     // Create many Vendors
     *     const vendor = await prisma.vendor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VendorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VendorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vendor.
     * @param {VendorDeleteArgs} args - Arguments to delete one Vendor.
     * @example
     * // Delete one Vendor
     * const Vendor = await prisma.vendor.delete({
     *   where: {
     *     // ... filter to delete one Vendor
     *   }
     * })
     * 
    **/
    delete<T extends VendorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VendorDeleteArgs<ExtArgs>>
    ): Prisma__VendorClient<$Types.GetResult<VendorPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Vendor.
     * @param {VendorUpdateArgs} args - Arguments to update one Vendor.
     * @example
     * // Update one Vendor
     * const vendor = await prisma.vendor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VendorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VendorUpdateArgs<ExtArgs>>
    ): Prisma__VendorClient<$Types.GetResult<VendorPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Vendors.
     * @param {VendorDeleteManyArgs} args - Arguments to filter Vendors to delete.
     * @example
     * // Delete a few Vendors
     * const { count } = await prisma.vendor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VendorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VendorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vendors
     * const vendor = await prisma.vendor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VendorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VendorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vendor.
     * @param {VendorUpsertArgs} args - Arguments to update or create a Vendor.
     * @example
     * // Update or create a Vendor
     * const vendor = await prisma.vendor.upsert({
     *   create: {
     *     // ... data to create a Vendor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vendor we want to update
     *   }
     * })
    **/
    upsert<T extends VendorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VendorUpsertArgs<ExtArgs>>
    ): Prisma__VendorClient<$Types.GetResult<VendorPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Vendors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorCountArgs} args - Arguments to filter Vendors to count.
     * @example
     * // Count the number of Vendors
     * const count = await prisma.vendor.count({
     *   where: {
     *     // ... the filter for the Vendors we want to count
     *   }
     * })
    **/
    count<T extends VendorCountArgs>(
      args?: Subset<T, VendorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VendorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VendorAggregateArgs>(args: Subset<T, VendorAggregateArgs>): Prisma.PrismaPromise<GetVendorAggregateType<T>>

    /**
     * Group by Vendor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VendorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VendorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VendorGroupByArgs['orderBy'] }
        : { orderBy?: VendorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VendorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVendorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Vendor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VendorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    PurchaseOrder<T extends Vendor$PurchaseOrderArgs<ExtArgs> = {}>(args?: Subset<T, Vendor$PurchaseOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PurchaseOrderPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Vendor base type for findUnique actions
   */
  export type VendorFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }

  /**
   * Vendor findUnique
   */
  export interface VendorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VendorFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vendor findUniqueOrThrow
   */
  export type VendorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where: VendorWhereUniqueInput
  }


  /**
   * Vendor base type for findFirst actions
   */
  export type VendorFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: Enumerable<VendorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: Enumerable<VendorScalarFieldEnum>
  }

  /**
   * Vendor findFirst
   */
  export interface VendorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VendorFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vendor findFirstOrThrow
   */
  export type VendorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendor to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: Enumerable<VendorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vendors.
     */
    distinct?: Enumerable<VendorScalarFieldEnum>
  }


  /**
   * Vendor findMany
   */
  export type VendorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter, which Vendors to fetch.
     */
    where?: VendorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vendors to fetch.
     */
    orderBy?: Enumerable<VendorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vendors.
     */
    cursor?: VendorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vendors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vendors.
     */
    skip?: number
    distinct?: Enumerable<VendorScalarFieldEnum>
  }


  /**
   * Vendor create
   */
  export type VendorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to create a Vendor.
     */
    data: XOR<VendorCreateInput, VendorUncheckedCreateInput>
  }


  /**
   * Vendor createMany
   */
  export type VendorCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vendors.
     */
    data: Enumerable<VendorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Vendor update
   */
  export type VendorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The data needed to update a Vendor.
     */
    data: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
    /**
     * Choose, which Vendor to update.
     */
    where: VendorWhereUniqueInput
  }


  /**
   * Vendor updateMany
   */
  export type VendorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vendors.
     */
    data: XOR<VendorUpdateManyMutationInput, VendorUncheckedUpdateManyInput>
    /**
     * Filter which Vendors to update
     */
    where?: VendorWhereInput
  }


  /**
   * Vendor upsert
   */
  export type VendorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * The filter to search for the Vendor to update in case it exists.
     */
    where: VendorWhereUniqueInput
    /**
     * In case the Vendor found by the `where` argument doesn't exist, create a new Vendor with this data.
     */
    create: XOR<VendorCreateInput, VendorUncheckedCreateInput>
    /**
     * In case the Vendor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VendorUpdateInput, VendorUncheckedUpdateInput>
  }


  /**
   * Vendor delete
   */
  export type VendorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VendorInclude<ExtArgs> | null
    /**
     * Filter which Vendor to delete.
     */
    where: VendorWhereUniqueInput
  }


  /**
   * Vendor deleteMany
   */
  export type VendorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vendors to delete
     */
    where?: VendorWhereInput
  }


  /**
   * Vendor.PurchaseOrder
   */
  export type Vendor$PurchaseOrderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PurchaseOrder
     */
    select?: PurchaseOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PurchaseOrderInclude<ExtArgs> | null
    where?: PurchaseOrderWhereInput
    orderBy?: Enumerable<PurchaseOrderOrderByWithRelationInput>
    cursor?: PurchaseOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PurchaseOrderScalarFieldEnum>
  }


  /**
   * Vendor without action
   */
  export type VendorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vendor
     */
    select?: VendorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VendorInclude<ExtArgs> | null
  }



  /**
   * Model Customer
   */


  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    name: number
    address: number
    phone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: Enumerable<CustomerOrderByWithAggregationInput>
    by: CustomerScalarFieldEnum[]
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }


  export type CustomerGroupByOutputType = {
    id: number
    name: string
    address: string | null
    phone: string | null
    createdAt: Date
    updatedAt: Date
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    SalesOrder?: boolean | Customer$SalesOrderArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    SalesOrder?: boolean | Customer$SalesOrderArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeArgs<ExtArgs>
  }


  type CustomerGetPayload<S extends boolean | null | undefined | CustomerArgs> = $Types.GetResult<CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<CustomerFindManyArgs, 'select' | 'include'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CustomerFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Customer'> extends True ? Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CustomerFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Customer'> extends True ? Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CustomerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
    **/
    create<T extends CustomerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Customers.
     *     @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     *     @example
     *     // Create many Customers
     *     const customer = await prisma.customer.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CustomerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
    **/
    delete<T extends CustomerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CustomerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CustomerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CustomerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
    **/
    upsert<T extends CustomerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>
    ): Prisma__CustomerClient<$Types.GetResult<CustomerPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    SalesOrder<T extends Customer$SalesOrderArgs<ExtArgs> = {}>(args?: Subset<T, Customer$SalesOrderArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<SalesOrderPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Customer base type for findUnique actions
   */
  export type CustomerFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUnique
   */
  export interface CustomerFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CustomerFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer base type for findFirst actions
   */
  export type CustomerFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }

  /**
   * Customer findFirst
   */
  export interface CustomerFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends CustomerFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: Enumerable<CustomerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: Enumerable<CustomerScalarFieldEnum>
  }


  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }


  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: Enumerable<CustomerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }


  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }


  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }


  /**
   * Customer.SalesOrder
   */
  export type Customer$SalesOrderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SalesOrder
     */
    select?: SalesOrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SalesOrderInclude<ExtArgs> | null
    where?: SalesOrderWhereInput
    orderBy?: Enumerable<SalesOrderOrderByWithRelationInput>
    cursor?: SalesOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SalesOrderScalarFieldEnum>
  }


  /**
   * Customer without action
   */
  export type CustomerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CustomerInclude<ExtArgs> | null
  }



  /**
   * Model UserTokens
   */


  export type AggregateUserTokens = {
    _count: UserTokensCountAggregateOutputType | null
    _avg: UserTokensAvgAggregateOutputType | null
    _sum: UserTokensSumAggregateOutputType | null
    _min: UserTokensMinAggregateOutputType | null
    _max: UserTokensMaxAggregateOutputType | null
  }

  export type UserTokensAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserTokensSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserTokensMinAggregateOutputType = {
    id: number | null
    userId: number | null
    expiry: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTokensMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    expiry: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserTokensCountAggregateOutputType = {
    id: number
    userId: number
    expiry: number
    token: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserTokensAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserTokensSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserTokensMinAggregateInputType = {
    id?: true
    userId?: true
    expiry?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTokensMaxAggregateInputType = {
    id?: true
    userId?: true
    expiry?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserTokensCountAggregateInputType = {
    id?: true
    userId?: true
    expiry?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserTokensAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTokens to aggregate.
     */
    where?: UserTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTokens to fetch.
     */
    orderBy?: Enumerable<UserTokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserTokens
    **/
    _count?: true | UserTokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserTokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserTokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserTokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserTokensMaxAggregateInputType
  }

  export type GetUserTokensAggregateType<T extends UserTokensAggregateArgs> = {
        [P in keyof T & keyof AggregateUserTokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserTokens[P]>
      : GetScalarType<T[P], AggregateUserTokens[P]>
  }




  export type UserTokensGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserTokensWhereInput
    orderBy?: Enumerable<UserTokensOrderByWithAggregationInput>
    by: UserTokensScalarFieldEnum[]
    having?: UserTokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserTokensCountAggregateInputType | true
    _avg?: UserTokensAvgAggregateInputType
    _sum?: UserTokensSumAggregateInputType
    _min?: UserTokensMinAggregateInputType
    _max?: UserTokensMaxAggregateInputType
  }


  export type UserTokensGroupByOutputType = {
    id: number
    userId: number
    expiry: Date
    token: string
    createdAt: Date
    updatedAt: Date
    _count: UserTokensCountAggregateOutputType | null
    _avg: UserTokensAvgAggregateOutputType | null
    _sum: UserTokensSumAggregateOutputType | null
    _min: UserTokensMinAggregateOutputType | null
    _max: UserTokensMaxAggregateOutputType | null
  }

  type GetUserTokensGroupByPayload<T extends UserTokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserTokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserTokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserTokensGroupByOutputType[P]>
            : GetScalarType<T[P], UserTokensGroupByOutputType[P]>
        }
      >
    >


  export type UserTokensSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    expiry?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
  }, ExtArgs["result"]["userTokens"]>

  export type UserTokensSelectScalar = {
    id?: boolean
    userId?: boolean
    expiry?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserTokensInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
  }


  type UserTokensGetPayload<S extends boolean | null | undefined | UserTokensArgs> = $Types.GetResult<UserTokensPayload, S>

  type UserTokensCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserTokensFindManyArgs, 'select' | 'include'> & {
      select?: UserTokensCountAggregateInputType | true
    }

  export interface UserTokensDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserTokens'], meta: { name: 'UserTokens' } }
    /**
     * Find zero or one UserTokens that matches the filter.
     * @param {UserTokensFindUniqueArgs} args - Arguments to find a UserTokens
     * @example
     * // Get one UserTokens
     * const userTokens = await prisma.userTokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserTokensFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserTokensFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserTokens'> extends True ? Prisma__UserTokensClient<$Types.GetResult<UserTokensPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserTokensClient<$Types.GetResult<UserTokensPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one UserTokens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserTokensFindUniqueOrThrowArgs} args - Arguments to find a UserTokens
     * @example
     * // Get one UserTokens
     * const userTokens = await prisma.userTokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserTokensFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTokensFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserTokensClient<$Types.GetResult<UserTokensPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first UserTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokensFindFirstArgs} args - Arguments to find a UserTokens
     * @example
     * // Get one UserTokens
     * const userTokens = await prisma.userTokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserTokensFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserTokensFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserTokens'> extends True ? Prisma__UserTokensClient<$Types.GetResult<UserTokensPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserTokensClient<$Types.GetResult<UserTokensPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first UserTokens that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokensFindFirstOrThrowArgs} args - Arguments to find a UserTokens
     * @example
     * // Get one UserTokens
     * const userTokens = await prisma.userTokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserTokensFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTokensFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserTokensClient<$Types.GetResult<UserTokensPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more UserTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserTokens
     * const userTokens = await prisma.userTokens.findMany()
     * 
     * // Get first 10 UserTokens
     * const userTokens = await prisma.userTokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userTokensWithIdOnly = await prisma.userTokens.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserTokensFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTokensFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserTokensPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a UserTokens.
     * @param {UserTokensCreateArgs} args - Arguments to create a UserTokens.
     * @example
     * // Create one UserTokens
     * const UserTokens = await prisma.userTokens.create({
     *   data: {
     *     // ... data to create a UserTokens
     *   }
     * })
     * 
    **/
    create<T extends UserTokensCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserTokensCreateArgs<ExtArgs>>
    ): Prisma__UserTokensClient<$Types.GetResult<UserTokensPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many UserTokens.
     *     @param {UserTokensCreateManyArgs} args - Arguments to create many UserTokens.
     *     @example
     *     // Create many UserTokens
     *     const userTokens = await prisma.userTokens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserTokensCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTokensCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserTokens.
     * @param {UserTokensDeleteArgs} args - Arguments to delete one UserTokens.
     * @example
     * // Delete one UserTokens
     * const UserTokens = await prisma.userTokens.delete({
     *   where: {
     *     // ... filter to delete one UserTokens
     *   }
     * })
     * 
    **/
    delete<T extends UserTokensDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserTokensDeleteArgs<ExtArgs>>
    ): Prisma__UserTokensClient<$Types.GetResult<UserTokensPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one UserTokens.
     * @param {UserTokensUpdateArgs} args - Arguments to update one UserTokens.
     * @example
     * // Update one UserTokens
     * const userTokens = await prisma.userTokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserTokensUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserTokensUpdateArgs<ExtArgs>>
    ): Prisma__UserTokensClient<$Types.GetResult<UserTokensPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more UserTokens.
     * @param {UserTokensDeleteManyArgs} args - Arguments to filter UserTokens to delete.
     * @example
     * // Delete a few UserTokens
     * const { count } = await prisma.userTokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserTokensDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserTokensDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserTokens
     * const userTokens = await prisma.userTokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserTokensUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserTokensUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserTokens.
     * @param {UserTokensUpsertArgs} args - Arguments to update or create a UserTokens.
     * @example
     * // Update or create a UserTokens
     * const userTokens = await prisma.userTokens.upsert({
     *   create: {
     *     // ... data to create a UserTokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserTokens we want to update
     *   }
     * })
    **/
    upsert<T extends UserTokensUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserTokensUpsertArgs<ExtArgs>>
    ): Prisma__UserTokensClient<$Types.GetResult<UserTokensPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of UserTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokensCountArgs} args - Arguments to filter UserTokens to count.
     * @example
     * // Count the number of UserTokens
     * const count = await prisma.userTokens.count({
     *   where: {
     *     // ... the filter for the UserTokens we want to count
     *   }
     * })
    **/
    count<T extends UserTokensCountArgs>(
      args?: Subset<T, UserTokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserTokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserTokensAggregateArgs>(args: Subset<T, UserTokensAggregateArgs>): Prisma.PrismaPromise<GetUserTokensAggregateType<T>>

    /**
     * Group by UserTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserTokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserTokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserTokensGroupByArgs['orderBy'] }
        : { orderBy?: UserTokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserTokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserTokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserTokensClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserTokens base type for findUnique actions
   */
  export type UserTokensFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTokens
     */
    select?: UserTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTokensInclude<ExtArgs> | null
    /**
     * Filter, which UserTokens to fetch.
     */
    where: UserTokensWhereUniqueInput
  }

  /**
   * UserTokens findUnique
   */
  export interface UserTokensFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserTokensFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserTokens findUniqueOrThrow
   */
  export type UserTokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTokens
     */
    select?: UserTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTokensInclude<ExtArgs> | null
    /**
     * Filter, which UserTokens to fetch.
     */
    where: UserTokensWhereUniqueInput
  }


  /**
   * UserTokens base type for findFirst actions
   */
  export type UserTokensFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTokens
     */
    select?: UserTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTokensInclude<ExtArgs> | null
    /**
     * Filter, which UserTokens to fetch.
     */
    where?: UserTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTokens to fetch.
     */
    orderBy?: Enumerable<UserTokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTokens.
     */
    cursor?: UserTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTokens.
     */
    distinct?: Enumerable<UserTokensScalarFieldEnum>
  }

  /**
   * UserTokens findFirst
   */
  export interface UserTokensFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserTokensFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserTokens findFirstOrThrow
   */
  export type UserTokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTokens
     */
    select?: UserTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTokensInclude<ExtArgs> | null
    /**
     * Filter, which UserTokens to fetch.
     */
    where?: UserTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTokens to fetch.
     */
    orderBy?: Enumerable<UserTokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserTokens.
     */
    cursor?: UserTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserTokens.
     */
    distinct?: Enumerable<UserTokensScalarFieldEnum>
  }


  /**
   * UserTokens findMany
   */
  export type UserTokensFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTokens
     */
    select?: UserTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTokensInclude<ExtArgs> | null
    /**
     * Filter, which UserTokens to fetch.
     */
    where?: UserTokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserTokens to fetch.
     */
    orderBy?: Enumerable<UserTokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserTokens.
     */
    cursor?: UserTokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserTokens.
     */
    skip?: number
    distinct?: Enumerable<UserTokensScalarFieldEnum>
  }


  /**
   * UserTokens create
   */
  export type UserTokensCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTokens
     */
    select?: UserTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTokensInclude<ExtArgs> | null
    /**
     * The data needed to create a UserTokens.
     */
    data: XOR<UserTokensCreateInput, UserTokensUncheckedCreateInput>
  }


  /**
   * UserTokens createMany
   */
  export type UserTokensCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserTokens.
     */
    data: Enumerable<UserTokensCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserTokens update
   */
  export type UserTokensUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTokens
     */
    select?: UserTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTokensInclude<ExtArgs> | null
    /**
     * The data needed to update a UserTokens.
     */
    data: XOR<UserTokensUpdateInput, UserTokensUncheckedUpdateInput>
    /**
     * Choose, which UserTokens to update.
     */
    where: UserTokensWhereUniqueInput
  }


  /**
   * UserTokens updateMany
   */
  export type UserTokensUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserTokens.
     */
    data: XOR<UserTokensUpdateManyMutationInput, UserTokensUncheckedUpdateManyInput>
    /**
     * Filter which UserTokens to update
     */
    where?: UserTokensWhereInput
  }


  /**
   * UserTokens upsert
   */
  export type UserTokensUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTokens
     */
    select?: UserTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTokensInclude<ExtArgs> | null
    /**
     * The filter to search for the UserTokens to update in case it exists.
     */
    where: UserTokensWhereUniqueInput
    /**
     * In case the UserTokens found by the `where` argument doesn't exist, create a new UserTokens with this data.
     */
    create: XOR<UserTokensCreateInput, UserTokensUncheckedCreateInput>
    /**
     * In case the UserTokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserTokensUpdateInput, UserTokensUncheckedUpdateInput>
  }


  /**
   * UserTokens delete
   */
  export type UserTokensDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTokens
     */
    select?: UserTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTokensInclude<ExtArgs> | null
    /**
     * Filter which UserTokens to delete.
     */
    where: UserTokensWhereUniqueInput
  }


  /**
   * UserTokens deleteMany
   */
  export type UserTokensDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserTokens to delete
     */
    where?: UserTokensWhereInput
  }


  /**
   * UserTokens without action
   */
  export type UserTokensArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserTokens
     */
    select?: UserTokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserTokensInclude<ExtArgs> | null
  }



  /**
   * Model Roles
   */


  export type AggregateRoles = {
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  export type RolesAvgAggregateOutputType = {
    id: number | null
  }

  export type RolesSumAggregateOutputType = {
    id: number | null
  }

  export type RolesMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RolesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RolesCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RolesAvgAggregateInputType = {
    id?: true
  }

  export type RolesSumAggregateInputType = {
    id?: true
  }

  export type RolesMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RolesMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RolesCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RolesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to aggregate.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: Enumerable<RolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolesMaxAggregateInputType
  }

  export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoles[P]>
      : GetScalarType<T[P], AggregateRoles[P]>
  }




  export type RolesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RolesWhereInput
    orderBy?: Enumerable<RolesOrderByWithAggregationInput>
    by: RolesScalarFieldEnum[]
    having?: RolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolesCountAggregateInputType | true
    _avg?: RolesAvgAggregateInputType
    _sum?: RolesSumAggregateInputType
    _min?: RolesMinAggregateInputType
    _max?: RolesMaxAggregateInputType
  }


  export type RolesGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  type GetRolesGroupByPayload<T extends RolesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolesGroupByOutputType[P]>
            : GetScalarType<T[P], RolesGroupByOutputType[P]>
        }
      >
    >


  export type RolesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rolePermission?: boolean | Roles$rolePermissionArgs<ExtArgs>
    user?: boolean | Roles$userArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["roles"]>

  export type RolesSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RolesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    rolePermission?: boolean | Roles$rolePermissionArgs<ExtArgs>
    user?: boolean | Roles$userArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeArgs<ExtArgs>
  }


  type RolesGetPayload<S extends boolean | null | undefined | RolesArgs> = $Types.GetResult<RolesPayload, S>

  type RolesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RolesFindManyArgs, 'select' | 'include'> & {
      select?: RolesCountAggregateInputType | true
    }

  export interface RolesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Roles'], meta: { name: 'Roles' } }
    /**
     * Find zero or one Roles that matches the filter.
     * @param {RolesFindUniqueArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RolesFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RolesFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Roles'> extends True ? Prisma__RolesClient<$Types.GetResult<RolesPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__RolesClient<$Types.GetResult<RolesPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Roles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RolesFindUniqueOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RolesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RolesClient<$Types.GetResult<RolesPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindFirstArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RolesFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RolesFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Roles'> extends True ? Prisma__RolesClient<$Types.GetResult<RolesPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__RolesClient<$Types.GetResult<RolesPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Roles that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindFirstOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RolesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RolesClient<$Types.GetResult<RolesPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.roles.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolesWithIdOnly = await prisma.roles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RolesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<RolesPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Roles.
     * @param {RolesCreateArgs} args - Arguments to create a Roles.
     * @example
     * // Create one Roles
     * const Roles = await prisma.roles.create({
     *   data: {
     *     // ... data to create a Roles
     *   }
     * })
     * 
    **/
    create<T extends RolesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RolesCreateArgs<ExtArgs>>
    ): Prisma__RolesClient<$Types.GetResult<RolesPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Roles.
     *     @param {RolesCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const roles = await prisma.roles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RolesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Roles.
     * @param {RolesDeleteArgs} args - Arguments to delete one Roles.
     * @example
     * // Delete one Roles
     * const Roles = await prisma.roles.delete({
     *   where: {
     *     // ... filter to delete one Roles
     *   }
     * })
     * 
    **/
    delete<T extends RolesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RolesDeleteArgs<ExtArgs>>
    ): Prisma__RolesClient<$Types.GetResult<RolesPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Roles.
     * @param {RolesUpdateArgs} args - Arguments to update one Roles.
     * @example
     * // Update one Roles
     * const roles = await prisma.roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RolesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RolesUpdateArgs<ExtArgs>>
    ): Prisma__RolesClient<$Types.GetResult<RolesPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RolesDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RolesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RolesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RolesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RolesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Roles.
     * @param {RolesUpsertArgs} args - Arguments to update or create a Roles.
     * @example
     * // Update or create a Roles
     * const roles = await prisma.roles.upsert({
     *   create: {
     *     // ... data to create a Roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roles we want to update
     *   }
     * })
    **/
    upsert<T extends RolesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RolesUpsertArgs<ExtArgs>>
    ): Prisma__RolesClient<$Types.GetResult<RolesPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.roles.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RolesCountArgs>(
      args?: Subset<T, RolesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolesAggregateArgs>(args: Subset<T, RolesAggregateArgs>): Prisma.PrismaPromise<GetRolesAggregateType<T>>

    /**
     * Group by Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolesGroupByArgs['orderBy'] }
        : { orderBy?: RolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RolesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    rolePermission<T extends Roles$rolePermissionArgs<ExtArgs> = {}>(args?: Subset<T, Roles$rolePermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    user<T extends Roles$userArgs<ExtArgs> = {}>(args?: Subset<T, Roles$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Roles base type for findUnique actions
   */
  export type RolesFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where: RolesWhereUniqueInput
  }

  /**
   * Roles findUnique
   */
  export interface RolesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RolesFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Roles findUniqueOrThrow
   */
  export type RolesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where: RolesWhereUniqueInput
  }


  /**
   * Roles base type for findFirst actions
   */
  export type RolesFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: Enumerable<RolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: Enumerable<RolesScalarFieldEnum>
  }

  /**
   * Roles findFirst
   */
  export interface RolesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RolesFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Roles findFirstOrThrow
   */
  export type RolesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: Enumerable<RolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: Enumerable<RolesScalarFieldEnum>
  }


  /**
   * Roles findMany
   */
  export type RolesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: Enumerable<RolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: Enumerable<RolesScalarFieldEnum>
  }


  /**
   * Roles create
   */
  export type RolesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * The data needed to create a Roles.
     */
    data: XOR<RolesCreateInput, RolesUncheckedCreateInput>
  }


  /**
   * Roles createMany
   */
  export type RolesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: Enumerable<RolesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Roles update
   */
  export type RolesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * The data needed to update a Roles.
     */
    data: XOR<RolesUpdateInput, RolesUncheckedUpdateInput>
    /**
     * Choose, which Roles to update.
     */
    where: RolesWhereUniqueInput
  }


  /**
   * Roles updateMany
   */
  export type RolesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RolesUpdateManyMutationInput, RolesUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RolesWhereInput
  }


  /**
   * Roles upsert
   */
  export type RolesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * The filter to search for the Roles to update in case it exists.
     */
    where: RolesWhereUniqueInput
    /**
     * In case the Roles found by the `where` argument doesn't exist, create a new Roles with this data.
     */
    create: XOR<RolesCreateInput, RolesUncheckedCreateInput>
    /**
     * In case the Roles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolesUpdateInput, RolesUncheckedUpdateInput>
  }


  /**
   * Roles delete
   */
  export type RolesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
    /**
     * Filter which Roles to delete.
     */
    where: RolesWhereUniqueInput
  }


  /**
   * Roles deleteMany
   */
  export type RolesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RolesWhereInput
  }


  /**
   * Roles.rolePermission
   */
  export type Roles$rolePermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolesPermission
     */
    select?: rolesPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rolesPermissionInclude<ExtArgs> | null
    where?: rolesPermissionWhereInput
    orderBy?: Enumerable<rolesPermissionOrderByWithRelationInput>
    cursor?: rolesPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RolesPermissionScalarFieldEnum>
  }


  /**
   * Roles.user
   */
  export type Roles$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userRolePermission
     */
    select?: userRolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userRolePermissionInclude<ExtArgs> | null
    where?: userRolePermissionWhereInput
    orderBy?: Enumerable<userRolePermissionOrderByWithRelationInput>
    cursor?: userRolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserRolePermissionScalarFieldEnum>
  }


  /**
   * Roles without action
   */
  export type RolesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Roles
     */
    select?: RolesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RolesInclude<ExtArgs> | null
  }



  /**
   * Model Permission
   */


  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionAvgAggregateOutputType = {
    id: number | null
  }

  export type PermissionSumAggregateOutputType = {
    id: number | null
  }

  export type PermissionMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    _all: number
  }


  export type PermissionAvgAggregateInputType = {
    id?: true
  }

  export type PermissionSumAggregateInputType = {
    id?: true
  }

  export type PermissionMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: Enumerable<PermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: Enumerable<PermissionOrderByWithAggregationInput>
    by: PermissionScalarFieldEnum[]
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _avg?: PermissionAvgAggregateInputType
    _sum?: PermissionSumAggregateInputType
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }


  export type PermissionGroupByOutputType = {
    id: number
    name: string
    slug: string
    _count: PermissionCountAggregateOutputType | null
    _avg: PermissionAvgAggregateOutputType | null
    _sum: PermissionSumAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    rolePermission?: boolean | Permission$rolePermissionArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
  }

  export type PermissionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    rolePermission?: boolean | Permission$rolePermissionArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeArgs<ExtArgs>
  }


  type PermissionGetPayload<S extends boolean | null | undefined | PermissionArgs> = $Types.GetResult<PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PermissionFindManyArgs, 'select' | 'include'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PermissionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Permission'> extends True ? Prisma__PermissionClient<$Types.GetResult<PermissionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PermissionClient<$Types.GetResult<PermissionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Permission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Types.GetResult<PermissionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PermissionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Permission'> extends True ? Prisma__PermissionClient<$Types.GetResult<PermissionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PermissionClient<$Types.GetResult<PermissionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Permission that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Types.GetResult<PermissionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PermissionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PermissionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
    **/
    create<T extends PermissionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Types.GetResult<PermissionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Permissions.
     *     @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     *     @example
     *     // Create many Permissions
     *     const permission = await prisma.permission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PermissionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
    **/
    delete<T extends PermissionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Types.GetResult<PermissionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PermissionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Types.GetResult<PermissionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PermissionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PermissionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
    **/
    upsert<T extends PermissionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>
    ): Prisma__PermissionClient<$Types.GetResult<PermissionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    rolePermission<T extends Permission$rolePermissionArgs<ExtArgs> = {}>(args?: Subset<T, Permission$rolePermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Permission base type for findUnique actions
   */
  export type PermissionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUnique
   */
  export interface PermissionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PermissionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }


  /**
   * Permission base type for findFirst actions
   */
  export type PermissionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: Enumerable<PermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: Enumerable<PermissionScalarFieldEnum>
  }

  /**
   * Permission findFirst
   */
  export interface PermissionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PermissionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: Enumerable<PermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: Enumerable<PermissionScalarFieldEnum>
  }


  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: Enumerable<PermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: Enumerable<PermissionScalarFieldEnum>
  }


  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }


  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: Enumerable<PermissionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }


  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
  }


  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }


  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }


  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
  }


  /**
   * Permission.rolePermission
   */
  export type Permission$rolePermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolesPermission
     */
    select?: rolesPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rolesPermissionInclude<ExtArgs> | null
    where?: rolesPermissionWhereInput
    orderBy?: Enumerable<rolesPermissionOrderByWithRelationInput>
    cursor?: rolesPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RolesPermissionScalarFieldEnum>
  }


  /**
   * Permission without action
   */
  export type PermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PermissionInclude<ExtArgs> | null
  }



  /**
   * Model rolesPermission
   */


  export type AggregateRolesPermission = {
    _count: RolesPermissionCountAggregateOutputType | null
    _avg: RolesPermissionAvgAggregateOutputType | null
    _sum: RolesPermissionSumAggregateOutputType | null
    _min: RolesPermissionMinAggregateOutputType | null
    _max: RolesPermissionMaxAggregateOutputType | null
  }

  export type RolesPermissionAvgAggregateOutputType = {
    id: number | null
    roleid: number | null
    permissionid: number | null
  }

  export type RolesPermissionSumAggregateOutputType = {
    id: number | null
    roleid: number | null
    permissionid: number | null
  }

  export type RolesPermissionMinAggregateOutputType = {
    id: number | null
    roleid: number | null
    permissionid: number | null
  }

  export type RolesPermissionMaxAggregateOutputType = {
    id: number | null
    roleid: number | null
    permissionid: number | null
  }

  export type RolesPermissionCountAggregateOutputType = {
    id: number
    roleid: number
    permissionid: number
    _all: number
  }


  export type RolesPermissionAvgAggregateInputType = {
    id?: true
    roleid?: true
    permissionid?: true
  }

  export type RolesPermissionSumAggregateInputType = {
    id?: true
    roleid?: true
    permissionid?: true
  }

  export type RolesPermissionMinAggregateInputType = {
    id?: true
    roleid?: true
    permissionid?: true
  }

  export type RolesPermissionMaxAggregateInputType = {
    id?: true
    roleid?: true
    permissionid?: true
  }

  export type RolesPermissionCountAggregateInputType = {
    id?: true
    roleid?: true
    permissionid?: true
    _all?: true
  }

  export type RolesPermissionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which rolesPermission to aggregate.
     */
    where?: rolesPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rolesPermissions to fetch.
     */
    orderBy?: Enumerable<rolesPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: rolesPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rolesPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rolesPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned rolesPermissions
    **/
    _count?: true | RolesPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolesPermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolesPermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolesPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolesPermissionMaxAggregateInputType
  }

  export type GetRolesPermissionAggregateType<T extends RolesPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRolesPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolesPermission[P]>
      : GetScalarType<T[P], AggregateRolesPermission[P]>
  }




  export type RolesPermissionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: rolesPermissionWhereInput
    orderBy?: Enumerable<rolesPermissionOrderByWithAggregationInput>
    by: RolesPermissionScalarFieldEnum[]
    having?: rolesPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolesPermissionCountAggregateInputType | true
    _avg?: RolesPermissionAvgAggregateInputType
    _sum?: RolesPermissionSumAggregateInputType
    _min?: RolesPermissionMinAggregateInputType
    _max?: RolesPermissionMaxAggregateInputType
  }


  export type RolesPermissionGroupByOutputType = {
    id: number
    roleid: number
    permissionid: number
    _count: RolesPermissionCountAggregateOutputType | null
    _avg: RolesPermissionAvgAggregateOutputType | null
    _sum: RolesPermissionSumAggregateOutputType | null
    _min: RolesPermissionMinAggregateOutputType | null
    _max: RolesPermissionMaxAggregateOutputType | null
  }

  type GetRolesPermissionGroupByPayload<T extends RolesPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RolesPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolesPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolesPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RolesPermissionGroupByOutputType[P]>
        }
      >
    >


  export type rolesPermissionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleid?: boolean
    permissionid?: boolean
    role?: boolean | RolesArgs<ExtArgs>
    permission?: boolean | PermissionArgs<ExtArgs>
  }, ExtArgs["result"]["rolesPermission"]>

  export type rolesPermissionSelectScalar = {
    id?: boolean
    roleid?: boolean
    permissionid?: boolean
  }

  export type rolesPermissionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    role?: boolean | RolesArgs<ExtArgs>
    permission?: boolean | PermissionArgs<ExtArgs>
  }


  type rolesPermissionGetPayload<S extends boolean | null | undefined | rolesPermissionArgs> = $Types.GetResult<rolesPermissionPayload, S>

  type rolesPermissionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<rolesPermissionFindManyArgs, 'select' | 'include'> & {
      select?: RolesPermissionCountAggregateInputType | true
    }

  export interface rolesPermissionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['rolesPermission'], meta: { name: 'rolesPermission' } }
    /**
     * Find zero or one RolesPermission that matches the filter.
     * @param {rolesPermissionFindUniqueArgs} args - Arguments to find a RolesPermission
     * @example
     * // Get one RolesPermission
     * const rolesPermission = await prisma.rolesPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends rolesPermissionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, rolesPermissionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'rolesPermission'> extends True ? Prisma__rolesPermissionClient<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__rolesPermissionClient<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one RolesPermission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {rolesPermissionFindUniqueOrThrowArgs} args - Arguments to find a RolesPermission
     * @example
     * // Get one RolesPermission
     * const rolesPermission = await prisma.rolesPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends rolesPermissionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, rolesPermissionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__rolesPermissionClient<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first RolesPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesPermissionFindFirstArgs} args - Arguments to find a RolesPermission
     * @example
     * // Get one RolesPermission
     * const rolesPermission = await prisma.rolesPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends rolesPermissionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, rolesPermissionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'rolesPermission'> extends True ? Prisma__rolesPermissionClient<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__rolesPermissionClient<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first RolesPermission that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesPermissionFindFirstOrThrowArgs} args - Arguments to find a RolesPermission
     * @example
     * // Get one RolesPermission
     * const rolesPermission = await prisma.rolesPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends rolesPermissionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, rolesPermissionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__rolesPermissionClient<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more RolesPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesPermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolesPermissions
     * const rolesPermissions = await prisma.rolesPermission.findMany()
     * 
     * // Get first 10 RolesPermissions
     * const rolesPermissions = await prisma.rolesPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolesPermissionWithIdOnly = await prisma.rolesPermission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends rolesPermissionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, rolesPermissionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a RolesPermission.
     * @param {rolesPermissionCreateArgs} args - Arguments to create a RolesPermission.
     * @example
     * // Create one RolesPermission
     * const RolesPermission = await prisma.rolesPermission.create({
     *   data: {
     *     // ... data to create a RolesPermission
     *   }
     * })
     * 
    **/
    create<T extends rolesPermissionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, rolesPermissionCreateArgs<ExtArgs>>
    ): Prisma__rolesPermissionClient<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many RolesPermissions.
     *     @param {rolesPermissionCreateManyArgs} args - Arguments to create many RolesPermissions.
     *     @example
     *     // Create many RolesPermissions
     *     const rolesPermission = await prisma.rolesPermission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends rolesPermissionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, rolesPermissionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RolesPermission.
     * @param {rolesPermissionDeleteArgs} args - Arguments to delete one RolesPermission.
     * @example
     * // Delete one RolesPermission
     * const RolesPermission = await prisma.rolesPermission.delete({
     *   where: {
     *     // ... filter to delete one RolesPermission
     *   }
     * })
     * 
    **/
    delete<T extends rolesPermissionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, rolesPermissionDeleteArgs<ExtArgs>>
    ): Prisma__rolesPermissionClient<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one RolesPermission.
     * @param {rolesPermissionUpdateArgs} args - Arguments to update one RolesPermission.
     * @example
     * // Update one RolesPermission
     * const rolesPermission = await prisma.rolesPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rolesPermissionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, rolesPermissionUpdateArgs<ExtArgs>>
    ): Prisma__rolesPermissionClient<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more RolesPermissions.
     * @param {rolesPermissionDeleteManyArgs} args - Arguments to filter RolesPermissions to delete.
     * @example
     * // Delete a few RolesPermissions
     * const { count } = await prisma.rolesPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rolesPermissionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, rolesPermissionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolesPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolesPermissions
     * const rolesPermission = await prisma.rolesPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rolesPermissionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, rolesPermissionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RolesPermission.
     * @param {rolesPermissionUpsertArgs} args - Arguments to update or create a RolesPermission.
     * @example
     * // Update or create a RolesPermission
     * const rolesPermission = await prisma.rolesPermission.upsert({
     *   create: {
     *     // ... data to create a RolesPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolesPermission we want to update
     *   }
     * })
    **/
    upsert<T extends rolesPermissionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, rolesPermissionUpsertArgs<ExtArgs>>
    ): Prisma__rolesPermissionClient<$Types.GetResult<rolesPermissionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of RolesPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesPermissionCountArgs} args - Arguments to filter RolesPermissions to count.
     * @example
     * // Count the number of RolesPermissions
     * const count = await prisma.rolesPermission.count({
     *   where: {
     *     // ... the filter for the RolesPermissions we want to count
     *   }
     * })
    **/
    count<T extends rolesPermissionCountArgs>(
      args?: Subset<T, rolesPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolesPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolesPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolesPermissionAggregateArgs>(args: Subset<T, RolesPermissionAggregateArgs>): Prisma.PrismaPromise<GetRolesPermissionAggregateType<T>>

    /**
     * Group by RolesPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolesPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolesPermissionGroupByArgs['orderBy'] }
        : { orderBy?: RolesPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolesPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for rolesPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rolesPermissionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    role<T extends RolesArgs<ExtArgs> = {}>(args?: Subset<T, RolesArgs<ExtArgs>>): Prisma__RolesClient<$Types.GetResult<RolesPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    permission<T extends PermissionArgs<ExtArgs> = {}>(args?: Subset<T, PermissionArgs<ExtArgs>>): Prisma__PermissionClient<$Types.GetResult<PermissionPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * rolesPermission base type for findUnique actions
   */
  export type rolesPermissionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolesPermission
     */
    select?: rolesPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rolesPermissionInclude<ExtArgs> | null
    /**
     * Filter, which rolesPermission to fetch.
     */
    where: rolesPermissionWhereUniqueInput
  }

  /**
   * rolesPermission findUnique
   */
  export interface rolesPermissionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends rolesPermissionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * rolesPermission findUniqueOrThrow
   */
  export type rolesPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolesPermission
     */
    select?: rolesPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rolesPermissionInclude<ExtArgs> | null
    /**
     * Filter, which rolesPermission to fetch.
     */
    where: rolesPermissionWhereUniqueInput
  }


  /**
   * rolesPermission base type for findFirst actions
   */
  export type rolesPermissionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolesPermission
     */
    select?: rolesPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rolesPermissionInclude<ExtArgs> | null
    /**
     * Filter, which rolesPermission to fetch.
     */
    where?: rolesPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rolesPermissions to fetch.
     */
    orderBy?: Enumerable<rolesPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rolesPermissions.
     */
    cursor?: rolesPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rolesPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rolesPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rolesPermissions.
     */
    distinct?: Enumerable<RolesPermissionScalarFieldEnum>
  }

  /**
   * rolesPermission findFirst
   */
  export interface rolesPermissionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends rolesPermissionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * rolesPermission findFirstOrThrow
   */
  export type rolesPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolesPermission
     */
    select?: rolesPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rolesPermissionInclude<ExtArgs> | null
    /**
     * Filter, which rolesPermission to fetch.
     */
    where?: rolesPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rolesPermissions to fetch.
     */
    orderBy?: Enumerable<rolesPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rolesPermissions.
     */
    cursor?: rolesPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rolesPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rolesPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rolesPermissions.
     */
    distinct?: Enumerable<RolesPermissionScalarFieldEnum>
  }


  /**
   * rolesPermission findMany
   */
  export type rolesPermissionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolesPermission
     */
    select?: rolesPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rolesPermissionInclude<ExtArgs> | null
    /**
     * Filter, which rolesPermissions to fetch.
     */
    where?: rolesPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rolesPermissions to fetch.
     */
    orderBy?: Enumerable<rolesPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing rolesPermissions.
     */
    cursor?: rolesPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rolesPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rolesPermissions.
     */
    skip?: number
    distinct?: Enumerable<RolesPermissionScalarFieldEnum>
  }


  /**
   * rolesPermission create
   */
  export type rolesPermissionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolesPermission
     */
    select?: rolesPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rolesPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a rolesPermission.
     */
    data: XOR<rolesPermissionCreateInput, rolesPermissionUncheckedCreateInput>
  }


  /**
   * rolesPermission createMany
   */
  export type rolesPermissionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many rolesPermissions.
     */
    data: Enumerable<rolesPermissionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * rolesPermission update
   */
  export type rolesPermissionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolesPermission
     */
    select?: rolesPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rolesPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a rolesPermission.
     */
    data: XOR<rolesPermissionUpdateInput, rolesPermissionUncheckedUpdateInput>
    /**
     * Choose, which rolesPermission to update.
     */
    where: rolesPermissionWhereUniqueInput
  }


  /**
   * rolesPermission updateMany
   */
  export type rolesPermissionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update rolesPermissions.
     */
    data: XOR<rolesPermissionUpdateManyMutationInput, rolesPermissionUncheckedUpdateManyInput>
    /**
     * Filter which rolesPermissions to update
     */
    where?: rolesPermissionWhereInput
  }


  /**
   * rolesPermission upsert
   */
  export type rolesPermissionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolesPermission
     */
    select?: rolesPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rolesPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the rolesPermission to update in case it exists.
     */
    where: rolesPermissionWhereUniqueInput
    /**
     * In case the rolesPermission found by the `where` argument doesn't exist, create a new rolesPermission with this data.
     */
    create: XOR<rolesPermissionCreateInput, rolesPermissionUncheckedCreateInput>
    /**
     * In case the rolesPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<rolesPermissionUpdateInput, rolesPermissionUncheckedUpdateInput>
  }


  /**
   * rolesPermission delete
   */
  export type rolesPermissionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolesPermission
     */
    select?: rolesPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rolesPermissionInclude<ExtArgs> | null
    /**
     * Filter which rolesPermission to delete.
     */
    where: rolesPermissionWhereUniqueInput
  }


  /**
   * rolesPermission deleteMany
   */
  export type rolesPermissionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which rolesPermissions to delete
     */
    where?: rolesPermissionWhereInput
  }


  /**
   * rolesPermission without action
   */
  export type rolesPermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rolesPermission
     */
    select?: rolesPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: rolesPermissionInclude<ExtArgs> | null
  }



  /**
   * Model userRolePermission
   */


  export type AggregateUserRolePermission = {
    _count: UserRolePermissionCountAggregateOutputType | null
    _avg: UserRolePermissionAvgAggregateOutputType | null
    _sum: UserRolePermissionSumAggregateOutputType | null
    _min: UserRolePermissionMinAggregateOutputType | null
    _max: UserRolePermissionMaxAggregateOutputType | null
  }

  export type UserRolePermissionAvgAggregateOutputType = {
    id: number | null
    userid: number | null
    roleid: number | null
  }

  export type UserRolePermissionSumAggregateOutputType = {
    id: number | null
    userid: number | null
    roleid: number | null
  }

  export type UserRolePermissionMinAggregateOutputType = {
    id: number | null
    userid: number | null
    roleid: number | null
  }

  export type UserRolePermissionMaxAggregateOutputType = {
    id: number | null
    userid: number | null
    roleid: number | null
  }

  export type UserRolePermissionCountAggregateOutputType = {
    id: number
    userid: number
    roleid: number
    _all: number
  }


  export type UserRolePermissionAvgAggregateInputType = {
    id?: true
    userid?: true
    roleid?: true
  }

  export type UserRolePermissionSumAggregateInputType = {
    id?: true
    userid?: true
    roleid?: true
  }

  export type UserRolePermissionMinAggregateInputType = {
    id?: true
    userid?: true
    roleid?: true
  }

  export type UserRolePermissionMaxAggregateInputType = {
    id?: true
    userid?: true
    roleid?: true
  }

  export type UserRolePermissionCountAggregateInputType = {
    id?: true
    userid?: true
    roleid?: true
    _all?: true
  }

  export type UserRolePermissionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which userRolePermission to aggregate.
     */
    where?: userRolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userRolePermissions to fetch.
     */
    orderBy?: Enumerable<userRolePermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userRolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userRolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userRolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userRolePermissions
    **/
    _count?: true | UserRolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRolePermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRolePermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRolePermissionMaxAggregateInputType
  }

  export type GetUserRolePermissionAggregateType<T extends UserRolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRolePermission[P]>
      : GetScalarType<T[P], AggregateUserRolePermission[P]>
  }




  export type UserRolePermissionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userRolePermissionWhereInput
    orderBy?: Enumerable<userRolePermissionOrderByWithAggregationInput>
    by: UserRolePermissionScalarFieldEnum[]
    having?: userRolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRolePermissionCountAggregateInputType | true
    _avg?: UserRolePermissionAvgAggregateInputType
    _sum?: UserRolePermissionSumAggregateInputType
    _min?: UserRolePermissionMinAggregateInputType
    _max?: UserRolePermissionMaxAggregateInputType
  }


  export type UserRolePermissionGroupByOutputType = {
    id: number
    userid: number
    roleid: number
    _count: UserRolePermissionCountAggregateOutputType | null
    _avg: UserRolePermissionAvgAggregateOutputType | null
    _sum: UserRolePermissionSumAggregateOutputType | null
    _min: UserRolePermissionMinAggregateOutputType | null
    _max: UserRolePermissionMaxAggregateOutputType | null
  }

  type GetUserRolePermissionGroupByPayload<T extends UserRolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserRolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserRolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type userRolePermissionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userid?: boolean
    roleid?: boolean
    user?: boolean | UserArgs<ExtArgs>
    role?: boolean | RolesArgs<ExtArgs>
  }, ExtArgs["result"]["userRolePermission"]>

  export type userRolePermissionSelectScalar = {
    id?: boolean
    userid?: boolean
    roleid?: boolean
  }

  export type userRolePermissionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    role?: boolean | RolesArgs<ExtArgs>
  }


  type userRolePermissionGetPayload<S extends boolean | null | undefined | userRolePermissionArgs> = $Types.GetResult<userRolePermissionPayload, S>

  type userRolePermissionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<userRolePermissionFindManyArgs, 'select' | 'include'> & {
      select?: UserRolePermissionCountAggregateInputType | true
    }

  export interface userRolePermissionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userRolePermission'], meta: { name: 'userRolePermission' } }
    /**
     * Find zero or one UserRolePermission that matches the filter.
     * @param {userRolePermissionFindUniqueArgs} args - Arguments to find a UserRolePermission
     * @example
     * // Get one UserRolePermission
     * const userRolePermission = await prisma.userRolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userRolePermissionFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userRolePermissionFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'userRolePermission'> extends True ? Prisma__userRolePermissionClient<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__userRolePermissionClient<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one UserRolePermission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userRolePermissionFindUniqueOrThrowArgs} args - Arguments to find a UserRolePermission
     * @example
     * // Get one UserRolePermission
     * const userRolePermission = await prisma.userRolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userRolePermissionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userRolePermissionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userRolePermissionClient<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first UserRolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRolePermissionFindFirstArgs} args - Arguments to find a UserRolePermission
     * @example
     * // Get one UserRolePermission
     * const userRolePermission = await prisma.userRolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userRolePermissionFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userRolePermissionFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'userRolePermission'> extends True ? Prisma__userRolePermissionClient<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__userRolePermissionClient<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first UserRolePermission that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRolePermissionFindFirstOrThrowArgs} args - Arguments to find a UserRolePermission
     * @example
     * // Get one UserRolePermission
     * const userRolePermission = await prisma.userRolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userRolePermissionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userRolePermissionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userRolePermissionClient<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more UserRolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRolePermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRolePermissions
     * const userRolePermissions = await prisma.userRolePermission.findMany()
     * 
     * // Get first 10 UserRolePermissions
     * const userRolePermissions = await prisma.userRolePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRolePermissionWithIdOnly = await prisma.userRolePermission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userRolePermissionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userRolePermissionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a UserRolePermission.
     * @param {userRolePermissionCreateArgs} args - Arguments to create a UserRolePermission.
     * @example
     * // Create one UserRolePermission
     * const UserRolePermission = await prisma.userRolePermission.create({
     *   data: {
     *     // ... data to create a UserRolePermission
     *   }
     * })
     * 
    **/
    create<T extends userRolePermissionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userRolePermissionCreateArgs<ExtArgs>>
    ): Prisma__userRolePermissionClient<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many UserRolePermissions.
     *     @param {userRolePermissionCreateManyArgs} args - Arguments to create many UserRolePermissions.
     *     @example
     *     // Create many UserRolePermissions
     *     const userRolePermission = await prisma.userRolePermission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userRolePermissionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userRolePermissionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserRolePermission.
     * @param {userRolePermissionDeleteArgs} args - Arguments to delete one UserRolePermission.
     * @example
     * // Delete one UserRolePermission
     * const UserRolePermission = await prisma.userRolePermission.delete({
     *   where: {
     *     // ... filter to delete one UserRolePermission
     *   }
     * })
     * 
    **/
    delete<T extends userRolePermissionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userRolePermissionDeleteArgs<ExtArgs>>
    ): Prisma__userRolePermissionClient<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one UserRolePermission.
     * @param {userRolePermissionUpdateArgs} args - Arguments to update one UserRolePermission.
     * @example
     * // Update one UserRolePermission
     * const userRolePermission = await prisma.userRolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userRolePermissionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userRolePermissionUpdateArgs<ExtArgs>>
    ): Prisma__userRolePermissionClient<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more UserRolePermissions.
     * @param {userRolePermissionDeleteManyArgs} args - Arguments to filter UserRolePermissions to delete.
     * @example
     * // Delete a few UserRolePermissions
     * const { count } = await prisma.userRolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userRolePermissionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userRolePermissionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRolePermissions
     * const userRolePermission = await prisma.userRolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userRolePermissionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userRolePermissionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRolePermission.
     * @param {userRolePermissionUpsertArgs} args - Arguments to update or create a UserRolePermission.
     * @example
     * // Update or create a UserRolePermission
     * const userRolePermission = await prisma.userRolePermission.upsert({
     *   create: {
     *     // ... data to create a UserRolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRolePermission we want to update
     *   }
     * })
    **/
    upsert<T extends userRolePermissionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userRolePermissionUpsertArgs<ExtArgs>>
    ): Prisma__userRolePermissionClient<$Types.GetResult<userRolePermissionPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of UserRolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userRolePermissionCountArgs} args - Arguments to filter UserRolePermissions to count.
     * @example
     * // Count the number of UserRolePermissions
     * const count = await prisma.userRolePermission.count({
     *   where: {
     *     // ... the filter for the UserRolePermissions we want to count
     *   }
     * })
    **/
    count<T extends userRolePermissionCountArgs>(
      args?: Subset<T, userRolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRolePermissionAggregateArgs>(args: Subset<T, UserRolePermissionAggregateArgs>): Prisma.PrismaPromise<GetUserRolePermissionAggregateType<T>>

    /**
     * Group by UserRolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserRolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for userRolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userRolePermissionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    role<T extends RolesArgs<ExtArgs> = {}>(args?: Subset<T, RolesArgs<ExtArgs>>): Prisma__RolesClient<$Types.GetResult<RolesPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * userRolePermission base type for findUnique actions
   */
  export type userRolePermissionFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userRolePermission
     */
    select?: userRolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userRolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which userRolePermission to fetch.
     */
    where: userRolePermissionWhereUniqueInput
  }

  /**
   * userRolePermission findUnique
   */
  export interface userRolePermissionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends userRolePermissionFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * userRolePermission findUniqueOrThrow
   */
  export type userRolePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userRolePermission
     */
    select?: userRolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userRolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which userRolePermission to fetch.
     */
    where: userRolePermissionWhereUniqueInput
  }


  /**
   * userRolePermission base type for findFirst actions
   */
  export type userRolePermissionFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userRolePermission
     */
    select?: userRolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userRolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which userRolePermission to fetch.
     */
    where?: userRolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userRolePermissions to fetch.
     */
    orderBy?: Enumerable<userRolePermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userRolePermissions.
     */
    cursor?: userRolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userRolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userRolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userRolePermissions.
     */
    distinct?: Enumerable<UserRolePermissionScalarFieldEnum>
  }

  /**
   * userRolePermission findFirst
   */
  export interface userRolePermissionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends userRolePermissionFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * userRolePermission findFirstOrThrow
   */
  export type userRolePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userRolePermission
     */
    select?: userRolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userRolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which userRolePermission to fetch.
     */
    where?: userRolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userRolePermissions to fetch.
     */
    orderBy?: Enumerable<userRolePermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userRolePermissions.
     */
    cursor?: userRolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userRolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userRolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userRolePermissions.
     */
    distinct?: Enumerable<UserRolePermissionScalarFieldEnum>
  }


  /**
   * userRolePermission findMany
   */
  export type userRolePermissionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userRolePermission
     */
    select?: userRolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userRolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which userRolePermissions to fetch.
     */
    where?: userRolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userRolePermissions to fetch.
     */
    orderBy?: Enumerable<userRolePermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userRolePermissions.
     */
    cursor?: userRolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userRolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userRolePermissions.
     */
    skip?: number
    distinct?: Enumerable<UserRolePermissionScalarFieldEnum>
  }


  /**
   * userRolePermission create
   */
  export type userRolePermissionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userRolePermission
     */
    select?: userRolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userRolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a userRolePermission.
     */
    data: XOR<userRolePermissionCreateInput, userRolePermissionUncheckedCreateInput>
  }


  /**
   * userRolePermission createMany
   */
  export type userRolePermissionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userRolePermissions.
     */
    data: Enumerable<userRolePermissionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * userRolePermission update
   */
  export type userRolePermissionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userRolePermission
     */
    select?: userRolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userRolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a userRolePermission.
     */
    data: XOR<userRolePermissionUpdateInput, userRolePermissionUncheckedUpdateInput>
    /**
     * Choose, which userRolePermission to update.
     */
    where: userRolePermissionWhereUniqueInput
  }


  /**
   * userRolePermission updateMany
   */
  export type userRolePermissionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userRolePermissions.
     */
    data: XOR<userRolePermissionUpdateManyMutationInput, userRolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which userRolePermissions to update
     */
    where?: userRolePermissionWhereInput
  }


  /**
   * userRolePermission upsert
   */
  export type userRolePermissionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userRolePermission
     */
    select?: userRolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userRolePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the userRolePermission to update in case it exists.
     */
    where: userRolePermissionWhereUniqueInput
    /**
     * In case the userRolePermission found by the `where` argument doesn't exist, create a new userRolePermission with this data.
     */
    create: XOR<userRolePermissionCreateInput, userRolePermissionUncheckedCreateInput>
    /**
     * In case the userRolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userRolePermissionUpdateInput, userRolePermissionUncheckedUpdateInput>
  }


  /**
   * userRolePermission delete
   */
  export type userRolePermissionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userRolePermission
     */
    select?: userRolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userRolePermissionInclude<ExtArgs> | null
    /**
     * Filter which userRolePermission to delete.
     */
    where: userRolePermissionWhereUniqueInput
  }


  /**
   * userRolePermission deleteMany
   */
  export type userRolePermissionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which userRolePermissions to delete
     */
    where?: userRolePermissionWhereInput
  }


  /**
   * userRolePermission without action
   */
  export type userRolePermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userRolePermission
     */
    select?: userRolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userRolePermissionInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const CustomerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    productName: 'productName',
    description: 'description',
    purchasePrice: 'purchasePrice',
    sellingPrice: 'sellingPrice',
    quantity: 'quantity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const PurchaseItemsScalarFieldEnum: {
    id: 'id',
    purchaseOrderId: 'purchaseOrderId',
    productId: 'productId',
    quantity: 'quantity',
    purchasePrice: 'purchasePrice',
    total: 'total',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PurchaseItemsScalarFieldEnum = (typeof PurchaseItemsScalarFieldEnum)[keyof typeof PurchaseItemsScalarFieldEnum]


  export const PurchaseOrderScalarFieldEnum: {
    id: 'id',
    purchaseOrderNo: 'purchaseOrderNo',
    vendorId: 'vendorId',
    remarks: 'remarks',
    total: 'total',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PurchaseOrderScalarFieldEnum = (typeof PurchaseOrderScalarFieldEnum)[keyof typeof PurchaseOrderScalarFieldEnum]


  export const RolesPermissionScalarFieldEnum: {
    id: 'id',
    roleid: 'roleid',
    permissionid: 'permissionid'
  };

  export type RolesPermissionScalarFieldEnum = (typeof RolesPermissionScalarFieldEnum)[keyof typeof RolesPermissionScalarFieldEnum]


  export const RolesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RolesScalarFieldEnum = (typeof RolesScalarFieldEnum)[keyof typeof RolesScalarFieldEnum]


  export const SalesItemsScalarFieldEnum: {
    id: 'id',
    salesOrderId: 'salesOrderId',
    productId: 'productId',
    quantity: 'quantity',
    sellingPrice: 'sellingPrice',
    total: 'total',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SalesItemsScalarFieldEnum = (typeof SalesItemsScalarFieldEnum)[keyof typeof SalesItemsScalarFieldEnum]


  export const SalesOrderScalarFieldEnum: {
    id: 'id',
    salesOrderNo: 'salesOrderNo',
    customerId: 'customerId',
    userId: 'userId',
    remarks: 'remarks',
    total: 'total',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SalesOrderScalarFieldEnum = (typeof SalesOrderScalarFieldEnum)[keyof typeof SalesOrderScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserRolePermissionScalarFieldEnum: {
    id: 'id',
    userid: 'userid',
    roleid: 'roleid'
  };

  export type UserRolePermissionScalarFieldEnum = (typeof UserRolePermissionScalarFieldEnum)[keyof typeof UserRolePermissionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    address: 'address',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserTokensScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    expiry: 'expiry',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserTokensScalarFieldEnum = (typeof UserTokensScalarFieldEnum)[keyof typeof UserTokensScalarFieldEnum]


  export const VendorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VendorScalarFieldEnum = (typeof VendorScalarFieldEnum)[keyof typeof VendorScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    firstName?: StringNullableFilter | string | null
    lastName?: StringNullableFilter | string | null
    address?: StringNullableFilter | string | null
    password?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    PurchaseOrder?: PurchaseOrderListRelationFilter
    SalesOrder?: SalesOrderListRelationFilter
    UserTokens?: UserTokensListRelationFilter
    userRolePermission?: UserRolePermissionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    address?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    PurchaseOrder?: PurchaseOrderOrderByRelationAggregateInput
    SalesOrder?: SalesOrderOrderByRelationAggregateInput
    UserTokens?: UserTokensOrderByRelationAggregateInput
    userRolePermission?: userRolePermissionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    address?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    firstName?: StringNullableWithAggregatesFilter | string | null
    lastName?: StringNullableWithAggregatesFilter | string | null
    address?: StringNullableWithAggregatesFilter | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>
    OR?: Enumerable<ProductWhereInput>
    NOT?: Enumerable<ProductWhereInput>
    id?: IntFilter | number
    productName?: StringFilter | string
    description?: StringNullableFilter | string | null
    purchasePrice?: FloatFilter | number
    sellingPrice?: FloatFilter | number
    quantity?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    purchaseItems?: PurchaseItemsListRelationFilter
    salesItems?: SalesItemsListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    productName?: SortOrder
    description?: SortOrder
    purchasePrice?: SortOrder
    sellingPrice?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    purchaseItems?: PurchaseItemsOrderByRelationAggregateInput
    salesItems?: SalesItemsOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = {
    id?: number
    productName?: string
  }

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    productName?: SortOrder
    description?: SortOrder
    purchasePrice?: SortOrder
    sellingPrice?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    productName?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    purchasePrice?: FloatWithAggregatesFilter | number
    sellingPrice?: FloatWithAggregatesFilter | number
    quantity?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PurchaseOrderWhereInput = {
    AND?: Enumerable<PurchaseOrderWhereInput>
    OR?: Enumerable<PurchaseOrderWhereInput>
    NOT?: Enumerable<PurchaseOrderWhereInput>
    id?: IntFilter | number
    purchaseOrderNo?: StringNullableFilter | string | null
    vendorId?: IntFilter | number
    remarks?: StringNullableFilter | string | null
    total?: FloatFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    orders?: PurchaseItemsListRelationFilter
    vendorName?: XOR<VendorRelationFilter, VendorWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PurchaseOrderOrderByWithRelationInput = {
    id?: SortOrder
    purchaseOrderNo?: SortOrder
    vendorId?: SortOrder
    remarks?: SortOrder
    total?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orders?: PurchaseItemsOrderByRelationAggregateInput
    vendorName?: VendorOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type PurchaseOrderWhereUniqueInput = {
    id?: number
  }

  export type PurchaseOrderOrderByWithAggregationInput = {
    id?: SortOrder
    purchaseOrderNo?: SortOrder
    vendorId?: SortOrder
    remarks?: SortOrder
    total?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PurchaseOrderCountOrderByAggregateInput
    _avg?: PurchaseOrderAvgOrderByAggregateInput
    _max?: PurchaseOrderMaxOrderByAggregateInput
    _min?: PurchaseOrderMinOrderByAggregateInput
    _sum?: PurchaseOrderSumOrderByAggregateInput
  }

  export type PurchaseOrderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PurchaseOrderScalarWhereWithAggregatesInput>
    OR?: Enumerable<PurchaseOrderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PurchaseOrderScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    purchaseOrderNo?: StringNullableWithAggregatesFilter | string | null
    vendorId?: IntWithAggregatesFilter | number
    remarks?: StringNullableWithAggregatesFilter | string | null
    total?: FloatWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PurchaseItemsWhereInput = {
    AND?: Enumerable<PurchaseItemsWhereInput>
    OR?: Enumerable<PurchaseItemsWhereInput>
    NOT?: Enumerable<PurchaseItemsWhereInput>
    id?: IntFilter | number
    purchaseOrderId?: IntFilter | number
    productId?: IntFilter | number
    quantity?: IntFilter | number
    purchasePrice?: FloatFilter | number
    total?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    purchaseOrder?: XOR<PurchaseOrderRelationFilter, PurchaseOrderWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type PurchaseItemsOrderByWithRelationInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    purchasePrice?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    purchaseOrder?: PurchaseOrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type PurchaseItemsWhereUniqueInput = {
    id?: number
  }

  export type PurchaseItemsOrderByWithAggregationInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    purchasePrice?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PurchaseItemsCountOrderByAggregateInput
    _avg?: PurchaseItemsAvgOrderByAggregateInput
    _max?: PurchaseItemsMaxOrderByAggregateInput
    _min?: PurchaseItemsMinOrderByAggregateInput
    _sum?: PurchaseItemsSumOrderByAggregateInput
  }

  export type PurchaseItemsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PurchaseItemsScalarWhereWithAggregatesInput>
    OR?: Enumerable<PurchaseItemsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PurchaseItemsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    purchaseOrderId?: IntWithAggregatesFilter | number
    productId?: IntWithAggregatesFilter | number
    quantity?: IntWithAggregatesFilter | number
    purchasePrice?: FloatWithAggregatesFilter | number
    total?: FloatWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SalesOrderWhereInput = {
    AND?: Enumerable<SalesOrderWhereInput>
    OR?: Enumerable<SalesOrderWhereInput>
    NOT?: Enumerable<SalesOrderWhereInput>
    id?: IntFilter | number
    salesOrderNo?: StringNullableFilter | string | null
    customerId?: IntFilter | number
    userId?: IntNullableFilter | number | null
    remarks?: StringNullableFilter | string | null
    total?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    orders?: SalesItemsListRelationFilter
    customerName?: XOR<CustomerRelationFilter, CustomerWhereInput>
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type SalesOrderOrderByWithRelationInput = {
    id?: SortOrder
    salesOrderNo?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    remarks?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orders?: SalesItemsOrderByRelationAggregateInput
    customerName?: CustomerOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type SalesOrderWhereUniqueInput = {
    id?: number
  }

  export type SalesOrderOrderByWithAggregationInput = {
    id?: SortOrder
    salesOrderNo?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    remarks?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SalesOrderCountOrderByAggregateInput
    _avg?: SalesOrderAvgOrderByAggregateInput
    _max?: SalesOrderMaxOrderByAggregateInput
    _min?: SalesOrderMinOrderByAggregateInput
    _sum?: SalesOrderSumOrderByAggregateInput
  }

  export type SalesOrderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SalesOrderScalarWhereWithAggregatesInput>
    OR?: Enumerable<SalesOrderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SalesOrderScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    salesOrderNo?: StringNullableWithAggregatesFilter | string | null
    customerId?: IntWithAggregatesFilter | number
    userId?: IntNullableWithAggregatesFilter | number | null
    remarks?: StringNullableWithAggregatesFilter | string | null
    total?: FloatWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SalesItemsWhereInput = {
    AND?: Enumerable<SalesItemsWhereInput>
    OR?: Enumerable<SalesItemsWhereInput>
    NOT?: Enumerable<SalesItemsWhereInput>
    id?: IntFilter | number
    salesOrderId?: IntFilter | number
    productId?: IntFilter | number
    quantity?: IntFilter | number
    sellingPrice?: FloatFilter | number
    total?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    salesOrder?: XOR<SalesOrderRelationFilter, SalesOrderWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type SalesItemsOrderByWithRelationInput = {
    id?: SortOrder
    salesOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    sellingPrice?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    salesOrder?: SalesOrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type SalesItemsWhereUniqueInput = {
    id?: number
  }

  export type SalesItemsOrderByWithAggregationInput = {
    id?: SortOrder
    salesOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    sellingPrice?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SalesItemsCountOrderByAggregateInput
    _avg?: SalesItemsAvgOrderByAggregateInput
    _max?: SalesItemsMaxOrderByAggregateInput
    _min?: SalesItemsMinOrderByAggregateInput
    _sum?: SalesItemsSumOrderByAggregateInput
  }

  export type SalesItemsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SalesItemsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SalesItemsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SalesItemsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    salesOrderId?: IntWithAggregatesFilter | number
    productId?: IntWithAggregatesFilter | number
    quantity?: IntWithAggregatesFilter | number
    sellingPrice?: FloatWithAggregatesFilter | number
    total?: FloatWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type VendorWhereInput = {
    AND?: Enumerable<VendorWhereInput>
    OR?: Enumerable<VendorWhereInput>
    NOT?: Enumerable<VendorWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    address?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    PurchaseOrder?: PurchaseOrderListRelationFilter
  }

  export type VendorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    PurchaseOrder?: PurchaseOrderOrderByRelationAggregateInput
  }

  export type VendorWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type VendorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VendorCountOrderByAggregateInput
    _avg?: VendorAvgOrderByAggregateInput
    _max?: VendorMaxOrderByAggregateInput
    _min?: VendorMinOrderByAggregateInput
    _sum?: VendorSumOrderByAggregateInput
  }

  export type VendorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VendorScalarWhereWithAggregatesInput>
    OR?: Enumerable<VendorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VendorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    address?: StringNullableWithAggregatesFilter | string | null
    phone?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CustomerWhereInput = {
    AND?: Enumerable<CustomerWhereInput>
    OR?: Enumerable<CustomerWhereInput>
    NOT?: Enumerable<CustomerWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    address?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    SalesOrder?: SalesOrderListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    SalesOrder?: SalesOrderOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    OR?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CustomerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    address?: StringNullableWithAggregatesFilter | string | null
    phone?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserTokensWhereInput = {
    AND?: Enumerable<UserTokensWhereInput>
    OR?: Enumerable<UserTokensWhereInput>
    NOT?: Enumerable<UserTokensWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    expiry?: DateTimeFilter | Date | string
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserTokensOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    expiry?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserTokensWhereUniqueInput = {
    id?: number
    token?: string
  }

  export type UserTokensOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    expiry?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserTokensCountOrderByAggregateInput
    _avg?: UserTokensAvgOrderByAggregateInput
    _max?: UserTokensMaxOrderByAggregateInput
    _min?: UserTokensMinOrderByAggregateInput
    _sum?: UserTokensSumOrderByAggregateInput
  }

  export type UserTokensScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserTokensScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserTokensScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserTokensScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    expiry?: DateTimeWithAggregatesFilter | Date | string
    token?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type RolesWhereInput = {
    AND?: Enumerable<RolesWhereInput>
    OR?: Enumerable<RolesWhereInput>
    NOT?: Enumerable<RolesWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    rolePermission?: RolesPermissionListRelationFilter
    user?: UserRolePermissionListRelationFilter
  }

  export type RolesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rolePermission?: rolesPermissionOrderByRelationAggregateInput
    user?: userRolePermissionOrderByRelationAggregateInput
  }

  export type RolesWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type RolesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RolesCountOrderByAggregateInput
    _avg?: RolesAvgOrderByAggregateInput
    _max?: RolesMaxOrderByAggregateInput
    _min?: RolesMinOrderByAggregateInput
    _sum?: RolesSumOrderByAggregateInput
  }

  export type RolesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RolesScalarWhereWithAggregatesInput>
    OR?: Enumerable<RolesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RolesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PermissionWhereInput = {
    AND?: Enumerable<PermissionWhereInput>
    OR?: Enumerable<PermissionWhereInput>
    NOT?: Enumerable<PermissionWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    slug?: StringFilter | string
    rolePermission?: RolesPermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    rolePermission?: rolesPermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = {
    id?: number
    slug?: string
  }

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _avg?: PermissionAvgOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
    _sum?: PermissionSumOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PermissionScalarWhereWithAggregatesInput>
    OR?: Enumerable<PermissionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PermissionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    slug?: StringWithAggregatesFilter | string
  }

  export type rolesPermissionWhereInput = {
    AND?: Enumerable<rolesPermissionWhereInput>
    OR?: Enumerable<rolesPermissionWhereInput>
    NOT?: Enumerable<rolesPermissionWhereInput>
    id?: IntFilter | number
    roleid?: IntFilter | number
    permissionid?: IntFilter | number
    role?: XOR<RolesRelationFilter, RolesWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }

  export type rolesPermissionOrderByWithRelationInput = {
    id?: SortOrder
    roleid?: SortOrder
    permissionid?: SortOrder
    role?: RolesOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type rolesPermissionWhereUniqueInput = {
    id?: number
  }

  export type rolesPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    roleid?: SortOrder
    permissionid?: SortOrder
    _count?: rolesPermissionCountOrderByAggregateInput
    _avg?: rolesPermissionAvgOrderByAggregateInput
    _max?: rolesPermissionMaxOrderByAggregateInput
    _min?: rolesPermissionMinOrderByAggregateInput
    _sum?: rolesPermissionSumOrderByAggregateInput
  }

  export type rolesPermissionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<rolesPermissionScalarWhereWithAggregatesInput>
    OR?: Enumerable<rolesPermissionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<rolesPermissionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    roleid?: IntWithAggregatesFilter | number
    permissionid?: IntWithAggregatesFilter | number
  }

  export type userRolePermissionWhereInput = {
    AND?: Enumerable<userRolePermissionWhereInput>
    OR?: Enumerable<userRolePermissionWhereInput>
    NOT?: Enumerable<userRolePermissionWhereInput>
    id?: IntFilter | number
    userid?: IntFilter | number
    roleid?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RolesRelationFilter, RolesWhereInput>
  }

  export type userRolePermissionOrderByWithRelationInput = {
    id?: SortOrder
    userid?: SortOrder
    roleid?: SortOrder
    user?: UserOrderByWithRelationInput
    role?: RolesOrderByWithRelationInput
  }

  export type userRolePermissionWhereUniqueInput = {
    id?: number
  }

  export type userRolePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userid?: SortOrder
    roleid?: SortOrder
    _count?: userRolePermissionCountOrderByAggregateInput
    _avg?: userRolePermissionAvgOrderByAggregateInput
    _max?: userRolePermissionMaxOrderByAggregateInput
    _min?: userRolePermissionMinOrderByAggregateInput
    _sum?: userRolePermissionSumOrderByAggregateInput
  }

  export type userRolePermissionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userRolePermissionScalarWhereWithAggregatesInput>
    OR?: Enumerable<userRolePermissionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userRolePermissionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userid?: IntWithAggregatesFilter | number
    roleid?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    address?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutUserInput
    SalesOrder?: SalesOrderCreateNestedManyWithoutUserInput
    UserTokens?: UserTokensCreateNestedManyWithoutUserInput
    userRolePermission?: userRolePermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    address?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutUserInput
    SalesOrder?: SalesOrderUncheckedCreateNestedManyWithoutUserInput
    UserTokens?: UserTokensUncheckedCreateNestedManyWithoutUserInput
    userRolePermission?: userRolePermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutUserNestedInput
    SalesOrder?: SalesOrderUpdateManyWithoutUserNestedInput
    UserTokens?: UserTokensUpdateManyWithoutUserNestedInput
    userRolePermission?: userRolePermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutUserNestedInput
    SalesOrder?: SalesOrderUncheckedUpdateManyWithoutUserNestedInput
    UserTokens?: UserTokensUncheckedUpdateManyWithoutUserNestedInput
    userRolePermission?: userRolePermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    address?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    productName: string
    description?: string | null
    purchasePrice: number
    sellingPrice: number
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    purchaseItems?: PurchaseItemsCreateNestedManyWithoutProductInput
    salesItems?: SalesItemsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    productName: string
    description?: string | null
    purchasePrice: number
    sellingPrice: number
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    purchaseItems?: PurchaseItemsUncheckedCreateNestedManyWithoutProductInput
    salesItems?: SalesItemsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    productName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseItems?: PurchaseItemsUpdateManyWithoutProductNestedInput
    salesItems?: SalesItemsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseItems?: PurchaseItemsUncheckedUpdateManyWithoutProductNestedInput
    salesItems?: SalesItemsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    productName: string
    description?: string | null
    purchasePrice: number
    sellingPrice: number
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    productName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderCreateInput = {
    purchaseOrderNo?: string | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: PurchaseItemsCreateNestedManyWithoutPurchaseOrderInput
    vendorName: VendorCreateNestedOneWithoutPurchaseOrderInput
    user: UserCreateNestedOneWithoutPurchaseOrderInput
  }

  export type PurchaseOrderUncheckedCreateInput = {
    id?: number
    purchaseOrderNo?: string | null
    vendorId: number
    remarks?: string | null
    total: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: PurchaseItemsUncheckedCreateNestedManyWithoutPurchaseOrderInput
  }

  export type PurchaseOrderUpdateInput = {
    purchaseOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: PurchaseItemsUpdateManyWithoutPurchaseOrderNestedInput
    vendorName?: VendorUpdateOneRequiredWithoutPurchaseOrderNestedInput
    user?: UserUpdateOneRequiredWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: IntFieldUpdateOperationsInput | number
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: PurchaseItemsUncheckedUpdateManyWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderCreateManyInput = {
    id?: number
    purchaseOrderNo?: string | null
    vendorId: number
    remarks?: string | null
    total: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseOrderUpdateManyMutationInput = {
    purchaseOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: IntFieldUpdateOperationsInput | number
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseItemsCreateInput = {
    quantity: number
    purchasePrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    purchaseOrder: PurchaseOrderCreateNestedOneWithoutOrdersInput
    product: ProductCreateNestedOneWithoutPurchaseItemsInput
  }

  export type PurchaseItemsUncheckedCreateInput = {
    id?: number
    purchaseOrderId: number
    productId: number
    quantity: number
    purchasePrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseItemsUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseOrder?: PurchaseOrderUpdateOneRequiredWithoutOrdersNestedInput
    product?: ProductUpdateOneRequiredWithoutPurchaseItemsNestedInput
  }

  export type PurchaseItemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseItemsCreateManyInput = {
    id?: number
    purchaseOrderId: number
    productId: number
    quantity: number
    purchasePrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseItemsUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseItemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesOrderCreateInput = {
    salesOrderNo?: string | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: SalesItemsCreateNestedManyWithoutSalesOrderInput
    customerName: CustomerCreateNestedOneWithoutSalesOrderInput
    User?: UserCreateNestedOneWithoutSalesOrderInput
  }

  export type SalesOrderUncheckedCreateInput = {
    id?: number
    salesOrderNo?: string | null
    customerId: number
    userId?: number | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: SalesItemsUncheckedCreateNestedManyWithoutSalesOrderInput
  }

  export type SalesOrderUpdateInput = {
    salesOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: SalesItemsUpdateManyWithoutSalesOrderNestedInput
    customerName?: CustomerUpdateOneRequiredWithoutSalesOrderNestedInput
    User?: UserUpdateOneWithoutSalesOrderNestedInput
  }

  export type SalesOrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    salesOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: SalesItemsUncheckedUpdateManyWithoutSalesOrderNestedInput
  }

  export type SalesOrderCreateManyInput = {
    id?: number
    salesOrderNo?: string | null
    customerId: number
    userId?: number | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalesOrderUpdateManyMutationInput = {
    salesOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesOrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    salesOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesItemsCreateInput = {
    quantity: number
    sellingPrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    salesOrder: SalesOrderCreateNestedOneWithoutOrdersInput
    product: ProductCreateNestedOneWithoutSalesItemsInput
  }

  export type SalesItemsUncheckedCreateInput = {
    id?: number
    salesOrderId: number
    productId: number
    quantity: number
    sellingPrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalesItemsUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    salesOrder?: SalesOrderUpdateOneRequiredWithoutOrdersNestedInput
    product?: ProductUpdateOneRequiredWithoutSalesItemsNestedInput
  }

  export type SalesItemsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    salesOrderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesItemsCreateManyInput = {
    id?: number
    salesOrderId: number
    productId: number
    quantity: number
    sellingPrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalesItemsUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesItemsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    salesOrderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorCreateInput = {
    name: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutVendorNameInput
  }

  export type VendorUncheckedCreateInput = {
    id?: number
    name: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutVendorNameInput
  }

  export type VendorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutVendorNameNestedInput
  }

  export type VendorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutVendorNameNestedInput
  }

  export type VendorCreateManyInput = {
    id?: number
    name: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VendorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateInput = {
    name: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SalesOrder?: SalesOrderCreateNestedManyWithoutCustomerNameInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: number
    name: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SalesOrder?: SalesOrderUncheckedCreateNestedManyWithoutCustomerNameInput
  }

  export type CustomerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SalesOrder?: SalesOrderUpdateManyWithoutCustomerNameNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SalesOrder?: SalesOrderUncheckedUpdateManyWithoutCustomerNameNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: number
    name: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTokensCreateInput = {
    expiry: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserTokensInput
  }

  export type UserTokensUncheckedCreateInput = {
    id?: number
    userId: number
    expiry: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTokensUpdateInput = {
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserTokensNestedInput
  }

  export type UserTokensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTokensCreateManyInput = {
    id?: number
    userId: number
    expiry: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTokensUpdateManyMutationInput = {
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTokensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolesCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rolePermission?: rolesPermissionCreateNestedManyWithoutRoleInput
    user?: userRolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RolesUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rolePermission?: rolesPermissionUncheckedCreateNestedManyWithoutRoleInput
    user?: userRolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RolesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolePermission?: rolesPermissionUpdateManyWithoutRoleNestedInput
    user?: userRolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RolesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolePermission?: rolesPermissionUncheckedUpdateManyWithoutRoleNestedInput
    user?: userRolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RolesCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RolesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionCreateInput = {
    name: string
    slug: string
    rolePermission?: rolesPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    rolePermission?: rolesPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    rolePermission?: rolesPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    rolePermission?: rolesPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: number
    name: string
    slug: string
  }

  export type PermissionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type rolesPermissionCreateInput = {
    role: RolesCreateNestedOneWithoutRolePermissionInput
    permission: PermissionCreateNestedOneWithoutRolePermissionInput
  }

  export type rolesPermissionUncheckedCreateInput = {
    id?: number
    roleid: number
    permissionid: number
  }

  export type rolesPermissionUpdateInput = {
    role?: RolesUpdateOneRequiredWithoutRolePermissionNestedInput
    permission?: PermissionUpdateOneRequiredWithoutRolePermissionNestedInput
  }

  export type rolesPermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
    permissionid?: IntFieldUpdateOperationsInput | number
  }

  export type rolesPermissionCreateManyInput = {
    id?: number
    roleid: number
    permissionid: number
  }

  export type rolesPermissionUpdateManyMutationInput = {

  }

  export type rolesPermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
    permissionid?: IntFieldUpdateOperationsInput | number
  }

  export type userRolePermissionCreateInput = {
    user: UserCreateNestedOneWithoutUserRolePermissionInput
    role: RolesCreateNestedOneWithoutUserInput
  }

  export type userRolePermissionUncheckedCreateInput = {
    id?: number
    userid: number
    roleid: number
  }

  export type userRolePermissionUpdateInput = {
    user?: UserUpdateOneRequiredWithoutUserRolePermissionNestedInput
    role?: RolesUpdateOneRequiredWithoutUserNestedInput
  }

  export type userRolePermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
  }

  export type userRolePermissionCreateManyInput = {
    id?: number
    userid: number
    roleid: number
  }

  export type userRolePermissionUpdateManyMutationInput = {

  }

  export type userRolePermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type PurchaseOrderListRelationFilter = {
    every?: PurchaseOrderWhereInput
    some?: PurchaseOrderWhereInput
    none?: PurchaseOrderWhereInput
  }

  export type SalesOrderListRelationFilter = {
    every?: SalesOrderWhereInput
    some?: SalesOrderWhereInput
    none?: SalesOrderWhereInput
  }

  export type UserTokensListRelationFilter = {
    every?: UserTokensWhereInput
    some?: UserTokensWhereInput
    none?: UserTokensWhereInput
  }

  export type UserRolePermissionListRelationFilter = {
    every?: userRolePermissionWhereInput
    some?: userRolePermissionWhereInput
    none?: userRolePermissionWhereInput
  }

  export type PurchaseOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SalesOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserTokensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userRolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    address?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    address?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    address?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type PurchaseItemsListRelationFilter = {
    every?: PurchaseItemsWhereInput
    some?: PurchaseItemsWhereInput
    none?: PurchaseItemsWhereInput
  }

  export type SalesItemsListRelationFilter = {
    every?: SalesItemsWhereInput
    some?: SalesItemsWhereInput
    none?: SalesItemsWhereInput
  }

  export type PurchaseItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SalesItemsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    productName?: SortOrder
    description?: SortOrder
    purchasePrice?: SortOrder
    sellingPrice?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    purchasePrice?: SortOrder
    sellingPrice?: SortOrder
    quantity?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    productName?: SortOrder
    description?: SortOrder
    purchasePrice?: SortOrder
    sellingPrice?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    productName?: SortOrder
    description?: SortOrder
    purchasePrice?: SortOrder
    sellingPrice?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    purchasePrice?: SortOrder
    sellingPrice?: SortOrder
    quantity?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type VendorRelationFilter = {
    is?: VendorWhereInput
    isNot?: VendorWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PurchaseOrderCountOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderNo?: SortOrder
    vendorId?: SortOrder
    remarks?: SortOrder
    total?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PurchaseOrderAvgOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    total?: SortOrder
    userId?: SortOrder
  }

  export type PurchaseOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderNo?: SortOrder
    vendorId?: SortOrder
    remarks?: SortOrder
    total?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PurchaseOrderMinOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderNo?: SortOrder
    vendorId?: SortOrder
    remarks?: SortOrder
    total?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PurchaseOrderSumOrderByAggregateInput = {
    id?: SortOrder
    vendorId?: SortOrder
    total?: SortOrder
    userId?: SortOrder
  }

  export type PurchaseOrderRelationFilter = {
    is?: PurchaseOrderWhereInput
    isNot?: PurchaseOrderWhereInput
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type PurchaseItemsCountOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    purchasePrice?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PurchaseItemsAvgOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    purchasePrice?: SortOrder
    total?: SortOrder
  }

  export type PurchaseItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    purchasePrice?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PurchaseItemsMinOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    purchasePrice?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PurchaseItemsSumOrderByAggregateInput = {
    id?: SortOrder
    purchaseOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    purchasePrice?: SortOrder
    total?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type SalesOrderCountOrderByAggregateInput = {
    id?: SortOrder
    salesOrderNo?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    remarks?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SalesOrderAvgOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    total?: SortOrder
  }

  export type SalesOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    salesOrderNo?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    remarks?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SalesOrderMinOrderByAggregateInput = {
    id?: SortOrder
    salesOrderNo?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    remarks?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SalesOrderSumOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    userId?: SortOrder
    total?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type SalesOrderRelationFilter = {
    is?: SalesOrderWhereInput
    isNot?: SalesOrderWhereInput
  }

  export type SalesItemsCountOrderByAggregateInput = {
    id?: SortOrder
    salesOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    sellingPrice?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SalesItemsAvgOrderByAggregateInput = {
    id?: SortOrder
    salesOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    sellingPrice?: SortOrder
    total?: SortOrder
  }

  export type SalesItemsMaxOrderByAggregateInput = {
    id?: SortOrder
    salesOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    sellingPrice?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SalesItemsMinOrderByAggregateInput = {
    id?: SortOrder
    salesOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    sellingPrice?: SortOrder
    total?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SalesItemsSumOrderByAggregateInput = {
    id?: SortOrder
    salesOrderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    sellingPrice?: SortOrder
    total?: SortOrder
  }

  export type VendorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VendorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VendorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VendorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VendorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserTokensCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    expiry?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTokensAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserTokensMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    expiry?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTokensMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    expiry?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserTokensSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type RolesPermissionListRelationFilter = {
    every?: rolesPermissionWhereInput
    some?: rolesPermissionWhereInput
    none?: rolesPermissionWhereInput
  }

  export type rolesPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RolesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RolesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RolesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RolesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RolesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
  }

  export type PermissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
  }

  export type PermissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RolesRelationFilter = {
    is?: RolesWhereInput
    isNot?: RolesWhereInput
  }

  export type PermissionRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type rolesPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    roleid?: SortOrder
    permissionid?: SortOrder
  }

  export type rolesPermissionAvgOrderByAggregateInput = {
    id?: SortOrder
    roleid?: SortOrder
    permissionid?: SortOrder
  }

  export type rolesPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    roleid?: SortOrder
    permissionid?: SortOrder
  }

  export type rolesPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    roleid?: SortOrder
    permissionid?: SortOrder
  }

  export type rolesPermissionSumOrderByAggregateInput = {
    id?: SortOrder
    roleid?: SortOrder
    permissionid?: SortOrder
  }

  export type userRolePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    roleid?: SortOrder
  }

  export type userRolePermissionAvgOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    roleid?: SortOrder
  }

  export type userRolePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    roleid?: SortOrder
  }

  export type userRolePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    roleid?: SortOrder
  }

  export type userRolePermissionSumOrderByAggregateInput = {
    id?: SortOrder
    userid?: SortOrder
    roleid?: SortOrder
  }

  export type PurchaseOrderCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PurchaseOrderCreateWithoutUserInput>, Enumerable<PurchaseOrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PurchaseOrderCreateOrConnectWithoutUserInput>
    createMany?: PurchaseOrderCreateManyUserInputEnvelope
    connect?: Enumerable<PurchaseOrderWhereUniqueInput>
  }

  export type SalesOrderCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SalesOrderCreateWithoutUserInput>, Enumerable<SalesOrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SalesOrderCreateOrConnectWithoutUserInput>
    createMany?: SalesOrderCreateManyUserInputEnvelope
    connect?: Enumerable<SalesOrderWhereUniqueInput>
  }

  export type UserTokensCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserTokensCreateWithoutUserInput>, Enumerable<UserTokensUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserTokensCreateOrConnectWithoutUserInput>
    createMany?: UserTokensCreateManyUserInputEnvelope
    connect?: Enumerable<UserTokensWhereUniqueInput>
  }

  export type userRolePermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<userRolePermissionCreateWithoutUserInput>, Enumerable<userRolePermissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<userRolePermissionCreateOrConnectWithoutUserInput>
    createMany?: userRolePermissionCreateManyUserInputEnvelope
    connect?: Enumerable<userRolePermissionWhereUniqueInput>
  }

  export type PurchaseOrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PurchaseOrderCreateWithoutUserInput>, Enumerable<PurchaseOrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PurchaseOrderCreateOrConnectWithoutUserInput>
    createMany?: PurchaseOrderCreateManyUserInputEnvelope
    connect?: Enumerable<PurchaseOrderWhereUniqueInput>
  }

  export type SalesOrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SalesOrderCreateWithoutUserInput>, Enumerable<SalesOrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SalesOrderCreateOrConnectWithoutUserInput>
    createMany?: SalesOrderCreateManyUserInputEnvelope
    connect?: Enumerable<SalesOrderWhereUniqueInput>
  }

  export type UserTokensUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserTokensCreateWithoutUserInput>, Enumerable<UserTokensUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserTokensCreateOrConnectWithoutUserInput>
    createMany?: UserTokensCreateManyUserInputEnvelope
    connect?: Enumerable<UserTokensWhereUniqueInput>
  }

  export type userRolePermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<userRolePermissionCreateWithoutUserInput>, Enumerable<userRolePermissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<userRolePermissionCreateOrConnectWithoutUserInput>
    createMany?: userRolePermissionCreateManyUserInputEnvelope
    connect?: Enumerable<userRolePermissionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PurchaseOrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PurchaseOrderCreateWithoutUserInput>, Enumerable<PurchaseOrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PurchaseOrderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PurchaseOrderUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PurchaseOrderCreateManyUserInputEnvelope
    set?: Enumerable<PurchaseOrderWhereUniqueInput>
    disconnect?: Enumerable<PurchaseOrderWhereUniqueInput>
    delete?: Enumerable<PurchaseOrderWhereUniqueInput>
    connect?: Enumerable<PurchaseOrderWhereUniqueInput>
    update?: Enumerable<PurchaseOrderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PurchaseOrderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PurchaseOrderScalarWhereInput>
  }

  export type SalesOrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SalesOrderCreateWithoutUserInput>, Enumerable<SalesOrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SalesOrderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SalesOrderUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SalesOrderCreateManyUserInputEnvelope
    set?: Enumerable<SalesOrderWhereUniqueInput>
    disconnect?: Enumerable<SalesOrderWhereUniqueInput>
    delete?: Enumerable<SalesOrderWhereUniqueInput>
    connect?: Enumerable<SalesOrderWhereUniqueInput>
    update?: Enumerable<SalesOrderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SalesOrderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SalesOrderScalarWhereInput>
  }

  export type UserTokensUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserTokensCreateWithoutUserInput>, Enumerable<UserTokensUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserTokensCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserTokensUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserTokensCreateManyUserInputEnvelope
    set?: Enumerable<UserTokensWhereUniqueInput>
    disconnect?: Enumerable<UserTokensWhereUniqueInput>
    delete?: Enumerable<UserTokensWhereUniqueInput>
    connect?: Enumerable<UserTokensWhereUniqueInput>
    update?: Enumerable<UserTokensUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserTokensUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserTokensScalarWhereInput>
  }

  export type userRolePermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<userRolePermissionCreateWithoutUserInput>, Enumerable<userRolePermissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<userRolePermissionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<userRolePermissionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: userRolePermissionCreateManyUserInputEnvelope
    set?: Enumerable<userRolePermissionWhereUniqueInput>
    disconnect?: Enumerable<userRolePermissionWhereUniqueInput>
    delete?: Enumerable<userRolePermissionWhereUniqueInput>
    connect?: Enumerable<userRolePermissionWhereUniqueInput>
    update?: Enumerable<userRolePermissionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<userRolePermissionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<userRolePermissionScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PurchaseOrderCreateWithoutUserInput>, Enumerable<PurchaseOrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PurchaseOrderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PurchaseOrderUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PurchaseOrderCreateManyUserInputEnvelope
    set?: Enumerable<PurchaseOrderWhereUniqueInput>
    disconnect?: Enumerable<PurchaseOrderWhereUniqueInput>
    delete?: Enumerable<PurchaseOrderWhereUniqueInput>
    connect?: Enumerable<PurchaseOrderWhereUniqueInput>
    update?: Enumerable<PurchaseOrderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PurchaseOrderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PurchaseOrderScalarWhereInput>
  }

  export type SalesOrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SalesOrderCreateWithoutUserInput>, Enumerable<SalesOrderUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SalesOrderCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SalesOrderUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SalesOrderCreateManyUserInputEnvelope
    set?: Enumerable<SalesOrderWhereUniqueInput>
    disconnect?: Enumerable<SalesOrderWhereUniqueInput>
    delete?: Enumerable<SalesOrderWhereUniqueInput>
    connect?: Enumerable<SalesOrderWhereUniqueInput>
    update?: Enumerable<SalesOrderUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SalesOrderUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SalesOrderScalarWhereInput>
  }

  export type UserTokensUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserTokensCreateWithoutUserInput>, Enumerable<UserTokensUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserTokensCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserTokensUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserTokensCreateManyUserInputEnvelope
    set?: Enumerable<UserTokensWhereUniqueInput>
    disconnect?: Enumerable<UserTokensWhereUniqueInput>
    delete?: Enumerable<UserTokensWhereUniqueInput>
    connect?: Enumerable<UserTokensWhereUniqueInput>
    update?: Enumerable<UserTokensUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserTokensUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserTokensScalarWhereInput>
  }

  export type userRolePermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<userRolePermissionCreateWithoutUserInput>, Enumerable<userRolePermissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<userRolePermissionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<userRolePermissionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: userRolePermissionCreateManyUserInputEnvelope
    set?: Enumerable<userRolePermissionWhereUniqueInput>
    disconnect?: Enumerable<userRolePermissionWhereUniqueInput>
    delete?: Enumerable<userRolePermissionWhereUniqueInput>
    connect?: Enumerable<userRolePermissionWhereUniqueInput>
    update?: Enumerable<userRolePermissionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<userRolePermissionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<userRolePermissionScalarWhereInput>
  }

  export type PurchaseItemsCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<PurchaseItemsCreateWithoutProductInput>, Enumerable<PurchaseItemsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<PurchaseItemsCreateOrConnectWithoutProductInput>
    createMany?: PurchaseItemsCreateManyProductInputEnvelope
    connect?: Enumerable<PurchaseItemsWhereUniqueInput>
  }

  export type SalesItemsCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<SalesItemsCreateWithoutProductInput>, Enumerable<SalesItemsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<SalesItemsCreateOrConnectWithoutProductInput>
    createMany?: SalesItemsCreateManyProductInputEnvelope
    connect?: Enumerable<SalesItemsWhereUniqueInput>
  }

  export type PurchaseItemsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<PurchaseItemsCreateWithoutProductInput>, Enumerable<PurchaseItemsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<PurchaseItemsCreateOrConnectWithoutProductInput>
    createMany?: PurchaseItemsCreateManyProductInputEnvelope
    connect?: Enumerable<PurchaseItemsWhereUniqueInput>
  }

  export type SalesItemsUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<Enumerable<SalesItemsCreateWithoutProductInput>, Enumerable<SalesItemsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<SalesItemsCreateOrConnectWithoutProductInput>
    createMany?: SalesItemsCreateManyProductInputEnvelope
    connect?: Enumerable<SalesItemsWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PurchaseItemsUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<PurchaseItemsCreateWithoutProductInput>, Enumerable<PurchaseItemsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<PurchaseItemsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<PurchaseItemsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: PurchaseItemsCreateManyProductInputEnvelope
    set?: Enumerable<PurchaseItemsWhereUniqueInput>
    disconnect?: Enumerable<PurchaseItemsWhereUniqueInput>
    delete?: Enumerable<PurchaseItemsWhereUniqueInput>
    connect?: Enumerable<PurchaseItemsWhereUniqueInput>
    update?: Enumerable<PurchaseItemsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<PurchaseItemsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<PurchaseItemsScalarWhereInput>
  }

  export type SalesItemsUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<SalesItemsCreateWithoutProductInput>, Enumerable<SalesItemsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<SalesItemsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<SalesItemsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: SalesItemsCreateManyProductInputEnvelope
    set?: Enumerable<SalesItemsWhereUniqueInput>
    disconnect?: Enumerable<SalesItemsWhereUniqueInput>
    delete?: Enumerable<SalesItemsWhereUniqueInput>
    connect?: Enumerable<SalesItemsWhereUniqueInput>
    update?: Enumerable<SalesItemsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<SalesItemsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<SalesItemsScalarWhereInput>
  }

  export type PurchaseItemsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<PurchaseItemsCreateWithoutProductInput>, Enumerable<PurchaseItemsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<PurchaseItemsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<PurchaseItemsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: PurchaseItemsCreateManyProductInputEnvelope
    set?: Enumerable<PurchaseItemsWhereUniqueInput>
    disconnect?: Enumerable<PurchaseItemsWhereUniqueInput>
    delete?: Enumerable<PurchaseItemsWhereUniqueInput>
    connect?: Enumerable<PurchaseItemsWhereUniqueInput>
    update?: Enumerable<PurchaseItemsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<PurchaseItemsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<PurchaseItemsScalarWhereInput>
  }

  export type SalesItemsUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<Enumerable<SalesItemsCreateWithoutProductInput>, Enumerable<SalesItemsUncheckedCreateWithoutProductInput>>
    connectOrCreate?: Enumerable<SalesItemsCreateOrConnectWithoutProductInput>
    upsert?: Enumerable<SalesItemsUpsertWithWhereUniqueWithoutProductInput>
    createMany?: SalesItemsCreateManyProductInputEnvelope
    set?: Enumerable<SalesItemsWhereUniqueInput>
    disconnect?: Enumerable<SalesItemsWhereUniqueInput>
    delete?: Enumerable<SalesItemsWhereUniqueInput>
    connect?: Enumerable<SalesItemsWhereUniqueInput>
    update?: Enumerable<SalesItemsUpdateWithWhereUniqueWithoutProductInput>
    updateMany?: Enumerable<SalesItemsUpdateManyWithWhereWithoutProductInput>
    deleteMany?: Enumerable<SalesItemsScalarWhereInput>
  }

  export type PurchaseItemsCreateNestedManyWithoutPurchaseOrderInput = {
    create?: XOR<Enumerable<PurchaseItemsCreateWithoutPurchaseOrderInput>, Enumerable<PurchaseItemsUncheckedCreateWithoutPurchaseOrderInput>>
    connectOrCreate?: Enumerable<PurchaseItemsCreateOrConnectWithoutPurchaseOrderInput>
    createMany?: PurchaseItemsCreateManyPurchaseOrderInputEnvelope
    connect?: Enumerable<PurchaseItemsWhereUniqueInput>
  }

  export type VendorCreateNestedOneWithoutPurchaseOrderInput = {
    create?: XOR<VendorCreateWithoutPurchaseOrderInput, VendorUncheckedCreateWithoutPurchaseOrderInput>
    connectOrCreate?: VendorCreateOrConnectWithoutPurchaseOrderInput
    connect?: VendorWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPurchaseOrderInput = {
    create?: XOR<UserCreateWithoutPurchaseOrderInput, UserUncheckedCreateWithoutPurchaseOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchaseOrderInput
    connect?: UserWhereUniqueInput
  }

  export type PurchaseItemsUncheckedCreateNestedManyWithoutPurchaseOrderInput = {
    create?: XOR<Enumerable<PurchaseItemsCreateWithoutPurchaseOrderInput>, Enumerable<PurchaseItemsUncheckedCreateWithoutPurchaseOrderInput>>
    connectOrCreate?: Enumerable<PurchaseItemsCreateOrConnectWithoutPurchaseOrderInput>
    createMany?: PurchaseItemsCreateManyPurchaseOrderInputEnvelope
    connect?: Enumerable<PurchaseItemsWhereUniqueInput>
  }

  export type PurchaseItemsUpdateManyWithoutPurchaseOrderNestedInput = {
    create?: XOR<Enumerable<PurchaseItemsCreateWithoutPurchaseOrderInput>, Enumerable<PurchaseItemsUncheckedCreateWithoutPurchaseOrderInput>>
    connectOrCreate?: Enumerable<PurchaseItemsCreateOrConnectWithoutPurchaseOrderInput>
    upsert?: Enumerable<PurchaseItemsUpsertWithWhereUniqueWithoutPurchaseOrderInput>
    createMany?: PurchaseItemsCreateManyPurchaseOrderInputEnvelope
    set?: Enumerable<PurchaseItemsWhereUniqueInput>
    disconnect?: Enumerable<PurchaseItemsWhereUniqueInput>
    delete?: Enumerable<PurchaseItemsWhereUniqueInput>
    connect?: Enumerable<PurchaseItemsWhereUniqueInput>
    update?: Enumerable<PurchaseItemsUpdateWithWhereUniqueWithoutPurchaseOrderInput>
    updateMany?: Enumerable<PurchaseItemsUpdateManyWithWhereWithoutPurchaseOrderInput>
    deleteMany?: Enumerable<PurchaseItemsScalarWhereInput>
  }

  export type VendorUpdateOneRequiredWithoutPurchaseOrderNestedInput = {
    create?: XOR<VendorCreateWithoutPurchaseOrderInput, VendorUncheckedCreateWithoutPurchaseOrderInput>
    connectOrCreate?: VendorCreateOrConnectWithoutPurchaseOrderInput
    upsert?: VendorUpsertWithoutPurchaseOrderInput
    connect?: VendorWhereUniqueInput
    update?: XOR<VendorUpdateWithoutPurchaseOrderInput, VendorUncheckedUpdateWithoutPurchaseOrderInput>
  }

  export type UserUpdateOneRequiredWithoutPurchaseOrderNestedInput = {
    create?: XOR<UserCreateWithoutPurchaseOrderInput, UserUncheckedCreateWithoutPurchaseOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutPurchaseOrderInput
    upsert?: UserUpsertWithoutPurchaseOrderInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPurchaseOrderInput, UserUncheckedUpdateWithoutPurchaseOrderInput>
  }

  export type PurchaseItemsUncheckedUpdateManyWithoutPurchaseOrderNestedInput = {
    create?: XOR<Enumerable<PurchaseItemsCreateWithoutPurchaseOrderInput>, Enumerable<PurchaseItemsUncheckedCreateWithoutPurchaseOrderInput>>
    connectOrCreate?: Enumerable<PurchaseItemsCreateOrConnectWithoutPurchaseOrderInput>
    upsert?: Enumerable<PurchaseItemsUpsertWithWhereUniqueWithoutPurchaseOrderInput>
    createMany?: PurchaseItemsCreateManyPurchaseOrderInputEnvelope
    set?: Enumerable<PurchaseItemsWhereUniqueInput>
    disconnect?: Enumerable<PurchaseItemsWhereUniqueInput>
    delete?: Enumerable<PurchaseItemsWhereUniqueInput>
    connect?: Enumerable<PurchaseItemsWhereUniqueInput>
    update?: Enumerable<PurchaseItemsUpdateWithWhereUniqueWithoutPurchaseOrderInput>
    updateMany?: Enumerable<PurchaseItemsUpdateManyWithWhereWithoutPurchaseOrderInput>
    deleteMany?: Enumerable<PurchaseItemsScalarWhereInput>
  }

  export type PurchaseOrderCreateNestedOneWithoutOrdersInput = {
    create?: XOR<PurchaseOrderCreateWithoutOrdersInput, PurchaseOrderUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutOrdersInput
    connect?: PurchaseOrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutPurchaseItemsInput = {
    create?: XOR<ProductCreateWithoutPurchaseItemsInput, ProductUncheckedCreateWithoutPurchaseItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPurchaseItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type PurchaseOrderUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<PurchaseOrderCreateWithoutOrdersInput, PurchaseOrderUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: PurchaseOrderCreateOrConnectWithoutOrdersInput
    upsert?: PurchaseOrderUpsertWithoutOrdersInput
    connect?: PurchaseOrderWhereUniqueInput
    update?: XOR<PurchaseOrderUpdateWithoutOrdersInput, PurchaseOrderUncheckedUpdateWithoutOrdersInput>
  }

  export type ProductUpdateOneRequiredWithoutPurchaseItemsNestedInput = {
    create?: XOR<ProductCreateWithoutPurchaseItemsInput, ProductUncheckedCreateWithoutPurchaseItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutPurchaseItemsInput
    upsert?: ProductUpsertWithoutPurchaseItemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutPurchaseItemsInput, ProductUncheckedUpdateWithoutPurchaseItemsInput>
  }

  export type SalesItemsCreateNestedManyWithoutSalesOrderInput = {
    create?: XOR<Enumerable<SalesItemsCreateWithoutSalesOrderInput>, Enumerable<SalesItemsUncheckedCreateWithoutSalesOrderInput>>
    connectOrCreate?: Enumerable<SalesItemsCreateOrConnectWithoutSalesOrderInput>
    createMany?: SalesItemsCreateManySalesOrderInputEnvelope
    connect?: Enumerable<SalesItemsWhereUniqueInput>
  }

  export type CustomerCreateNestedOneWithoutSalesOrderInput = {
    create?: XOR<CustomerCreateWithoutSalesOrderInput, CustomerUncheckedCreateWithoutSalesOrderInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSalesOrderInput
    connect?: CustomerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSalesOrderInput = {
    create?: XOR<UserCreateWithoutSalesOrderInput, UserUncheckedCreateWithoutSalesOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutSalesOrderInput
    connect?: UserWhereUniqueInput
  }

  export type SalesItemsUncheckedCreateNestedManyWithoutSalesOrderInput = {
    create?: XOR<Enumerable<SalesItemsCreateWithoutSalesOrderInput>, Enumerable<SalesItemsUncheckedCreateWithoutSalesOrderInput>>
    connectOrCreate?: Enumerable<SalesItemsCreateOrConnectWithoutSalesOrderInput>
    createMany?: SalesItemsCreateManySalesOrderInputEnvelope
    connect?: Enumerable<SalesItemsWhereUniqueInput>
  }

  export type SalesItemsUpdateManyWithoutSalesOrderNestedInput = {
    create?: XOR<Enumerable<SalesItemsCreateWithoutSalesOrderInput>, Enumerable<SalesItemsUncheckedCreateWithoutSalesOrderInput>>
    connectOrCreate?: Enumerable<SalesItemsCreateOrConnectWithoutSalesOrderInput>
    upsert?: Enumerable<SalesItemsUpsertWithWhereUniqueWithoutSalesOrderInput>
    createMany?: SalesItemsCreateManySalesOrderInputEnvelope
    set?: Enumerable<SalesItemsWhereUniqueInput>
    disconnect?: Enumerable<SalesItemsWhereUniqueInput>
    delete?: Enumerable<SalesItemsWhereUniqueInput>
    connect?: Enumerable<SalesItemsWhereUniqueInput>
    update?: Enumerable<SalesItemsUpdateWithWhereUniqueWithoutSalesOrderInput>
    updateMany?: Enumerable<SalesItemsUpdateManyWithWhereWithoutSalesOrderInput>
    deleteMany?: Enumerable<SalesItemsScalarWhereInput>
  }

  export type CustomerUpdateOneRequiredWithoutSalesOrderNestedInput = {
    create?: XOR<CustomerCreateWithoutSalesOrderInput, CustomerUncheckedCreateWithoutSalesOrderInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSalesOrderInput
    upsert?: CustomerUpsertWithoutSalesOrderInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<CustomerUpdateWithoutSalesOrderInput, CustomerUncheckedUpdateWithoutSalesOrderInput>
  }

  export type UserUpdateOneWithoutSalesOrderNestedInput = {
    create?: XOR<UserCreateWithoutSalesOrderInput, UserUncheckedCreateWithoutSalesOrderInput>
    connectOrCreate?: UserCreateOrConnectWithoutSalesOrderInput
    upsert?: UserUpsertWithoutSalesOrderInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSalesOrderInput, UserUncheckedUpdateWithoutSalesOrderInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SalesItemsUncheckedUpdateManyWithoutSalesOrderNestedInput = {
    create?: XOR<Enumerable<SalesItemsCreateWithoutSalesOrderInput>, Enumerable<SalesItemsUncheckedCreateWithoutSalesOrderInput>>
    connectOrCreate?: Enumerable<SalesItemsCreateOrConnectWithoutSalesOrderInput>
    upsert?: Enumerable<SalesItemsUpsertWithWhereUniqueWithoutSalesOrderInput>
    createMany?: SalesItemsCreateManySalesOrderInputEnvelope
    set?: Enumerable<SalesItemsWhereUniqueInput>
    disconnect?: Enumerable<SalesItemsWhereUniqueInput>
    delete?: Enumerable<SalesItemsWhereUniqueInput>
    connect?: Enumerable<SalesItemsWhereUniqueInput>
    update?: Enumerable<SalesItemsUpdateWithWhereUniqueWithoutSalesOrderInput>
    updateMany?: Enumerable<SalesItemsUpdateManyWithWhereWithoutSalesOrderInput>
    deleteMany?: Enumerable<SalesItemsScalarWhereInput>
  }

  export type SalesOrderCreateNestedOneWithoutOrdersInput = {
    create?: XOR<SalesOrderCreateWithoutOrdersInput, SalesOrderUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: SalesOrderCreateOrConnectWithoutOrdersInput
    connect?: SalesOrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutSalesItemsInput = {
    create?: XOR<ProductCreateWithoutSalesItemsInput, ProductUncheckedCreateWithoutSalesItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSalesItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type SalesOrderUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<SalesOrderCreateWithoutOrdersInput, SalesOrderUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: SalesOrderCreateOrConnectWithoutOrdersInput
    upsert?: SalesOrderUpsertWithoutOrdersInput
    connect?: SalesOrderWhereUniqueInput
    update?: XOR<SalesOrderUpdateWithoutOrdersInput, SalesOrderUncheckedUpdateWithoutOrdersInput>
  }

  export type ProductUpdateOneRequiredWithoutSalesItemsNestedInput = {
    create?: XOR<ProductCreateWithoutSalesItemsInput, ProductUncheckedCreateWithoutSalesItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSalesItemsInput
    upsert?: ProductUpsertWithoutSalesItemsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<ProductUpdateWithoutSalesItemsInput, ProductUncheckedUpdateWithoutSalesItemsInput>
  }

  export type PurchaseOrderCreateNestedManyWithoutVendorNameInput = {
    create?: XOR<Enumerable<PurchaseOrderCreateWithoutVendorNameInput>, Enumerable<PurchaseOrderUncheckedCreateWithoutVendorNameInput>>
    connectOrCreate?: Enumerable<PurchaseOrderCreateOrConnectWithoutVendorNameInput>
    createMany?: PurchaseOrderCreateManyVendorNameInputEnvelope
    connect?: Enumerable<PurchaseOrderWhereUniqueInput>
  }

  export type PurchaseOrderUncheckedCreateNestedManyWithoutVendorNameInput = {
    create?: XOR<Enumerable<PurchaseOrderCreateWithoutVendorNameInput>, Enumerable<PurchaseOrderUncheckedCreateWithoutVendorNameInput>>
    connectOrCreate?: Enumerable<PurchaseOrderCreateOrConnectWithoutVendorNameInput>
    createMany?: PurchaseOrderCreateManyVendorNameInputEnvelope
    connect?: Enumerable<PurchaseOrderWhereUniqueInput>
  }

  export type PurchaseOrderUpdateManyWithoutVendorNameNestedInput = {
    create?: XOR<Enumerable<PurchaseOrderCreateWithoutVendorNameInput>, Enumerable<PurchaseOrderUncheckedCreateWithoutVendorNameInput>>
    connectOrCreate?: Enumerable<PurchaseOrderCreateOrConnectWithoutVendorNameInput>
    upsert?: Enumerable<PurchaseOrderUpsertWithWhereUniqueWithoutVendorNameInput>
    createMany?: PurchaseOrderCreateManyVendorNameInputEnvelope
    set?: Enumerable<PurchaseOrderWhereUniqueInput>
    disconnect?: Enumerable<PurchaseOrderWhereUniqueInput>
    delete?: Enumerable<PurchaseOrderWhereUniqueInput>
    connect?: Enumerable<PurchaseOrderWhereUniqueInput>
    update?: Enumerable<PurchaseOrderUpdateWithWhereUniqueWithoutVendorNameInput>
    updateMany?: Enumerable<PurchaseOrderUpdateManyWithWhereWithoutVendorNameInput>
    deleteMany?: Enumerable<PurchaseOrderScalarWhereInput>
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutVendorNameNestedInput = {
    create?: XOR<Enumerable<PurchaseOrderCreateWithoutVendorNameInput>, Enumerable<PurchaseOrderUncheckedCreateWithoutVendorNameInput>>
    connectOrCreate?: Enumerable<PurchaseOrderCreateOrConnectWithoutVendorNameInput>
    upsert?: Enumerable<PurchaseOrderUpsertWithWhereUniqueWithoutVendorNameInput>
    createMany?: PurchaseOrderCreateManyVendorNameInputEnvelope
    set?: Enumerable<PurchaseOrderWhereUniqueInput>
    disconnect?: Enumerable<PurchaseOrderWhereUniqueInput>
    delete?: Enumerable<PurchaseOrderWhereUniqueInput>
    connect?: Enumerable<PurchaseOrderWhereUniqueInput>
    update?: Enumerable<PurchaseOrderUpdateWithWhereUniqueWithoutVendorNameInput>
    updateMany?: Enumerable<PurchaseOrderUpdateManyWithWhereWithoutVendorNameInput>
    deleteMany?: Enumerable<PurchaseOrderScalarWhereInput>
  }

  export type SalesOrderCreateNestedManyWithoutCustomerNameInput = {
    create?: XOR<Enumerable<SalesOrderCreateWithoutCustomerNameInput>, Enumerable<SalesOrderUncheckedCreateWithoutCustomerNameInput>>
    connectOrCreate?: Enumerable<SalesOrderCreateOrConnectWithoutCustomerNameInput>
    createMany?: SalesOrderCreateManyCustomerNameInputEnvelope
    connect?: Enumerable<SalesOrderWhereUniqueInput>
  }

  export type SalesOrderUncheckedCreateNestedManyWithoutCustomerNameInput = {
    create?: XOR<Enumerable<SalesOrderCreateWithoutCustomerNameInput>, Enumerable<SalesOrderUncheckedCreateWithoutCustomerNameInput>>
    connectOrCreate?: Enumerable<SalesOrderCreateOrConnectWithoutCustomerNameInput>
    createMany?: SalesOrderCreateManyCustomerNameInputEnvelope
    connect?: Enumerable<SalesOrderWhereUniqueInput>
  }

  export type SalesOrderUpdateManyWithoutCustomerNameNestedInput = {
    create?: XOR<Enumerable<SalesOrderCreateWithoutCustomerNameInput>, Enumerable<SalesOrderUncheckedCreateWithoutCustomerNameInput>>
    connectOrCreate?: Enumerable<SalesOrderCreateOrConnectWithoutCustomerNameInput>
    upsert?: Enumerable<SalesOrderUpsertWithWhereUniqueWithoutCustomerNameInput>
    createMany?: SalesOrderCreateManyCustomerNameInputEnvelope
    set?: Enumerable<SalesOrderWhereUniqueInput>
    disconnect?: Enumerable<SalesOrderWhereUniqueInput>
    delete?: Enumerable<SalesOrderWhereUniqueInput>
    connect?: Enumerable<SalesOrderWhereUniqueInput>
    update?: Enumerable<SalesOrderUpdateWithWhereUniqueWithoutCustomerNameInput>
    updateMany?: Enumerable<SalesOrderUpdateManyWithWhereWithoutCustomerNameInput>
    deleteMany?: Enumerable<SalesOrderScalarWhereInput>
  }

  export type SalesOrderUncheckedUpdateManyWithoutCustomerNameNestedInput = {
    create?: XOR<Enumerable<SalesOrderCreateWithoutCustomerNameInput>, Enumerable<SalesOrderUncheckedCreateWithoutCustomerNameInput>>
    connectOrCreate?: Enumerable<SalesOrderCreateOrConnectWithoutCustomerNameInput>
    upsert?: Enumerable<SalesOrderUpsertWithWhereUniqueWithoutCustomerNameInput>
    createMany?: SalesOrderCreateManyCustomerNameInputEnvelope
    set?: Enumerable<SalesOrderWhereUniqueInput>
    disconnect?: Enumerable<SalesOrderWhereUniqueInput>
    delete?: Enumerable<SalesOrderWhereUniqueInput>
    connect?: Enumerable<SalesOrderWhereUniqueInput>
    update?: Enumerable<SalesOrderUpdateWithWhereUniqueWithoutCustomerNameInput>
    updateMany?: Enumerable<SalesOrderUpdateManyWithWhereWithoutCustomerNameInput>
    deleteMany?: Enumerable<SalesOrderScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUserTokensInput = {
    create?: XOR<UserCreateWithoutUserTokensInput, UserUncheckedCreateWithoutUserTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserTokensNestedInput = {
    create?: XOR<UserCreateWithoutUserTokensInput, UserUncheckedCreateWithoutUserTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserTokensInput
    upsert?: UserUpsertWithoutUserTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserTokensInput, UserUncheckedUpdateWithoutUserTokensInput>
  }

  export type rolesPermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<rolesPermissionCreateWithoutRoleInput>, Enumerable<rolesPermissionUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<rolesPermissionCreateOrConnectWithoutRoleInput>
    createMany?: rolesPermissionCreateManyRoleInputEnvelope
    connect?: Enumerable<rolesPermissionWhereUniqueInput>
  }

  export type userRolePermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<userRolePermissionCreateWithoutRoleInput>, Enumerable<userRolePermissionUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<userRolePermissionCreateOrConnectWithoutRoleInput>
    createMany?: userRolePermissionCreateManyRoleInputEnvelope
    connect?: Enumerable<userRolePermissionWhereUniqueInput>
  }

  export type rolesPermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<rolesPermissionCreateWithoutRoleInput>, Enumerable<rolesPermissionUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<rolesPermissionCreateOrConnectWithoutRoleInput>
    createMany?: rolesPermissionCreateManyRoleInputEnvelope
    connect?: Enumerable<rolesPermissionWhereUniqueInput>
  }

  export type userRolePermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<userRolePermissionCreateWithoutRoleInput>, Enumerable<userRolePermissionUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<userRolePermissionCreateOrConnectWithoutRoleInput>
    createMany?: userRolePermissionCreateManyRoleInputEnvelope
    connect?: Enumerable<userRolePermissionWhereUniqueInput>
  }

  export type rolesPermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<rolesPermissionCreateWithoutRoleInput>, Enumerable<rolesPermissionUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<rolesPermissionCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<rolesPermissionUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: rolesPermissionCreateManyRoleInputEnvelope
    set?: Enumerable<rolesPermissionWhereUniqueInput>
    disconnect?: Enumerable<rolesPermissionWhereUniqueInput>
    delete?: Enumerable<rolesPermissionWhereUniqueInput>
    connect?: Enumerable<rolesPermissionWhereUniqueInput>
    update?: Enumerable<rolesPermissionUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<rolesPermissionUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<rolesPermissionScalarWhereInput>
  }

  export type userRolePermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<userRolePermissionCreateWithoutRoleInput>, Enumerable<userRolePermissionUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<userRolePermissionCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<userRolePermissionUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: userRolePermissionCreateManyRoleInputEnvelope
    set?: Enumerable<userRolePermissionWhereUniqueInput>
    disconnect?: Enumerable<userRolePermissionWhereUniqueInput>
    delete?: Enumerable<userRolePermissionWhereUniqueInput>
    connect?: Enumerable<userRolePermissionWhereUniqueInput>
    update?: Enumerable<userRolePermissionUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<userRolePermissionUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<userRolePermissionScalarWhereInput>
  }

  export type rolesPermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<rolesPermissionCreateWithoutRoleInput>, Enumerable<rolesPermissionUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<rolesPermissionCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<rolesPermissionUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: rolesPermissionCreateManyRoleInputEnvelope
    set?: Enumerable<rolesPermissionWhereUniqueInput>
    disconnect?: Enumerable<rolesPermissionWhereUniqueInput>
    delete?: Enumerable<rolesPermissionWhereUniqueInput>
    connect?: Enumerable<rolesPermissionWhereUniqueInput>
    update?: Enumerable<rolesPermissionUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<rolesPermissionUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<rolesPermissionScalarWhereInput>
  }

  export type userRolePermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<userRolePermissionCreateWithoutRoleInput>, Enumerable<userRolePermissionUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<userRolePermissionCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<userRolePermissionUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: userRolePermissionCreateManyRoleInputEnvelope
    set?: Enumerable<userRolePermissionWhereUniqueInput>
    disconnect?: Enumerable<userRolePermissionWhereUniqueInput>
    delete?: Enumerable<userRolePermissionWhereUniqueInput>
    connect?: Enumerable<userRolePermissionWhereUniqueInput>
    update?: Enumerable<userRolePermissionUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<userRolePermissionUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<userRolePermissionScalarWhereInput>
  }

  export type rolesPermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<Enumerable<rolesPermissionCreateWithoutPermissionInput>, Enumerable<rolesPermissionUncheckedCreateWithoutPermissionInput>>
    connectOrCreate?: Enumerable<rolesPermissionCreateOrConnectWithoutPermissionInput>
    createMany?: rolesPermissionCreateManyPermissionInputEnvelope
    connect?: Enumerable<rolesPermissionWhereUniqueInput>
  }

  export type rolesPermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<Enumerable<rolesPermissionCreateWithoutPermissionInput>, Enumerable<rolesPermissionUncheckedCreateWithoutPermissionInput>>
    connectOrCreate?: Enumerable<rolesPermissionCreateOrConnectWithoutPermissionInput>
    createMany?: rolesPermissionCreateManyPermissionInputEnvelope
    connect?: Enumerable<rolesPermissionWhereUniqueInput>
  }

  export type rolesPermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<Enumerable<rolesPermissionCreateWithoutPermissionInput>, Enumerable<rolesPermissionUncheckedCreateWithoutPermissionInput>>
    connectOrCreate?: Enumerable<rolesPermissionCreateOrConnectWithoutPermissionInput>
    upsert?: Enumerable<rolesPermissionUpsertWithWhereUniqueWithoutPermissionInput>
    createMany?: rolesPermissionCreateManyPermissionInputEnvelope
    set?: Enumerable<rolesPermissionWhereUniqueInput>
    disconnect?: Enumerable<rolesPermissionWhereUniqueInput>
    delete?: Enumerable<rolesPermissionWhereUniqueInput>
    connect?: Enumerable<rolesPermissionWhereUniqueInput>
    update?: Enumerable<rolesPermissionUpdateWithWhereUniqueWithoutPermissionInput>
    updateMany?: Enumerable<rolesPermissionUpdateManyWithWhereWithoutPermissionInput>
    deleteMany?: Enumerable<rolesPermissionScalarWhereInput>
  }

  export type rolesPermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<Enumerable<rolesPermissionCreateWithoutPermissionInput>, Enumerable<rolesPermissionUncheckedCreateWithoutPermissionInput>>
    connectOrCreate?: Enumerable<rolesPermissionCreateOrConnectWithoutPermissionInput>
    upsert?: Enumerable<rolesPermissionUpsertWithWhereUniqueWithoutPermissionInput>
    createMany?: rolesPermissionCreateManyPermissionInputEnvelope
    set?: Enumerable<rolesPermissionWhereUniqueInput>
    disconnect?: Enumerable<rolesPermissionWhereUniqueInput>
    delete?: Enumerable<rolesPermissionWhereUniqueInput>
    connect?: Enumerable<rolesPermissionWhereUniqueInput>
    update?: Enumerable<rolesPermissionUpdateWithWhereUniqueWithoutPermissionInput>
    updateMany?: Enumerable<rolesPermissionUpdateManyWithWhereWithoutPermissionInput>
    deleteMany?: Enumerable<rolesPermissionScalarWhereInput>
  }

  export type RolesCreateNestedOneWithoutRolePermissionInput = {
    create?: XOR<RolesCreateWithoutRolePermissionInput, RolesUncheckedCreateWithoutRolePermissionInput>
    connectOrCreate?: RolesCreateOrConnectWithoutRolePermissionInput
    connect?: RolesWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutRolePermissionInput = {
    create?: XOR<PermissionCreateWithoutRolePermissionInput, PermissionUncheckedCreateWithoutRolePermissionInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolePermissionInput
    connect?: PermissionWhereUniqueInput
  }

  export type RolesUpdateOneRequiredWithoutRolePermissionNestedInput = {
    create?: XOR<RolesCreateWithoutRolePermissionInput, RolesUncheckedCreateWithoutRolePermissionInput>
    connectOrCreate?: RolesCreateOrConnectWithoutRolePermissionInput
    upsert?: RolesUpsertWithoutRolePermissionInput
    connect?: RolesWhereUniqueInput
    update?: XOR<RolesUpdateWithoutRolePermissionInput, RolesUncheckedUpdateWithoutRolePermissionInput>
  }

  export type PermissionUpdateOneRequiredWithoutRolePermissionNestedInput = {
    create?: XOR<PermissionCreateWithoutRolePermissionInput, PermissionUncheckedCreateWithoutRolePermissionInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolePermissionInput
    upsert?: PermissionUpsertWithoutRolePermissionInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<PermissionUpdateWithoutRolePermissionInput, PermissionUncheckedUpdateWithoutRolePermissionInput>
  }

  export type UserCreateNestedOneWithoutUserRolePermissionInput = {
    create?: XOR<UserCreateWithoutUserRolePermissionInput, UserUncheckedCreateWithoutUserRolePermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRolePermissionInput
    connect?: UserWhereUniqueInput
  }

  export type RolesCreateNestedOneWithoutUserInput = {
    create?: XOR<RolesCreateWithoutUserInput, RolesUncheckedCreateWithoutUserInput>
    connectOrCreate?: RolesCreateOrConnectWithoutUserInput
    connect?: RolesWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserRolePermissionNestedInput = {
    create?: XOR<UserCreateWithoutUserRolePermissionInput, UserUncheckedCreateWithoutUserRolePermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRolePermissionInput
    upsert?: UserUpsertWithoutUserRolePermissionInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserRolePermissionInput, UserUncheckedUpdateWithoutUserRolePermissionInput>
  }

  export type RolesUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<RolesCreateWithoutUserInput, RolesUncheckedCreateWithoutUserInput>
    connectOrCreate?: RolesCreateOrConnectWithoutUserInput
    upsert?: RolesUpsertWithoutUserInput
    connect?: RolesWhereUniqueInput
    update?: XOR<RolesUpdateWithoutUserInput, RolesUncheckedUpdateWithoutUserInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type PurchaseOrderCreateWithoutUserInput = {
    purchaseOrderNo?: string | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: PurchaseItemsCreateNestedManyWithoutPurchaseOrderInput
    vendorName: VendorCreateNestedOneWithoutPurchaseOrderInput
  }

  export type PurchaseOrderUncheckedCreateWithoutUserInput = {
    id?: number
    purchaseOrderNo?: string | null
    vendorId: number
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: PurchaseItemsUncheckedCreateNestedManyWithoutPurchaseOrderInput
  }

  export type PurchaseOrderCreateOrConnectWithoutUserInput = {
    where: PurchaseOrderWhereUniqueInput
    create: XOR<PurchaseOrderCreateWithoutUserInput, PurchaseOrderUncheckedCreateWithoutUserInput>
  }

  export type PurchaseOrderCreateManyUserInputEnvelope = {
    data: Enumerable<PurchaseOrderCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SalesOrderCreateWithoutUserInput = {
    salesOrderNo?: string | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: SalesItemsCreateNestedManyWithoutSalesOrderInput
    customerName: CustomerCreateNestedOneWithoutSalesOrderInput
  }

  export type SalesOrderUncheckedCreateWithoutUserInput = {
    id?: number
    salesOrderNo?: string | null
    customerId: number
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: SalesItemsUncheckedCreateNestedManyWithoutSalesOrderInput
  }

  export type SalesOrderCreateOrConnectWithoutUserInput = {
    where: SalesOrderWhereUniqueInput
    create: XOR<SalesOrderCreateWithoutUserInput, SalesOrderUncheckedCreateWithoutUserInput>
  }

  export type SalesOrderCreateManyUserInputEnvelope = {
    data: Enumerable<SalesOrderCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserTokensCreateWithoutUserInput = {
    expiry: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTokensUncheckedCreateWithoutUserInput = {
    id?: number
    expiry: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTokensCreateOrConnectWithoutUserInput = {
    where: UserTokensWhereUniqueInput
    create: XOR<UserTokensCreateWithoutUserInput, UserTokensUncheckedCreateWithoutUserInput>
  }

  export type UserTokensCreateManyUserInputEnvelope = {
    data: Enumerable<UserTokensCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type userRolePermissionCreateWithoutUserInput = {
    role: RolesCreateNestedOneWithoutUserInput
  }

  export type userRolePermissionUncheckedCreateWithoutUserInput = {
    id?: number
    roleid: number
  }

  export type userRolePermissionCreateOrConnectWithoutUserInput = {
    where: userRolePermissionWhereUniqueInput
    create: XOR<userRolePermissionCreateWithoutUserInput, userRolePermissionUncheckedCreateWithoutUserInput>
  }

  export type userRolePermissionCreateManyUserInputEnvelope = {
    data: Enumerable<userRolePermissionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type PurchaseOrderUpsertWithWhereUniqueWithoutUserInput = {
    where: PurchaseOrderWhereUniqueInput
    update: XOR<PurchaseOrderUpdateWithoutUserInput, PurchaseOrderUncheckedUpdateWithoutUserInput>
    create: XOR<PurchaseOrderCreateWithoutUserInput, PurchaseOrderUncheckedCreateWithoutUserInput>
  }

  export type PurchaseOrderUpdateWithWhereUniqueWithoutUserInput = {
    where: PurchaseOrderWhereUniqueInput
    data: XOR<PurchaseOrderUpdateWithoutUserInput, PurchaseOrderUncheckedUpdateWithoutUserInput>
  }

  export type PurchaseOrderUpdateManyWithWhereWithoutUserInput = {
    where: PurchaseOrderScalarWhereInput
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyWithoutPurchaseOrderInput>
  }

  export type PurchaseOrderScalarWhereInput = {
    AND?: Enumerable<PurchaseOrderScalarWhereInput>
    OR?: Enumerable<PurchaseOrderScalarWhereInput>
    NOT?: Enumerable<PurchaseOrderScalarWhereInput>
    id?: IntFilter | number
    purchaseOrderNo?: StringNullableFilter | string | null
    vendorId?: IntFilter | number
    remarks?: StringNullableFilter | string | null
    total?: FloatFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SalesOrderUpsertWithWhereUniqueWithoutUserInput = {
    where: SalesOrderWhereUniqueInput
    update: XOR<SalesOrderUpdateWithoutUserInput, SalesOrderUncheckedUpdateWithoutUserInput>
    create: XOR<SalesOrderCreateWithoutUserInput, SalesOrderUncheckedCreateWithoutUserInput>
  }

  export type SalesOrderUpdateWithWhereUniqueWithoutUserInput = {
    where: SalesOrderWhereUniqueInput
    data: XOR<SalesOrderUpdateWithoutUserInput, SalesOrderUncheckedUpdateWithoutUserInput>
  }

  export type SalesOrderUpdateManyWithWhereWithoutUserInput = {
    where: SalesOrderScalarWhereInput
    data: XOR<SalesOrderUpdateManyMutationInput, SalesOrderUncheckedUpdateManyWithoutSalesOrderInput>
  }

  export type SalesOrderScalarWhereInput = {
    AND?: Enumerable<SalesOrderScalarWhereInput>
    OR?: Enumerable<SalesOrderScalarWhereInput>
    NOT?: Enumerable<SalesOrderScalarWhereInput>
    id?: IntFilter | number
    salesOrderNo?: StringNullableFilter | string | null
    customerId?: IntFilter | number
    userId?: IntNullableFilter | number | null
    remarks?: StringNullableFilter | string | null
    total?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserTokensUpsertWithWhereUniqueWithoutUserInput = {
    where: UserTokensWhereUniqueInput
    update: XOR<UserTokensUpdateWithoutUserInput, UserTokensUncheckedUpdateWithoutUserInput>
    create: XOR<UserTokensCreateWithoutUserInput, UserTokensUncheckedCreateWithoutUserInput>
  }

  export type UserTokensUpdateWithWhereUniqueWithoutUserInput = {
    where: UserTokensWhereUniqueInput
    data: XOR<UserTokensUpdateWithoutUserInput, UserTokensUncheckedUpdateWithoutUserInput>
  }

  export type UserTokensUpdateManyWithWhereWithoutUserInput = {
    where: UserTokensScalarWhereInput
    data: XOR<UserTokensUpdateManyMutationInput, UserTokensUncheckedUpdateManyWithoutUserTokensInput>
  }

  export type UserTokensScalarWhereInput = {
    AND?: Enumerable<UserTokensScalarWhereInput>
    OR?: Enumerable<UserTokensScalarWhereInput>
    NOT?: Enumerable<UserTokensScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    expiry?: DateTimeFilter | Date | string
    token?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type userRolePermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: userRolePermissionWhereUniqueInput
    update: XOR<userRolePermissionUpdateWithoutUserInput, userRolePermissionUncheckedUpdateWithoutUserInput>
    create: XOR<userRolePermissionCreateWithoutUserInput, userRolePermissionUncheckedCreateWithoutUserInput>
  }

  export type userRolePermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: userRolePermissionWhereUniqueInput
    data: XOR<userRolePermissionUpdateWithoutUserInput, userRolePermissionUncheckedUpdateWithoutUserInput>
  }

  export type userRolePermissionUpdateManyWithWhereWithoutUserInput = {
    where: userRolePermissionScalarWhereInput
    data: XOR<userRolePermissionUpdateManyMutationInput, userRolePermissionUncheckedUpdateManyWithoutUserRolePermissionInput>
  }

  export type userRolePermissionScalarWhereInput = {
    AND?: Enumerable<userRolePermissionScalarWhereInput>
    OR?: Enumerable<userRolePermissionScalarWhereInput>
    NOT?: Enumerable<userRolePermissionScalarWhereInput>
    id?: IntFilter | number
    userid?: IntFilter | number
    roleid?: IntFilter | number
  }

  export type PurchaseItemsCreateWithoutProductInput = {
    quantity: number
    purchasePrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    purchaseOrder: PurchaseOrderCreateNestedOneWithoutOrdersInput
  }

  export type PurchaseItemsUncheckedCreateWithoutProductInput = {
    id?: number
    purchaseOrderId: number
    quantity: number
    purchasePrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseItemsCreateOrConnectWithoutProductInput = {
    where: PurchaseItemsWhereUniqueInput
    create: XOR<PurchaseItemsCreateWithoutProductInput, PurchaseItemsUncheckedCreateWithoutProductInput>
  }

  export type PurchaseItemsCreateManyProductInputEnvelope = {
    data: Enumerable<PurchaseItemsCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type SalesItemsCreateWithoutProductInput = {
    quantity: number
    sellingPrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    salesOrder: SalesOrderCreateNestedOneWithoutOrdersInput
  }

  export type SalesItemsUncheckedCreateWithoutProductInput = {
    id?: number
    salesOrderId: number
    quantity: number
    sellingPrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalesItemsCreateOrConnectWithoutProductInput = {
    where: SalesItemsWhereUniqueInput
    create: XOR<SalesItemsCreateWithoutProductInput, SalesItemsUncheckedCreateWithoutProductInput>
  }

  export type SalesItemsCreateManyProductInputEnvelope = {
    data: Enumerable<SalesItemsCreateManyProductInput>
    skipDuplicates?: boolean
  }

  export type PurchaseItemsUpsertWithWhereUniqueWithoutProductInput = {
    where: PurchaseItemsWhereUniqueInput
    update: XOR<PurchaseItemsUpdateWithoutProductInput, PurchaseItemsUncheckedUpdateWithoutProductInput>
    create: XOR<PurchaseItemsCreateWithoutProductInput, PurchaseItemsUncheckedCreateWithoutProductInput>
  }

  export type PurchaseItemsUpdateWithWhereUniqueWithoutProductInput = {
    where: PurchaseItemsWhereUniqueInput
    data: XOR<PurchaseItemsUpdateWithoutProductInput, PurchaseItemsUncheckedUpdateWithoutProductInput>
  }

  export type PurchaseItemsUpdateManyWithWhereWithoutProductInput = {
    where: PurchaseItemsScalarWhereInput
    data: XOR<PurchaseItemsUpdateManyMutationInput, PurchaseItemsUncheckedUpdateManyWithoutPurchaseItemsInput>
  }

  export type PurchaseItemsScalarWhereInput = {
    AND?: Enumerable<PurchaseItemsScalarWhereInput>
    OR?: Enumerable<PurchaseItemsScalarWhereInput>
    NOT?: Enumerable<PurchaseItemsScalarWhereInput>
    id?: IntFilter | number
    purchaseOrderId?: IntFilter | number
    productId?: IntFilter | number
    quantity?: IntFilter | number
    purchasePrice?: FloatFilter | number
    total?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SalesItemsUpsertWithWhereUniqueWithoutProductInput = {
    where: SalesItemsWhereUniqueInput
    update: XOR<SalesItemsUpdateWithoutProductInput, SalesItemsUncheckedUpdateWithoutProductInput>
    create: XOR<SalesItemsCreateWithoutProductInput, SalesItemsUncheckedCreateWithoutProductInput>
  }

  export type SalesItemsUpdateWithWhereUniqueWithoutProductInput = {
    where: SalesItemsWhereUniqueInput
    data: XOR<SalesItemsUpdateWithoutProductInput, SalesItemsUncheckedUpdateWithoutProductInput>
  }

  export type SalesItemsUpdateManyWithWhereWithoutProductInput = {
    where: SalesItemsScalarWhereInput
    data: XOR<SalesItemsUpdateManyMutationInput, SalesItemsUncheckedUpdateManyWithoutSalesItemsInput>
  }

  export type SalesItemsScalarWhereInput = {
    AND?: Enumerable<SalesItemsScalarWhereInput>
    OR?: Enumerable<SalesItemsScalarWhereInput>
    NOT?: Enumerable<SalesItemsScalarWhereInput>
    id?: IntFilter | number
    salesOrderId?: IntFilter | number
    productId?: IntFilter | number
    quantity?: IntFilter | number
    sellingPrice?: FloatFilter | number
    total?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PurchaseItemsCreateWithoutPurchaseOrderInput = {
    quantity: number
    purchasePrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutPurchaseItemsInput
  }

  export type PurchaseItemsUncheckedCreateWithoutPurchaseOrderInput = {
    id?: number
    productId: number
    quantity: number
    purchasePrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseItemsCreateOrConnectWithoutPurchaseOrderInput = {
    where: PurchaseItemsWhereUniqueInput
    create: XOR<PurchaseItemsCreateWithoutPurchaseOrderInput, PurchaseItemsUncheckedCreateWithoutPurchaseOrderInput>
  }

  export type PurchaseItemsCreateManyPurchaseOrderInputEnvelope = {
    data: Enumerable<PurchaseItemsCreateManyPurchaseOrderInput>
    skipDuplicates?: boolean
  }

  export type VendorCreateWithoutPurchaseOrderInput = {
    name: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VendorUncheckedCreateWithoutPurchaseOrderInput = {
    id?: number
    name: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VendorCreateOrConnectWithoutPurchaseOrderInput = {
    where: VendorWhereUniqueInput
    create: XOR<VendorCreateWithoutPurchaseOrderInput, VendorUncheckedCreateWithoutPurchaseOrderInput>
  }

  export type UserCreateWithoutPurchaseOrderInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    address?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SalesOrder?: SalesOrderCreateNestedManyWithoutUserInput
    UserTokens?: UserTokensCreateNestedManyWithoutUserInput
    userRolePermission?: userRolePermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPurchaseOrderInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    address?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    SalesOrder?: SalesOrderUncheckedCreateNestedManyWithoutUserInput
    UserTokens?: UserTokensUncheckedCreateNestedManyWithoutUserInput
    userRolePermission?: userRolePermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPurchaseOrderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPurchaseOrderInput, UserUncheckedCreateWithoutPurchaseOrderInput>
  }

  export type PurchaseItemsUpsertWithWhereUniqueWithoutPurchaseOrderInput = {
    where: PurchaseItemsWhereUniqueInput
    update: XOR<PurchaseItemsUpdateWithoutPurchaseOrderInput, PurchaseItemsUncheckedUpdateWithoutPurchaseOrderInput>
    create: XOR<PurchaseItemsCreateWithoutPurchaseOrderInput, PurchaseItemsUncheckedCreateWithoutPurchaseOrderInput>
  }

  export type PurchaseItemsUpdateWithWhereUniqueWithoutPurchaseOrderInput = {
    where: PurchaseItemsWhereUniqueInput
    data: XOR<PurchaseItemsUpdateWithoutPurchaseOrderInput, PurchaseItemsUncheckedUpdateWithoutPurchaseOrderInput>
  }

  export type PurchaseItemsUpdateManyWithWhereWithoutPurchaseOrderInput = {
    where: PurchaseItemsScalarWhereInput
    data: XOR<PurchaseItemsUpdateManyMutationInput, PurchaseItemsUncheckedUpdateManyWithoutOrdersInput>
  }

  export type VendorUpsertWithoutPurchaseOrderInput = {
    update: XOR<VendorUpdateWithoutPurchaseOrderInput, VendorUncheckedUpdateWithoutPurchaseOrderInput>
    create: XOR<VendorCreateWithoutPurchaseOrderInput, VendorUncheckedCreateWithoutPurchaseOrderInput>
  }

  export type VendorUpdateWithoutPurchaseOrderInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VendorUncheckedUpdateWithoutPurchaseOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutPurchaseOrderInput = {
    update: XOR<UserUpdateWithoutPurchaseOrderInput, UserUncheckedUpdateWithoutPurchaseOrderInput>
    create: XOR<UserCreateWithoutPurchaseOrderInput, UserUncheckedCreateWithoutPurchaseOrderInput>
  }

  export type UserUpdateWithoutPurchaseOrderInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SalesOrder?: SalesOrderUpdateManyWithoutUserNestedInput
    UserTokens?: UserTokensUpdateManyWithoutUserNestedInput
    userRolePermission?: userRolePermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPurchaseOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SalesOrder?: SalesOrderUncheckedUpdateManyWithoutUserNestedInput
    UserTokens?: UserTokensUncheckedUpdateManyWithoutUserNestedInput
    userRolePermission?: userRolePermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PurchaseOrderCreateWithoutOrdersInput = {
    purchaseOrderNo?: string | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    vendorName: VendorCreateNestedOneWithoutPurchaseOrderInput
    user: UserCreateNestedOneWithoutPurchaseOrderInput
  }

  export type PurchaseOrderUncheckedCreateWithoutOrdersInput = {
    id?: number
    purchaseOrderNo?: string | null
    vendorId: number
    remarks?: string | null
    total: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseOrderCreateOrConnectWithoutOrdersInput = {
    where: PurchaseOrderWhereUniqueInput
    create: XOR<PurchaseOrderCreateWithoutOrdersInput, PurchaseOrderUncheckedCreateWithoutOrdersInput>
  }

  export type ProductCreateWithoutPurchaseItemsInput = {
    productName: string
    description?: string | null
    purchasePrice: number
    sellingPrice: number
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    salesItems?: SalesItemsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutPurchaseItemsInput = {
    id?: number
    productName: string
    description?: string | null
    purchasePrice: number
    sellingPrice: number
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    salesItems?: SalesItemsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutPurchaseItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutPurchaseItemsInput, ProductUncheckedCreateWithoutPurchaseItemsInput>
  }

  export type PurchaseOrderUpsertWithoutOrdersInput = {
    update: XOR<PurchaseOrderUpdateWithoutOrdersInput, PurchaseOrderUncheckedUpdateWithoutOrdersInput>
    create: XOR<PurchaseOrderCreateWithoutOrdersInput, PurchaseOrderUncheckedCreateWithoutOrdersInput>
  }

  export type PurchaseOrderUpdateWithoutOrdersInput = {
    purchaseOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vendorName?: VendorUpdateOneRequiredWithoutPurchaseOrderNestedInput
    user?: UserUpdateOneRequiredWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: IntFieldUpdateOperationsInput | number
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpsertWithoutPurchaseItemsInput = {
    update: XOR<ProductUpdateWithoutPurchaseItemsInput, ProductUncheckedUpdateWithoutPurchaseItemsInput>
    create: XOR<ProductCreateWithoutPurchaseItemsInput, ProductUncheckedCreateWithoutPurchaseItemsInput>
  }

  export type ProductUpdateWithoutPurchaseItemsInput = {
    productName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    salesItems?: SalesItemsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutPurchaseItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    salesItems?: SalesItemsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type SalesItemsCreateWithoutSalesOrderInput = {
    quantity: number
    sellingPrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutSalesItemsInput
  }

  export type SalesItemsUncheckedCreateWithoutSalesOrderInput = {
    id?: number
    productId: number
    quantity: number
    sellingPrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalesItemsCreateOrConnectWithoutSalesOrderInput = {
    where: SalesItemsWhereUniqueInput
    create: XOR<SalesItemsCreateWithoutSalesOrderInput, SalesItemsUncheckedCreateWithoutSalesOrderInput>
  }

  export type SalesItemsCreateManySalesOrderInputEnvelope = {
    data: Enumerable<SalesItemsCreateManySalesOrderInput>
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutSalesOrderInput = {
    name: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUncheckedCreateWithoutSalesOrderInput = {
    id?: number
    name: string
    address?: string | null
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerCreateOrConnectWithoutSalesOrderInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutSalesOrderInput, CustomerUncheckedCreateWithoutSalesOrderInput>
  }

  export type UserCreateWithoutSalesOrderInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    address?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutUserInput
    UserTokens?: UserTokensCreateNestedManyWithoutUserInput
    userRolePermission?: userRolePermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSalesOrderInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    address?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutUserInput
    UserTokens?: UserTokensUncheckedCreateNestedManyWithoutUserInput
    userRolePermission?: userRolePermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSalesOrderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSalesOrderInput, UserUncheckedCreateWithoutSalesOrderInput>
  }

  export type SalesItemsUpsertWithWhereUniqueWithoutSalesOrderInput = {
    where: SalesItemsWhereUniqueInput
    update: XOR<SalesItemsUpdateWithoutSalesOrderInput, SalesItemsUncheckedUpdateWithoutSalesOrderInput>
    create: XOR<SalesItemsCreateWithoutSalesOrderInput, SalesItemsUncheckedCreateWithoutSalesOrderInput>
  }

  export type SalesItemsUpdateWithWhereUniqueWithoutSalesOrderInput = {
    where: SalesItemsWhereUniqueInput
    data: XOR<SalesItemsUpdateWithoutSalesOrderInput, SalesItemsUncheckedUpdateWithoutSalesOrderInput>
  }

  export type SalesItemsUpdateManyWithWhereWithoutSalesOrderInput = {
    where: SalesItemsScalarWhereInput
    data: XOR<SalesItemsUpdateManyMutationInput, SalesItemsUncheckedUpdateManyWithoutOrdersInput>
  }

  export type CustomerUpsertWithoutSalesOrderInput = {
    update: XOR<CustomerUpdateWithoutSalesOrderInput, CustomerUncheckedUpdateWithoutSalesOrderInput>
    create: XOR<CustomerCreateWithoutSalesOrderInput, CustomerUncheckedCreateWithoutSalesOrderInput>
  }

  export type CustomerUpdateWithoutSalesOrderInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateWithoutSalesOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutSalesOrderInput = {
    update: XOR<UserUpdateWithoutSalesOrderInput, UserUncheckedUpdateWithoutSalesOrderInput>
    create: XOR<UserCreateWithoutSalesOrderInput, UserUncheckedCreateWithoutSalesOrderInput>
  }

  export type UserUpdateWithoutSalesOrderInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutUserNestedInput
    UserTokens?: UserTokensUpdateManyWithoutUserNestedInput
    userRolePermission?: userRolePermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSalesOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutUserNestedInput
    UserTokens?: UserTokensUncheckedUpdateManyWithoutUserNestedInput
    userRolePermission?: userRolePermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SalesOrderCreateWithoutOrdersInput = {
    salesOrderNo?: string | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customerName: CustomerCreateNestedOneWithoutSalesOrderInput
    User?: UserCreateNestedOneWithoutSalesOrderInput
  }

  export type SalesOrderUncheckedCreateWithoutOrdersInput = {
    id?: number
    salesOrderNo?: string | null
    customerId: number
    userId?: number | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalesOrderCreateOrConnectWithoutOrdersInput = {
    where: SalesOrderWhereUniqueInput
    create: XOR<SalesOrderCreateWithoutOrdersInput, SalesOrderUncheckedCreateWithoutOrdersInput>
  }

  export type ProductCreateWithoutSalesItemsInput = {
    productName: string
    description?: string | null
    purchasePrice: number
    sellingPrice: number
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    purchaseItems?: PurchaseItemsCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutSalesItemsInput = {
    id?: number
    productName: string
    description?: string | null
    purchasePrice: number
    sellingPrice: number
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    purchaseItems?: PurchaseItemsUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSalesItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSalesItemsInput, ProductUncheckedCreateWithoutSalesItemsInput>
  }

  export type SalesOrderUpsertWithoutOrdersInput = {
    update: XOR<SalesOrderUpdateWithoutOrdersInput, SalesOrderUncheckedUpdateWithoutOrdersInput>
    create: XOR<SalesOrderCreateWithoutOrdersInput, SalesOrderUncheckedCreateWithoutOrdersInput>
  }

  export type SalesOrderUpdateWithoutOrdersInput = {
    salesOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerName?: CustomerUpdateOneRequiredWithoutSalesOrderNestedInput
    User?: UserUpdateOneWithoutSalesOrderNestedInput
  }

  export type SalesOrderUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    salesOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpsertWithoutSalesItemsInput = {
    update: XOR<ProductUpdateWithoutSalesItemsInput, ProductUncheckedUpdateWithoutSalesItemsInput>
    create: XOR<ProductCreateWithoutSalesItemsInput, ProductUncheckedCreateWithoutSalesItemsInput>
  }

  export type ProductUpdateWithoutSalesItemsInput = {
    productName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseItems?: PurchaseItemsUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutSalesItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    productName?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseItems?: PurchaseItemsUncheckedUpdateManyWithoutProductNestedInput
  }

  export type PurchaseOrderCreateWithoutVendorNameInput = {
    purchaseOrderNo?: string | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: PurchaseItemsCreateNestedManyWithoutPurchaseOrderInput
    user: UserCreateNestedOneWithoutPurchaseOrderInput
  }

  export type PurchaseOrderUncheckedCreateWithoutVendorNameInput = {
    id?: number
    purchaseOrderNo?: string | null
    remarks?: string | null
    total: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: PurchaseItemsUncheckedCreateNestedManyWithoutPurchaseOrderInput
  }

  export type PurchaseOrderCreateOrConnectWithoutVendorNameInput = {
    where: PurchaseOrderWhereUniqueInput
    create: XOR<PurchaseOrderCreateWithoutVendorNameInput, PurchaseOrderUncheckedCreateWithoutVendorNameInput>
  }

  export type PurchaseOrderCreateManyVendorNameInputEnvelope = {
    data: Enumerable<PurchaseOrderCreateManyVendorNameInput>
    skipDuplicates?: boolean
  }

  export type PurchaseOrderUpsertWithWhereUniqueWithoutVendorNameInput = {
    where: PurchaseOrderWhereUniqueInput
    update: XOR<PurchaseOrderUpdateWithoutVendorNameInput, PurchaseOrderUncheckedUpdateWithoutVendorNameInput>
    create: XOR<PurchaseOrderCreateWithoutVendorNameInput, PurchaseOrderUncheckedCreateWithoutVendorNameInput>
  }

  export type PurchaseOrderUpdateWithWhereUniqueWithoutVendorNameInput = {
    where: PurchaseOrderWhereUniqueInput
    data: XOR<PurchaseOrderUpdateWithoutVendorNameInput, PurchaseOrderUncheckedUpdateWithoutVendorNameInput>
  }

  export type PurchaseOrderUpdateManyWithWhereWithoutVendorNameInput = {
    where: PurchaseOrderScalarWhereInput
    data: XOR<PurchaseOrderUpdateManyMutationInput, PurchaseOrderUncheckedUpdateManyWithoutPurchaseOrderInput>
  }

  export type SalesOrderCreateWithoutCustomerNameInput = {
    salesOrderNo?: string | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: SalesItemsCreateNestedManyWithoutSalesOrderInput
    User?: UserCreateNestedOneWithoutSalesOrderInput
  }

  export type SalesOrderUncheckedCreateWithoutCustomerNameInput = {
    id?: number
    salesOrderNo?: string | null
    userId?: number | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: SalesItemsUncheckedCreateNestedManyWithoutSalesOrderInput
  }

  export type SalesOrderCreateOrConnectWithoutCustomerNameInput = {
    where: SalesOrderWhereUniqueInput
    create: XOR<SalesOrderCreateWithoutCustomerNameInput, SalesOrderUncheckedCreateWithoutCustomerNameInput>
  }

  export type SalesOrderCreateManyCustomerNameInputEnvelope = {
    data: Enumerable<SalesOrderCreateManyCustomerNameInput>
    skipDuplicates?: boolean
  }

  export type SalesOrderUpsertWithWhereUniqueWithoutCustomerNameInput = {
    where: SalesOrderWhereUniqueInput
    update: XOR<SalesOrderUpdateWithoutCustomerNameInput, SalesOrderUncheckedUpdateWithoutCustomerNameInput>
    create: XOR<SalesOrderCreateWithoutCustomerNameInput, SalesOrderUncheckedCreateWithoutCustomerNameInput>
  }

  export type SalesOrderUpdateWithWhereUniqueWithoutCustomerNameInput = {
    where: SalesOrderWhereUniqueInput
    data: XOR<SalesOrderUpdateWithoutCustomerNameInput, SalesOrderUncheckedUpdateWithoutCustomerNameInput>
  }

  export type SalesOrderUpdateManyWithWhereWithoutCustomerNameInput = {
    where: SalesOrderScalarWhereInput
    data: XOR<SalesOrderUpdateManyMutationInput, SalesOrderUncheckedUpdateManyWithoutSalesOrderInput>
  }

  export type UserCreateWithoutUserTokensInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    address?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutUserInput
    SalesOrder?: SalesOrderCreateNestedManyWithoutUserInput
    userRolePermission?: userRolePermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserTokensInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    address?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutUserInput
    SalesOrder?: SalesOrderUncheckedCreateNestedManyWithoutUserInput
    userRolePermission?: userRolePermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserTokensInput, UserUncheckedCreateWithoutUserTokensInput>
  }

  export type UserUpsertWithoutUserTokensInput = {
    update: XOR<UserUpdateWithoutUserTokensInput, UserUncheckedUpdateWithoutUserTokensInput>
    create: XOR<UserCreateWithoutUserTokensInput, UserUncheckedCreateWithoutUserTokensInput>
  }

  export type UserUpdateWithoutUserTokensInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutUserNestedInput
    SalesOrder?: SalesOrderUpdateManyWithoutUserNestedInput
    userRolePermission?: userRolePermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutUserNestedInput
    SalesOrder?: SalesOrderUncheckedUpdateManyWithoutUserNestedInput
    userRolePermission?: userRolePermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type rolesPermissionCreateWithoutRoleInput = {
    permission: PermissionCreateNestedOneWithoutRolePermissionInput
  }

  export type rolesPermissionUncheckedCreateWithoutRoleInput = {
    id?: number
    permissionid: number
  }

  export type rolesPermissionCreateOrConnectWithoutRoleInput = {
    where: rolesPermissionWhereUniqueInput
    create: XOR<rolesPermissionCreateWithoutRoleInput, rolesPermissionUncheckedCreateWithoutRoleInput>
  }

  export type rolesPermissionCreateManyRoleInputEnvelope = {
    data: Enumerable<rolesPermissionCreateManyRoleInput>
    skipDuplicates?: boolean
  }

  export type userRolePermissionCreateWithoutRoleInput = {
    user: UserCreateNestedOneWithoutUserRolePermissionInput
  }

  export type userRolePermissionUncheckedCreateWithoutRoleInput = {
    id?: number
    userid: number
  }

  export type userRolePermissionCreateOrConnectWithoutRoleInput = {
    where: userRolePermissionWhereUniqueInput
    create: XOR<userRolePermissionCreateWithoutRoleInput, userRolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type userRolePermissionCreateManyRoleInputEnvelope = {
    data: Enumerable<userRolePermissionCreateManyRoleInput>
    skipDuplicates?: boolean
  }

  export type rolesPermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: rolesPermissionWhereUniqueInput
    update: XOR<rolesPermissionUpdateWithoutRoleInput, rolesPermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<rolesPermissionCreateWithoutRoleInput, rolesPermissionUncheckedCreateWithoutRoleInput>
  }

  export type rolesPermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: rolesPermissionWhereUniqueInput
    data: XOR<rolesPermissionUpdateWithoutRoleInput, rolesPermissionUncheckedUpdateWithoutRoleInput>
  }

  export type rolesPermissionUpdateManyWithWhereWithoutRoleInput = {
    where: rolesPermissionScalarWhereInput
    data: XOR<rolesPermissionUpdateManyMutationInput, rolesPermissionUncheckedUpdateManyWithoutRolePermissionInput>
  }

  export type rolesPermissionScalarWhereInput = {
    AND?: Enumerable<rolesPermissionScalarWhereInput>
    OR?: Enumerable<rolesPermissionScalarWhereInput>
    NOT?: Enumerable<rolesPermissionScalarWhereInput>
    id?: IntFilter | number
    roleid?: IntFilter | number
    permissionid?: IntFilter | number
  }

  export type userRolePermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: userRolePermissionWhereUniqueInput
    update: XOR<userRolePermissionUpdateWithoutRoleInput, userRolePermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<userRolePermissionCreateWithoutRoleInput, userRolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type userRolePermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: userRolePermissionWhereUniqueInput
    data: XOR<userRolePermissionUpdateWithoutRoleInput, userRolePermissionUncheckedUpdateWithoutRoleInput>
  }

  export type userRolePermissionUpdateManyWithWhereWithoutRoleInput = {
    where: userRolePermissionScalarWhereInput
    data: XOR<userRolePermissionUpdateManyMutationInput, userRolePermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type rolesPermissionCreateWithoutPermissionInput = {
    role: RolesCreateNestedOneWithoutRolePermissionInput
  }

  export type rolesPermissionUncheckedCreateWithoutPermissionInput = {
    id?: number
    roleid: number
  }

  export type rolesPermissionCreateOrConnectWithoutPermissionInput = {
    where: rolesPermissionWhereUniqueInput
    create: XOR<rolesPermissionCreateWithoutPermissionInput, rolesPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type rolesPermissionCreateManyPermissionInputEnvelope = {
    data: Enumerable<rolesPermissionCreateManyPermissionInput>
    skipDuplicates?: boolean
  }

  export type rolesPermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: rolesPermissionWhereUniqueInput
    update: XOR<rolesPermissionUpdateWithoutPermissionInput, rolesPermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<rolesPermissionCreateWithoutPermissionInput, rolesPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type rolesPermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: rolesPermissionWhereUniqueInput
    data: XOR<rolesPermissionUpdateWithoutPermissionInput, rolesPermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type rolesPermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: rolesPermissionScalarWhereInput
    data: XOR<rolesPermissionUpdateManyMutationInput, rolesPermissionUncheckedUpdateManyWithoutRolePermissionInput>
  }

  export type RolesCreateWithoutRolePermissionInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: userRolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RolesUncheckedCreateWithoutRolePermissionInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: userRolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RolesCreateOrConnectWithoutRolePermissionInput = {
    where: RolesWhereUniqueInput
    create: XOR<RolesCreateWithoutRolePermissionInput, RolesUncheckedCreateWithoutRolePermissionInput>
  }

  export type PermissionCreateWithoutRolePermissionInput = {
    name: string
    slug: string
  }

  export type PermissionUncheckedCreateWithoutRolePermissionInput = {
    id?: number
    name: string
    slug: string
  }

  export type PermissionCreateOrConnectWithoutRolePermissionInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutRolePermissionInput, PermissionUncheckedCreateWithoutRolePermissionInput>
  }

  export type RolesUpsertWithoutRolePermissionInput = {
    update: XOR<RolesUpdateWithoutRolePermissionInput, RolesUncheckedUpdateWithoutRolePermissionInput>
    create: XOR<RolesCreateWithoutRolePermissionInput, RolesUncheckedCreateWithoutRolePermissionInput>
  }

  export type RolesUpdateWithoutRolePermissionInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userRolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RolesUncheckedUpdateWithoutRolePermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userRolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type PermissionUpsertWithoutRolePermissionInput = {
    update: XOR<PermissionUpdateWithoutRolePermissionInput, PermissionUncheckedUpdateWithoutRolePermissionInput>
    create: XOR<PermissionCreateWithoutRolePermissionInput, PermissionUncheckedCreateWithoutRolePermissionInput>
  }

  export type PermissionUpdateWithoutRolePermissionInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type PermissionUncheckedUpdateWithoutRolePermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutUserRolePermissionInput = {
    email: string
    firstName?: string | null
    lastName?: string | null
    address?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    PurchaseOrder?: PurchaseOrderCreateNestedManyWithoutUserInput
    SalesOrder?: SalesOrderCreateNestedManyWithoutUserInput
    UserTokens?: UserTokensCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserRolePermissionInput = {
    id?: number
    email: string
    firstName?: string | null
    lastName?: string | null
    address?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    PurchaseOrder?: PurchaseOrderUncheckedCreateNestedManyWithoutUserInput
    SalesOrder?: SalesOrderUncheckedCreateNestedManyWithoutUserInput
    UserTokens?: UserTokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserRolePermissionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRolePermissionInput, UserUncheckedCreateWithoutUserRolePermissionInput>
  }

  export type RolesCreateWithoutUserInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rolePermission?: rolesPermissionCreateNestedManyWithoutRoleInput
  }

  export type RolesUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rolePermission?: rolesPermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RolesCreateOrConnectWithoutUserInput = {
    where: RolesWhereUniqueInput
    create: XOR<RolesCreateWithoutUserInput, RolesUncheckedCreateWithoutUserInput>
  }

  export type UserUpsertWithoutUserRolePermissionInput = {
    update: XOR<UserUpdateWithoutUserRolePermissionInput, UserUncheckedUpdateWithoutUserRolePermissionInput>
    create: XOR<UserCreateWithoutUserRolePermissionInput, UserUncheckedCreateWithoutUserRolePermissionInput>
  }

  export type UserUpdateWithoutUserRolePermissionInput = {
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PurchaseOrder?: PurchaseOrderUpdateManyWithoutUserNestedInput
    SalesOrder?: SalesOrderUpdateManyWithoutUserNestedInput
    UserTokens?: UserTokensUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRolePermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PurchaseOrder?: PurchaseOrderUncheckedUpdateManyWithoutUserNestedInput
    SalesOrder?: SalesOrderUncheckedUpdateManyWithoutUserNestedInput
    UserTokens?: UserTokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RolesUpsertWithoutUserInput = {
    update: XOR<RolesUpdateWithoutUserInput, RolesUncheckedUpdateWithoutUserInput>
    create: XOR<RolesCreateWithoutUserInput, RolesUncheckedCreateWithoutUserInput>
  }

  export type RolesUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolePermission?: rolesPermissionUpdateManyWithoutRoleNestedInput
  }

  export type RolesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolePermission?: rolesPermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type PurchaseOrderCreateManyUserInput = {
    id?: number
    purchaseOrderNo?: string | null
    vendorId: number
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalesOrderCreateManyUserInput = {
    id?: number
    salesOrderNo?: string | null
    customerId: number
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserTokensCreateManyUserInput = {
    id?: number
    expiry: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userRolePermissionCreateManyUserInput = {
    id?: number
    roleid: number
  }

  export type PurchaseOrderUpdateWithoutUserInput = {
    purchaseOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: PurchaseItemsUpdateManyWithoutPurchaseOrderNestedInput
    vendorName?: VendorUpdateOneRequiredWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: IntFieldUpdateOperationsInput | number
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: PurchaseItemsUncheckedUpdateManyWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateManyWithoutPurchaseOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    vendorId?: IntFieldUpdateOperationsInput | number
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesOrderUpdateWithoutUserInput = {
    salesOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: SalesItemsUpdateManyWithoutSalesOrderNestedInput
    customerName?: CustomerUpdateOneRequiredWithoutSalesOrderNestedInput
  }

  export type SalesOrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    salesOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: IntFieldUpdateOperationsInput | number
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: SalesItemsUncheckedUpdateManyWithoutSalesOrderNestedInput
  }

  export type SalesOrderUncheckedUpdateManyWithoutSalesOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    salesOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: IntFieldUpdateOperationsInput | number
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTokensUpdateWithoutUserInput = {
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTokensUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserTokensUncheckedUpdateManyWithoutUserTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userRolePermissionUpdateWithoutUserInput = {
    role?: RolesUpdateOneRequiredWithoutUserNestedInput
  }

  export type userRolePermissionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
  }

  export type userRolePermissionUncheckedUpdateManyWithoutUserRolePermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
  }

  export type PurchaseItemsCreateManyProductInput = {
    id?: number
    purchaseOrderId: number
    quantity: number
    purchasePrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalesItemsCreateManyProductInput = {
    id?: number
    salesOrderId: number
    quantity: number
    sellingPrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseItemsUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaseOrder?: PurchaseOrderUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type PurchaseItemsUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseItemsUncheckedUpdateManyWithoutPurchaseItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesItemsUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    salesOrder?: SalesOrderUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type SalesItemsUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    salesOrderId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesItemsUncheckedUpdateManyWithoutSalesItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    salesOrderId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseItemsCreateManyPurchaseOrderInput = {
    id?: number
    productId: number
    quantity: number
    purchasePrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseItemsUpdateWithoutPurchaseOrderInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutPurchaseItemsNestedInput
  }

  export type PurchaseItemsUncheckedUpdateWithoutPurchaseOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseItemsUncheckedUpdateManyWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesItemsCreateManySalesOrderInput = {
    id?: number
    productId: number
    quantity: number
    sellingPrice: number
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalesItemsUpdateWithoutSalesOrderInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSalesItemsNestedInput
  }

  export type SalesItemsUncheckedUpdateWithoutSalesOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SalesItemsUncheckedUpdateManyWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    sellingPrice?: FloatFieldUpdateOperationsInput | number
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PurchaseOrderCreateManyVendorNameInput = {
    id?: number
    purchaseOrderNo?: string | null
    remarks?: string | null
    total: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PurchaseOrderUpdateWithoutVendorNameInput = {
    purchaseOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: PurchaseItemsUpdateManyWithoutPurchaseOrderNestedInput
    user?: UserUpdateOneRequiredWithoutPurchaseOrderNestedInput
  }

  export type PurchaseOrderUncheckedUpdateWithoutVendorNameInput = {
    id?: IntFieldUpdateOperationsInput | number
    purchaseOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: PurchaseItemsUncheckedUpdateManyWithoutPurchaseOrderNestedInput
  }

  export type SalesOrderCreateManyCustomerNameInput = {
    id?: number
    salesOrderNo?: string | null
    userId?: number | null
    remarks?: string | null
    total: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SalesOrderUpdateWithoutCustomerNameInput = {
    salesOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: SalesItemsUpdateManyWithoutSalesOrderNestedInput
    User?: UserUpdateOneWithoutSalesOrderNestedInput
  }

  export type SalesOrderUncheckedUpdateWithoutCustomerNameInput = {
    id?: IntFieldUpdateOperationsInput | number
    salesOrderNo?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    remarks?: NullableStringFieldUpdateOperationsInput | string | null
    total?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: SalesItemsUncheckedUpdateManyWithoutSalesOrderNestedInput
  }

  export type rolesPermissionCreateManyRoleInput = {
    id?: number
    permissionid: number
  }

  export type userRolePermissionCreateManyRoleInput = {
    id?: number
    userid: number
  }

  export type rolesPermissionUpdateWithoutRoleInput = {
    permission?: PermissionUpdateOneRequiredWithoutRolePermissionNestedInput
  }

  export type rolesPermissionUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionid?: IntFieldUpdateOperationsInput | number
  }

  export type rolesPermissionUncheckedUpdateManyWithoutRolePermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionid?: IntFieldUpdateOperationsInput | number
  }

  export type userRolePermissionUpdateWithoutRoleInput = {
    user?: UserUpdateOneRequiredWithoutUserRolePermissionNestedInput
  }

  export type userRolePermissionUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: IntFieldUpdateOperationsInput | number
  }

  export type userRolePermissionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userid?: IntFieldUpdateOperationsInput | number
  }

  export type rolesPermissionCreateManyPermissionInput = {
    id?: number
    roleid: number
  }

  export type rolesPermissionUpdateWithoutPermissionInput = {
    role?: RolesUpdateOneRequiredWithoutRolePermissionNestedInput
  }

  export type rolesPermissionUncheckedUpdateWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleid?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}